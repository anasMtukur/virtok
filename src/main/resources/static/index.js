var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var BraintreeErrors = /** @class */ (function () {
            function BraintreeErrors() {
            }
            BraintreeErrors.paymentErrorCodes = {
                "2000": {
                    "text": "Do Not Honor",
                    "implications": "Your bank is unwilling to accept the transaction. You will need to contact your bank for more details regarding this generic decline.",
                    "type": "Soft"
                },
                "2001": {
                    "text": "Insufficient Funds",
                    "implications": "The account did not have sufficient funds to cover the transaction amount at the time of the transaction – subsequent attempts at a later date may be successful.",
                    "type": "Soft"
                },
                "2002": {
                    "text": "Limit Exceeded",
                    "implications": "The attempted transaction exceeds the withdrawal limit of the account. You will need to contact your bank to change the account limits or use a different payment method.",
                    "type": "Soft"
                },
                "2003": {
                    "text": "Cardholder's Activity Limit Exceeded",
                    "implications": "The attempted transaction exceeds the activity limit of the account. You will need to contact your bank to change the account limits or use a different payment method.",
                    "type": "Soft"
                },
                "2004": {
                    "text": "Expired Card",
                    "implications": "Card is expired. You will need to use a different payment method.",
                    "type": "Hard"
                },
                "2005": {
                    "text": "Invalid Credit Card Number",
                    "implications": "You entered an invalid payment method or made a typo in your credit card information. Please correct your payment information and attempt the transaction again – if the decline persists, you will need to contact your bank.",
                    "type": "Hard"
                },
                "2006": {
                    "text": "Invalid Expiration Date",
                    "implications": "You entered an invalid payment method or made a typo in your card expiration date. Please correct your payment information and attempt the transaction again – if the decline persists, you will need to contact your bank.",
                    "type": "Hard"
                },
                "2007": {
                    "text": "No Account",
                    "implications": "The submitted card number is not on file with the card-issuing bank. You will need to contact your bank.",
                    "type": "Hard"
                },
                "2008": {
                    "text": "Card Account Length Error",
                    "implications": "The submitted card number does not include the proper number of digits. Please attempt the transaction again – if the decline persists, you will need to contact your bank.",
                    "type": "Hard"
                },
                "2009": {
                    "text": "No Such Issuer",
                    "implications": "This decline code could indicate that the submitted card number does not correlate to an existing card-issuing bank or that there is a connectivity error with the issuer. Please attempt the transaction again – if the decline persists, you will need to contact your bank.",
                    "type": "Soft"
                },
                "2010": {
                    "text": "Card Issuer Declined CVV",
                    "implications": "You entered in an invalid security code or made a typo in your card information. Please attempt the transaction again – if the decline persists, you will need to contact your bank.",
                    "type": "Hard"
                },
                "2011": {
                    "text": "Voice Authorization Required",
                    "implications": "Your bank is requesting that we call to obtain a special authorization code in order to complete this transaction. This can result in a lengthy process – we recommend obtaining a new payment method instead. Contact our Support team for more details.",
                    "type": "Hard"
                },
                "2012": {
                    "text": "Processor Declined – Possible Lost Card",
                    "implications": "The card used has likely been reported as lost. You will need to contact your bank for more information.",
                    "type": "Hard"
                },
                "2013": {
                    "text": "Processor Declined – Possible Stolen Card",
                    "implications": "The card used has likely been reported as stolen. You will need to contact your bank for more information.",
                    "type": "Hard"
                },
                "2014": {
                    "text": "Processor Declined – Fraud Suspected",
                    "implications": "Your bank suspects fraud – you will need to contact your bank for more information.",
                    "type": "Hard"
                },
                "2015": {
                    "text": "Transaction Not Allowed",
                    "implications": "Your bank is declining the transaction for unspecified reasons, possibly due to an issue with the card itself. You will need to contact your bank or use an alternative payment method.",
                    "type": "Hard"
                },
                "2016": {
                    "text": "Duplicate Transaction",
                    "implications": "The submitted transaction appears to be a duplicate of a previously submitted transaction and was declined to prevent charging the same card twice for the same service.",
                    "type": "Soft"
                },
                "2017": {
                    "text": "Cardholder Stopped Billing",
                    "implications": "You requested a cancellation of a single transaction – reach out to them for more information.",
                    "type": "Hard"
                },
                "2018": {
                    "text": "Cardholder Stopped All Billing",
                    "implications": "You requested the cancellation of a recurring transaction or subscription – reach out to them for more information.",
                    "type": "Hard"
                },
                "2019": {
                    "text": "Invalid Transaction",
                    "implications": "Your bank declined the transaction, typically because the card in question does not support this type of transaction – for example, you used an FSA debit card for a non-healthcare related purchase. You will need to contact your bank for more information.",
                    "type": "Hard"
                },
                "2020": {
                    "text": "Violation",
                    "implications": "You will need to contact your bank for more information.",
                    "type": "Hard"
                },
                "2021": {
                    "text": "Security Violation",
                    "implications": "Please attempt the transaction again – if the decline persists, contact our Support team for more information.",
                    "type": "Soft"
                },
                "2022": {
                    "text": "Declined – Updated Cardholder Available",
                    "implications": "The submitted card has expired or been reported lost and a new card has been issued. Please provide updated card information.",
                    "type": "Hard"
                },
                "2023": {
                    "text": "Processor Does Not Support This Feature",
                    "implications": "Our account can't process transactions with the intended feature – for example, 3D Secure or Level 2/Level 3 data. If you want our merchant account to be set up to accept this type of transaction, contact our Support team.",
                    "type": "Hard"
                },
                "2024": {
                    "text": "Card Type Not Enabled",
                    "implications": "Our account can't process the attempted card type. If you want our merchant account to be set up to accept this type of card, contact our Support team.",
                    "type": "Hard"
                },
                "2025": {
                    "text": "Set Up Error – Merchant",
                    "implications": "Depending on our region, this response could indicate a connectivity or setup issue. Contact our Support team for more information regarding this error message.",
                    "type": "Soft"
                },
                "2026": {
                    "text": "Invalid Merchant ID",
                    "implications": "Depending on our region, this response could indicate a connectivity or setup issue. Contact our Support team for more information regarding this error message.",
                    "type": "Soft"
                },
                "2027": {
                    "text": "Set Up Error – Amount",
                    "implications": "This rare decline code indicates an issue with processing the amount of the transaction. You will need to contact your bank for more details.",
                    "type": "Hard"
                },
                "2028": {
                    "text": "Set Up Error – Hierarchy",
                    "implications": "There is a setup issue with our account. Contact our Support team for more information.",
                    "type": "Hard"
                },
                "2029": {
                    "text": "Set Up Error – Card",
                    "implications": "This response generally indicates that there is a problem with the submitted card. You will need to use a different payment method.",
                    "type": "Hard"
                },
                "2030": {
                    "text": "Set Up Error – Terminal",
                    "implications": "There is a setup issue with our account. Contact our Support team for more information.",
                    "type": "Hard"
                },
                "2031": {
                    "text": "Encryption Error",
                    "implications": "The cardholder's bank does not support $0.00 card verifications. Enable the Retry All Failed $0 option to resolve this error. Contact our Support team with questions.",
                    "type": "Hard"
                },
                "2032": {
                    "text": "Surcharge Not Permitted",
                    "implications": "Surcharge amount not permitted on this card. You will need to use a different payment method.",
                    "type": "Hard"
                },
                "2033": {
                    "text": "Inconsistent Data",
                    "implications": "An error occurred when communicating with the processor. Attempt the transaction again.",
                    "type": "Soft"
                },
                "2034": {
                    "text": "No Action Taken",
                    "implications": "An error occurred and the intended transaction was not completed. Attempt the transaction again.",
                    "type": "Soft"
                },
                "2035": {
                    "text": "Partial Approval For Amount In Group III Version",
                    "implications": "Refer to the AVS response for further details.",
                    "type": "Soft"
                },
                "2036": {
                    "text": "Authorization could not be found to reverse",
                    "implications": "An error occurred when trying to process the authorization. This response could indicate an issue with your card – contact our Support team for more information.",
                    "type": "Hard"
                },
                "2037": {
                    "text": "Already Reversed",
                    "implications": "The indicated authorization has already been reversed. Contact our Support team for more information.",
                    "type": "Hard"
                },
                "2038": {
                    "text": "Processor Declined",
                    "implications": "Your bank is unwilling to accept the transaction. The reasons for this response can vary – you will need to contact your bank for more details.",
                    "type": "Soft"
                },
                "2039": {
                    "text": "Invalid Authorization Code",
                    "implications": "The authorization code was not found or not provided. Please attempt the transaction again – if the decline persists, you will need to contact your bank.",
                    "type": "Hard"
                },
                "2040": {
                    "text": "Invalid Store",
                    "implications": "There may be an issue with the configuration of our account. Please attempt the transaction again – if the decline persists, contact our Support team for more information.",
                    "type": "Soft"
                },
                "2041": {
                    "text": "Declined – Call For Approval",
                    "implications": "The card used for this transaction requires your approval – you will need to contact your bank.",
                    "type": "Hard"
                },
                "2042": {
                    "text": "Invalid Client ID",
                    "implications": "There may be an issue with the configuration of our account. Please attempt the transaction again – if the decline persists, contact our Support team for more information.",
                    "type": "Soft"
                },
                "2043": {
                    "text": "Error – Do Not Retry",
                    "implications": "Call Issuer,The card-issuing bank will not allow this transaction. You will need to contact your bank for more information.",
                    "type": "Hard"
                },
                "2044": {
                    "text": "Declined – Call Issuer",
                    "implications": "The card-issuing bank has declined this transaction. Please attempt the transaction again – if the decline persists, you will need to contact your bank for more information.",
                    "type": "Hard"
                },
                "2045": {
                    "text": "Invalid Merchant Number",
                    "implications": "There is a setup issue with our account. Contact our Support team for more information.",
                    "type": "Hard"
                },
                "2046": {
                    "text": "Declined",
                    "implications": "Your bank is unwilling to accept the transaction. For credit/debit card transactions, you will need to contact your bank for more details regarding this generic decline; if this is a PayPal transaction, you will need to contact PayPal.",
                    "type": "Soft"
                },
                "2047": {
                    "text": "Call Issuer. Pick Up Card",
                    "implications": "Your card has been reported as lost or stolen by the cardholder and the card-issuing bank has requested that merchants keep the card and call the number on the back to report it. As an online merchant, we don't have the physical card and can't complete this request – please provide a different payment method.",
                    "type": "Hard"
                },
                "2048": {
                    "text": "Invalid Amount",
                    "implications": "The authorized amount is set to zero, is unreadable, or exceeds the allowable amount. Make sure the amount is greater than zero and in a suitable format.",
                    "type": "Soft"
                },
                "2049": {
                    "text": "Invalid SKU Number",
                    "implications": "A non-numeric value was sent with the attempted transaction. Fix errors and resubmit with the transaction with the proper SKU Number.",
                    "type": "Hard"
                },
                "2050": {
                    "text": "Invalid Credit Plan",
                    "implications": "There may be an issue with your card or a temporary issue at the card-issuing bank. Please attempt the transaction again – if the decline persists, ask for an alternative payment method.",
                    "type": "Soft"
                },
                "2051": {
                    "text": "Credit Card Number does not match method of payment",
                    "implications": "There may be an issue with your credit card or a temporary issue at the card-issuing bank. Please attempt the transaction again – if the decline persists, ask for an alternative payment method.",
                    "type": "Hard"
                },
                "2053": {
                    "text": "Card reported as lost or stolen",
                    "implications": "The card used was reported lost or stolen. You will need to contact your bank for more information or use an alternative payment method.",
                    "type": "Hard"
                },
                "2054": {
                    "text": "Reversal amount does not match authorization amount",
                    "implications": "There may be an issue with your card or a temporary issue at the card-issuing bank. Please attempt the transaction again – if the decline persists, ask for an alternative payment method.",
                    "type": "Soft"
                },
                "2055": {
                    "text": "Invalid Transaction Division Number",
                    "implications": "Contact our Support team for more information regarding this error message.",
                    "type": "Hard"
                },
                "2056": {
                    "text": "Transaction amount exceeds the transaction division limit",
                    "implications": "Contact our Support team for more information regarding this error message.",
                    "type": "Hard"
                },
                "2057": {
                    "text": "Issuer or Cardholder has put a restriction on the card",
                    "implications": "You will need to contact your issuing bank for more information.",
                    "type": "Soft"
                },
                "2058": {
                    "text": "Merchant not Mastercard SecureCode enabled",
                    "implications": "The attempted card can't be processed without enabling 3D Secure for our account. Contact our Support team for more information regarding this feature or please contact us and provide an alternative payment method",
                    "type": "Hard"
                },
                "2059": {
                    "text": "Address Verification Failed",
                    "implications": "PayPal was unable to verify that the transaction qualifies for Seller Protection because the address was improperly formatted. You should contact PayPal for more information or use an alternative payment method.",
                    "type": "Hard"
                },
                "2060": {
                    "text": "Address Verification and Card Security Code Failed",
                    "implications": "Both the AVS and CVV checks failed for this transaction. You should contact PayPal for more information or use an alternative payment method.",
                    "type": "Hard"
                },
                "2061": {
                    "text": "Invalid Transaction Data",
                    "implications": "There may be an issue with your card or a temporary issue at the card-issuing bank. Please attempt the transaction again – if the decline persists, ask for an alternative payment method.",
                    "type": "Hard"
                },
                "2062": {
                    "text": "Invalid Tax Amount",
                    "implications": "There may be an issue with your card or a temporary issue at the card-issuing bank. Please attempt the transaction again – if the decline persists, ask for an alternative payment method.",
                    "type": "Soft"
                },
                "2063": {
                    "text": "PayPal Business Account preference resulted in the transaction failing",
                    "implications": "We can't process this transaction because our account is set to block certain payment types, such as eChecks or foreign currencies. If you think you have received this decline in error, contact our Support team.",
                    "type": "Hard"
                },
                "2064": {
                    "text": "Invalid Currency Code",
                    "implications": "There may be an issue with the configuration of our account for the currency specified. Contact our Support team for more information.",
                    "type": "Hard"
                },
                "2065": {
                    "text": "Refund Time Limit Exceeded",
                    "implications": "PayPal requires that refunds are issued within 180 days of the sale. This refund can't be successfully processed.",
                    "type": "Hard"
                },
                "2066": {
                    "text": "PayPal Business Account Restricted",
                    "implications": "We are unable to process this transaction",
                    "type": "Hard"
                },
                "2067": {
                    "text": "Authorization Expired",
                    "implications": "The PayPal authorization is no longer valid.",
                    "type": "Hard"
                },
                "2068": {
                    "text": "PayPal Business Account Locked or Closed",
                    "implications": "We'll need to contact PayPal's Support team to resolve an issue with our account. Once resolved, we can attempt to process the transaction again.",
                    "type": "Hard"
                },
                "2069": {
                    "text": "PayPal Blocking Duplicate Order IDs",
                    "implications": "The submitted PayPal transaction appears to be a duplicate of a previously submitted transaction. This decline code indicates an attempt to prevent charging the same PayPal account twice for the same service.",
                    "type": "Hard"
                },
                "2070": {
                    "text": "PayPal Buyer Revoked Future Payment Authorization",
                    "implications": "You requested a cancellation of all future transactions on your PayPal account. Please contact us or provide an alternative payment method.",
                    "type": "Hard"
                },
                "2071": {
                    "text": "PayPal Payee Account Invalid Or Does Not Have a Confirmed Email",
                    "implications": "You have not finalized setup of your PayPal account. Please contact us or provide an alternative payment method.",
                    "type": "Hard"
                },
                "2072": {
                    "text": "PayPal Payee Email Incorrectly Formatted",
                    "implications": "You made a typo or is attempting to use an invalid PayPal account.",
                    "type": "Hard"
                },
                "2073": {
                    "text": "PayPal Validation Error",
                    "implications": "PayPal can't validate this transaction. This decline code will be triggered if we attempt a transaction using the email address registered with our PayPal Business account.",
                    "type": "Hard"
                },
                "2074": {
                    "text": "Funding Instrument In The PayPal Account Was Declined By The Processor Or Bank",
                    "implications": "Or It Can't Be Used For This Payment,Your payment method associated with your PayPal account was declined. Please contact us or provide an alternative payment method.",
                    "type": "Hard"
                },
                "2075": {
                    "text": "Payer Account Is Locked Or Closed",
                    "implications": "Your PayPal account can't be used for transactions at this time. You will need to contact PayPal for more information or use an alternative payment method.",
                    "type": "Hard"
                },
                "2076": {
                    "text": "Payer Cannot Pay For This Transaction With PayPal",
                    "implications": "You should contact PayPal for more information or use an alternative payment method. We may also receive this response if we create transactions using the email address registered with our PayPal Business account.",
                    "type": "Hard"
                },
                "2077": {
                    "text": "Transaction Refused Due To PayPal Risk Model",
                    "implications": "PayPal has declined this transaction due to risk limitations. We'll need to contact PayPal's Support team to resolve this issue.",
                    "type": "Hard"
                },
                "2079": {
                    "text": "PayPal Merchant Account Configuration Error",
                    "implications": "We'll need to contact our Support team to resolve an issue with our account. Once resolved, we can attempt to process the transaction again.",
                    "type": "Hard"
                },
                "2081": {
                    "text": "PayPal pending payments are not supported",
                    "implications": "Braintree received an unsupported Pending Verification response from PayPal. Contact Braintree's Support team to resolve a potential issues with our account settings. If there is no issue with our account, Please reach out to PayPal for more information.",
                    "type": "Hard"
                },
                "2082": {
                    "text": "PayPal Domestic Transaction Required",
                    "implications": "This transaction requires you to be a resident of the same country as us. Please provide an alternative payment method.",
                    "type": "Hard"
                },
                "2083": {
                    "text": "PayPal Phone Number Required",
                    "implications": "This transaction requires the payer to provide a valid phone number. You should contact PayPal for more information or use an alternative payment method.",
                    "type": "Hard"
                },
                "2084": {
                    "text": "PayPal Tax Info Required",
                    "implications": "You must complete your PayPal account information, including submitting your phone number and all required tax information.",
                    "type": "Hard"
                },
                "2085": {
                    "text": "PayPal Payee Blocked Transaction",
                    "implications": "Fraud settings on our PayPal business account are blocking payments from you. These can be adjusted in the Block Payments section of our PayPal business account.",
                    "type": "Hard"
                },
                "2086": {
                    "text": "PayPal Transaction Limit Exceeded",
                    "implications": "The settings on your account do not allow a transaction amount this large. You will need to contact PayPal to resolve this issue.",
                    "type": "Hard"
                },
                "2087": {
                    "text": "PayPal reference transactions not enabled for our account",
                    "implications": "The fraud settings on our PayPal business account are blocking payments from you. We can adjust these settings in the Block Payments section of our PayPal business account.",
                    "type": "Hard"
                },
                "2088": {
                    "text": "Currency not enabled for our PayPal seller account",
                    "implications": "This currency is not currently supported by our PayPal account. We can accept additional currencies by updating our PayPal profile.",
                    "type": "Hard"
                },
                "2089": {
                    "text": "PayPal payee email permission denied for this request",
                    "implications": "PayPal API permissions are not set up between our PayPal business accounts. Contact our Support team for more details.",
                    "type": "Hard"
                },
                "2090": {
                    "text": "PayPal account not configured to refund more than settled amount",
                    "implications": "Our PayPal account is not set up to refund amounts higher than the original transaction amount. Contact PayPal's Support team for information on how to enable this.",
                    "type": "Hard"
                },
                "2091": {
                    "text": "Currency of this transaction must match currency of our PayPal account",
                    "implications": "Our PayPal account can only process transactions in the currency of our home country. Contact our Support team for more information.",
                    "type": "Hard"
                },
                "2092": {
                    "text": "Processor Declined",
                    "implications": "Your bank is unwilling to accept the transaction. You will need to contact your bank for more details regarding this generic decline.",
                    "type": "Soft"
                },
                "2093": {
                    "text": "Processor Declined",
                    "implications": "Your bank is unwilling to accept the transaction. You will need to contact your bank for more details regarding this generic decline.",
                    "type": "Soft"
                },
                "2094": {
                    "text": "Processor Declined",
                    "implications": "Your bank is unwilling to accept the transaction. You will need to contact your bank for more details regarding this generic decline.",
                    "type": "Soft"
                },
                "2095": {
                    "text": "Processor Declined",
                    "implications": "Your bank is unwilling to accept the transaction. You will need to contact your bank for more details regarding this generic decline.",
                    "type": "Soft"
                },
                "2096": {
                    "text": "Processor Declined",
                    "implications": "Your bank is unwilling to accept the transaction. You will need to contact your bank for more details regarding this generic decline.",
                    "type": "Soft"
                },
                "2097": {
                    "text": "Processor Declined",
                    "implications": "Your bank is unwilling to accept the transaction. You will need to contact your bank for more details regarding this generic decline.",
                    "type": "Soft"
                },
                "2098": {
                    "text": "Processor Declined",
                    "implications": "Your bank is unwilling to accept the transaction. You will need to contact your bank for more details regarding this generic decline.",
                    "type": "Soft"
                },
                "2099": {
                    "text": "Processor Declined",
                    "implications": "Your bank is unwilling to accept the transaction. You will need to contact your bank for more details regarding this generic decline.",
                    "type": "Soft"
                },
                "3000": {
                    "text": "Processor Network Unavailable – Try Again",
                    "implications": "This response could indicate a problem with the back-end processing network, not necessarily a problem with the payment method. Please attempt the transaction again – if the decline persists, contact our Support team for more information",
                    "type": "Soft"
                }
            };
            return BraintreeErrors;
        }());
        Company.BraintreeErrors = BraintreeErrors;
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    "use strict";
    angular.module("qna", [
        "ui.router",
        "ngMaterial",
        "md.data.table",
        "ngAnimate",
        "ngMessages",
        "ui.validate",
        "tandibar/ng-rollbar",
        "ngSanitize",
        "opentok",
        "moment-picker",
        "angular-loading-bar",
        "simditor"
    ]);
    Qna.getModule = function () {
        return angular.module("qna");
    };
    Qna.SURVEY_QUESTIONS = [
        { text: 'How easy was the system to use?', min: 'Difficult', max: 'Very easy' },
        { text: 'How clear was the guidance given to use the system?', min: 'Unclear', max: 'Very Clear' },
        { text: 'Overall how would you rate the system', min: 'Bad', max: 'Great!' }
    ];
    Qna.COMPETENCY_TYPES = [
        { name: 'Custom Competency', value: 'Custom' },
        { name: 'Standardized Competency', value: 'Core' } /*,
        { name: 'Centralised Question Bank', value: 'Question Bank' }*/
    ];
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    var UploadChange = /** @class */ (function () {
        function UploadChange() {
            // public restrict: string = "A";
            this.scope = {
                ngUploadChange: "&"
            };
            this.link = function ($scope, $element, $attrs) {
                $element.on("change", function (event) {
                    $scope.$apply(function () {
                        $scope.ngUploadChange({ $event: event });
                    });
                });
                $scope.$on("$destroy", function () {
                    $element.off();
                });
            };
        }
        return UploadChange;
    }());
    app.directive("ngUploadChange", [function () { return new UploadChange(); }]);
    var CompareTo = /** @class */ (function () {
        function CompareTo() {
            // public restrict: string = "A";
            this.require = "ngModel";
            this.scope = {
                compare: "="
            };
            this.link = function (scope, element, attrs, ngModel) {
                ngModel.$validators.compareTo = function (modelValue) {
                    return modelValue == scope.compare;
                };
                scope.$watch("compare", function () {
                    ngModel.$validate();
                });
            };
        }
        return CompareTo;
    }());
    app.directive("compareTo", [
        function () { return new CompareTo(); }
    ]);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var _this = this;
    var app = Qna.getModule();
    app.directive('stopccp', function () {
        return {
            scope: {},
            link: function (scope, element) {
                element.on('cut copy paste', function (event) {
                    event.preventDefault();
                });
            }
        };
    });
    app.directive('copyToClipboard', function () {
        return {
            restrict: 'A',
            link: function (scope, elem, attrs) {
                elem.click(function () {
                    if (attrs.copyToClipboard) {
                        var $temp_input = $("<input>");
                        $("body").append($temp_input);
                        $temp_input.val(attrs.copyToClipboard).select();
                        document.execCommand("copy");
                        $temp_input.remove();
                    }
                });
            }
        };
    });
    var getJsonFromUrl = function (hashBased) {
        var query;
        if (hashBased) {
            var pos = location.href.indexOf("?");
            if (pos == -1)
                return [];
            query = location.href.substr(pos + 1);
        }
        else {
            query = location.search.substr(1);
        }
        var result = {};
        query.split("&").forEach(function (part) {
            if (!part)
                return;
            part = part.split("+").join(" "); // replace every + with space, regexp-free version
            var eq = part.indexOf("=");
            var key = eq > -1 ? part.substr(0, eq) : part;
            var val = eq > -1 ? decodeURIComponent(part.substr(eq + 1)) : "";
            var from = key.indexOf("[");
            if (from == -1)
                result[decodeURIComponent(key)] = val;
            else {
                var to = key.indexOf("]", from);
                var index = decodeURIComponent(key.substring(from + 1, to));
                key = decodeURIComponent(key.substring(0, from));
                if (!result[key])
                    result[key] = [];
                if (!index)
                    result[key].push(val);
                else
                    result[key][index] = val;
            }
        });
        return result;
    };
    app.run([
        "$http", "$state", "$window", "$rootScope", "$location", "SessionService",
        function ($http, $state, $window, $rootScope, $location, SessionService) { return __awaiter(_this, void 0, void 0, function () {
            var nowAt, gaTrackingId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (is.safari()) {
                            angular.element("html").addClass("is-safari");
                        }
                        nowAt = window.location.hostname;
                        gaTrackingId = 'UA-196969421-1X';
                        if (!localStorage.getItem(nowAt)) return [3 /*break*/, 1];
                        gaTrackingId = localStorage.getItem(nowAt);
                        console.log("Sessioned: GA started on " + nowAt + " For " + gaTrackingId);
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, $http.get("/webhooks/ga-tracker/dicalemitoges", {}).then(function (result) {
                            gaTrackingId = result.data.trackingId;
                            localStorage.setItem(nowAt, result.data.trackingId);
                        }, function (error) {
                            console.error("Fetching GA tracker failed with " + error);
                        })];
                    case 2:
                        _a.sent();
                        console.log("Fetched: GA started on " + nowAt + " For " + gaTrackingId);
                        _a.label = 3;
                    case 3:
                        ga('create', gaTrackingId, 'auto');
                        $rootScope.$on('$stateChangeStart', function (event, toState, toParams, fromState, fromParams) {
                            if (fromState.url === '/candidate/upload' && toState.url != '/candidate/goodbye') {
                                Rollbar.info("Candidate clicked on back or refresh button during upload");
                            }
                        });
                        $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams) {
                            if (!ga)
                                return;
                            var previousState = fromState.url;
                            var newState = toState.url;
                            var paramsHash = getJsonFromUrl(true);
                            if (previousState === '/company/braintree' &&
                                newState === '/company/dashboard' &&
                                SessionService.isCompany() &&
                                SessionService.hasActivePlan()) {
                                ga('send', 'pageview', { page: '/company/dashboard?user=new' });
                            }
                            else if (paramsHash.utm_medium === "email") {
                                var utm_campaign = encodeURI(paramsHash.utm_campaign);
                                var utm_source = encodeURI(paramsHash.utm_source);
                                ga('send', 'pageview', {
                                    page: "/company/dashboard?utm_campaign="
                                        + utm_campaign + "&utm_medium=email&utm_source="
                                        + utm_source
                                });
                            }
                            else {
                                ga('send', 'pageview', { page: $location.path() });
                            }
                        });
                        return [2 /*return*/];
                }
            });
        }); }
    ]);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    app.config([
        "$mdThemingProvider",
        function ($mdThemingProvider) {
            // NTU themes
            $mdThemingProvider.definePalette('ntuBlue', {
                '50': 'e3e4ec',
                '100': 'babbd0',
                '200': '8c8eb1',
                '300': '5d6091',
                '400': '3b3e7a',
                '500': '181C62',
                '600': '181C62',
                '700': '181C62',
                '800': '0e1146',
                '900': '080934',
                'A100': '6e72ff',
                'A200': '3b41ff',
                'A400': '080fff',
                'A700': '0007ed',
                'contrastDefaultColor': 'light',
                'contrastDarkColors': [
                    '50',
                    '100',
                    '200',
                    'A100'
                ],
                'contrastLightColors': [
                    '300',
                    '400',
                    '500',
                    '600',
                    '700',
                    '800',
                    '900',
                    'A200',
                    'A400',
                    'A700'
                ]
            });
            $mdThemingProvider.definePalette('ntuRed', {
                '50': 'fae3e8',
                '100': 'f3b9c6',
                '200': 'eb8aa0',
                '300': 'e35b79',
                '400': 'dd375d',
                '500': 'ed1556',
                '600': 'd3123a',
                '700': 'd71440',
                '800': 'c70b2a',
                '900': 'be061c',
                'A100': 'ffe7e9',
                'A200': 'd71440',
                'A400': 'ff818c',
                'A700': 'bc1339',
                'contrastDefaultColor': 'light',
                'contrastDarkColors': [
                    '50',
                    '100',
                    '200',
                    '300',
                    'A100',
                    'A200',
                    'A400',
                    'A700'
                ],
                'contrastLightColors': [
                    '400',
                    '500',
                    '600',
                    '700',
                    '800',
                    '900'
                ]
            });
            // Common themes
            $mdThemingProvider.definePalette('5qlivepurple', {
                '50': 'fae3e8',
                '100': 'f3b9c6',
                '200': 'eb8aa0',
                '300': 'e35b79',
                '400': 'dd375d',
                '500': 'd71440',
                '600': 'd3123a',
                '700': 'cd0e32',
                '800': 'c70b2a',
                '900': 'be061c',
                'A100': 'ffe7e9',
                'A200': 'ffb4ba',
                'A400': 'ff818c',
                'A700': 'ff6874',
                'contrastDefaultColor': 'light',
                'contrastDarkColors': [
                    '50',
                    '100',
                    '200',
                    '300',
                    'A100',
                    'A200',
                    'A400',
                    'A700'
                ],
                'contrastLightColors': [
                    '400',
                    '500',
                    '600',
                    '700',
                    '800',
                    '900'
                ]
            });
            $mdThemingProvider.definePalette('5qliveyellow', {
                '50': 'e3e4ec',
                '100': 'babbd0',
                '200': '8c8eb1',
                '300': '5d6091',
                '400': '3b3e7a',
                '500': '181c62',
                '600': '15195a',
                '700': '181C62',
                '800': '0e1146',
                '900': '080934',
                'A100': '6e72ff',
                'A200': '3b41ff',
                'A400': '080fff',
                'A700': '0007ed',
                'contrastDefaultColor': 'light',
                'contrastDarkColors': [
                    '50',
                    '100',
                    '200',
                    'A100'
                ],
                'contrastLightColors': [
                    '300',
                    '400',
                    '500',
                    '600',
                    '700',
                    '800',
                    '900',
                    'A200',
                    'A400',
                    'A700'
                ]
            });
            $mdThemingProvider.definePalette('5qlivered', {
                '50': 'f9e0e0',
                '100': 'f0b3b3',
                '200': 'e68080',
                '300': 'db4d4d',
                '400': 'd42626',
                '500': 'cc0000',
                '600': 'c70000',
                '700': 'c00000',
                '800': 'b90000',
                '900': 'ad0000',
                'A100': 'ffd7d7',
                'A200': 'ffa4a4',
                'A400': 'ff7171',
                'A700': 'ff5858',
                'contrastDefaultColor': 'light',
                'contrastDarkColors': [
                    '50',
                    '100',
                    '200',
                    'A100',
                    'A200',
                    'A400',
                    'A700'
                ],
                'contrastLightColors': [
                    '300',
                    '400',
                    '500',
                    '600',
                    '700',
                    '800',
                    '900'
                ]
            });
            $mdThemingProvider.definePalette('5qlivedarkpurple', {
                '50': 'e3e4ec',
                '100': 'babbd0',
                '200': '8c8eb1',
                '300': '5d6091',
                '400': '3b3e7a',
                '500': '181c62',
                '600': '15195a',
                '700': '181C62',
                '800': '0e1146',
                '900': '080934',
                'A100': '6e72ff',
                'A200': '3b41ff',
                'A400': '080fff',
                'A700': '0007ed',
                'contrastDefaultColor': 'light',
                'contrastDarkColors': [
                    '50',
                    '100',
                    '200',
                    'A100'
                ],
                'contrastLightColors': [
                    '300',
                    '400',
                    '500',
                    '600',
                    '700',
                    '800',
                    '900',
                    'A200',
                    'A400',
                    'A700'
                ]
            });
            $mdThemingProvider
                .theme("darker")
                .primaryPalette("5qlivedarkpurple")
                .accentPalette("5qliveyellow");
            $mdThemingProvider
                .theme("default")
                .primaryPalette("ntuBlue")
                .accentPalette("ntuRed")
                .warnPalette('5qlivered');
            $mdThemingProvider
                .theme("timer")
                .primaryPalette("5qlivered")
                .accentPalette("5qlivered")
                .warnPalette("5qlivered")
                .backgroundPalette("5qlivered")
                .dark();
            $mdThemingProvider
                .theme("confirmdialog")
                .primaryPalette("5qliveyellow")
                .accentPalette("5qliveyellow")
                .warnPalette("5qlivered")
                .backgroundPalette("grey")
                .dark();
            $mdThemingProvider
                .theme("toasttheme")
                .primaryPalette("5qliveyellow")
                .accentPalette("5qliveyellow")
                .warnPalette("5qlivered")
                .backgroundPalette("5qliveyellow")
                .dark();
            $mdThemingProvider
                .theme("report")
                .primaryPalette("yellow")
                .accentPalette("red")
                .warnPalette("green")
                .backgroundPalette("blue")
                .dark();
            $mdThemingProvider
                .theme("signup-theme")
                .primaryPalette("ntuBlue")
                .accentPalette("ntuRed")
                .warnPalette('5qlivered')
                .backgroundPalette("grey")
                .dark();
        }
    ]);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    "use strict";
    var app = Qna.getModule();
    var SessionService = /** @class */ (function () {
        function SessionService(roleConstants) {
            var _this = this;
            this.roleConstants = roleConstants;
            this.isRoleSuperAdmin = function () {
                return _this.parseToken().authorities.some(function (authority) { return authority.authority === _this.roleConstants.identifiers.SUPER_ADMIN; });
            };
            this.isRoleAdmin = function () {
                return _this.parseToken().authorities.some(function (authority) { return authority.authority === _this.roleConstants.identifiers.ADMIN; });
            };
            this.isRoleReviewer = function () {
                return _this.parseToken().authorities.some(function (authority) { return authority.authority === _this.roleConstants.identifiers.REVIEWER; });
            };
            this.hasAdminPermissions = function () { return _this.isRoleSuperAdmin() || _this.isRoleAdmin(); };
            if (!this.token || this.token.trim() === "") {
                this.thawToken();
            }
        }
        SessionService.prototype.setPlan = function (plan) {
            this.plan = plan;
        };
        SessionService.prototype.getPlan = function () {
            return this.plan;
        };
        SessionService.prototype.logout = function () {
            this.token = undefined;
            this.logo = undefined;
            sessionStorage.removeItem("logo");
            sessionStorage.removeItem("token");
            window.location.assign("https://www.gradgreenhouse.com/video-admissions/?loggedout");
        };
        SessionService.prototype.setLogo = function (url) {
            sessionStorage.setItem("logo", url);
        };
        SessionService.prototype.setToken = function (token) {
            try {
                this.token = token.split(" ")[1];
                this.saveToken();
                this.setLoggingPayload();
            }
            catch (e) {
                this.token = null;
            }
        };
        SessionService.prototype.isAuthenticated = function () {
            if (this.token) {
                // We do this to appease the Typescript compiler. And to appease the Javascript evaluator
                return true;
            }
            else {
                return false;
            }
        };
        SessionService.prototype.hasActivePlan = function () {
            try {
                var hasActivePlan = this.parseToken().hasActivePlan;
                if (hasActivePlan) {
                    // We do this to appease the Typescript compiler. And to appease the Javascript evaluator
                    return true;
                }
                else {
                    return false;
                }
            }
            catch (e) {
                return false;
            }
        };
        SessionService.prototype.forceUpgrade = function () {
            try {
                var forceUpgrade = this.parseToken().forceUpgrade;
                if (forceUpgrade) {
                    // We do this to appease the Typescript compiler. And to appease the Javascript evaluator
                    return true;
                }
                else {
                    return false;
                }
            }
            catch (e) {
                return false;
            }
        };
        SessionService.prototype.blocked = function () {
            try {
                var blocked = this.parseToken().blocked;
                if (blocked) {
                    // We do this to appease the Typescript compiler. And to appease the Javascript evaluator
                    return true;
                }
                else {
                    return false;
                }
            }
            catch (e) {
                return false;
            }
        };
        SessionService.prototype.isCompany = function () {
            try {
                return this.parseToken()
                    .authorities.map(function (value, index) { return value.authority; })
                    .some(function (value, index) { return value === "COMPANY"; });
            }
            catch (e) {
                return false;
            }
        };
        SessionService.prototype.isCandidate = function () {
            try {
                return this.parseToken()
                    .authorities.map(function (value, index) { return value.authority; })
                    .some(function (value, index) { return value === "CANDIDATE"; });
            }
            catch (e) {
                return false;
            }
        };
        SessionService.prototype.isAdmin = function () {
            try {
                return this.parseToken()
                    .authorities.map(function (value, index) { return value.authority; })
                    .some(function (value, index) { return value === "ADMIN"; });
            }
            catch (e) {
                return false;
            }
        };
        SessionService.prototype.getName = function () {
            try {
                return this.parseToken().name;
            }
            catch (e) {
                return "Anonymous";
            }
        };
        SessionService.prototype.getFullName = function () {
            try {
                return this.parseToken().fullname;
            }
            catch (e) {
                return "Anonymous";
            }
        };
        SessionService.prototype.getEmail = function () {
            try {
                return this.parseToken().email;
            }
            catch (e) {
                return "admin@gradgh.com";
            }
        };
        SessionService.prototype.getLogo = function () {
            try {
                if (this.parseToken().logo != " ") {
                    return this.parseToken().logo;
                }
                else {
                    return sessionStorage.getItem("logo");
                }
            }
            catch (e) {
                return "https://s3-ap-southeast-1.amazonaws.com/com.5qlive.logos/5qlive.com/128x128.png";
            }
        };
        SessionService.prototype.parseToken = function () {
            try {
                var itoken = JSON.parse(atob(this.token.split(".")[1]));
                //console.log(itoken);
                return itoken;
            }
            catch (e) {
                return null;
            }
        };
        SessionService.prototype.saveToken = function () {
            sessionStorage.removeItem("token");
            sessionStorage.setItem("token", this.token);
        };
        SessionService.prototype.thawToken = function () {
            if (sessionStorage.getItem("token")) {
                this.token = sessionStorage.getItem("token");
                this.setLoggingPayload();
            }
        };
        SessionService.prototype.setLoggingPayload = function () {
            Rollbar.configure({
                payload: {
                    session: {
                        rawToken: this.token,
                        parsedToken: this.parseToken(),
                        isAuthenticated: this.isAuthenticated(),
                        isAdmin: this.isAdmin(),
                        isCompany: this.isCompany(),
                        isCandidate: this.isCandidate(),
                        hasActivePlan: this.hasActivePlan()
                    }
                }
            });
        };
        SessionService.$inject = ["roleConstants"];
        return SessionService;
    }());
    app.service("SessionService", SessionService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    "use strict";
    var app = Qna.getModule();
    var HopscotchService = /** @class */ (function () {
        function HopscotchService($state, $http) {
            this.$state = $state;
            this.$http = $http;
            var pT = sessionStorage.getItem("pastTours");
            if (pT) {
                this.pastTours = JSON.parse(pT);
            }
            else {
                this.pastTours = {};
            }
            //   this.globalDisable = true;
        }
        HopscotchService.prototype.resetTourHistory = function () {
            this.pastTours = {};
        };
        HopscotchService.prototype.getPastTours = function () {
            var _this = this;
            this.$http.get("/company/hopscotch/").then(function (result) {
                var serverState = result.data;
                if (!_this.pastTours) {
                    _this.pastTours = {};
                }
                if (serverState.tourHistory) {
                    _this.pastTours = _.merge(_this.pastTours, serverState.tourHistory);
                    sessionStorage.setItem("pastTours", JSON.stringify(_this.pastTours));
                    _this.globalDisable = serverState.globalDisable;
                    //   this.globalDisable = true;
                }
            }, function (error) {
                console.log(error);
            });
        };
        HopscotchService.prototype.forceStartTour = function (tour, stepNum) {
            if (stepNum) {
                hopscotch.startTour(tour, stepNum);
            }
            else {
                hopscotch.startTour(tour);
            }
        };
        HopscotchService.prototype.startTour = function (tour, stepNum) {
            if (this.globalDisable) {
                return;
            }
            if (this.$state.current.name in this.pastTours &&
                this.pastTours[this.$state.current.name].indexOf(tour.id) !== -1) {
                return;
            }
            if (this.$state.current.name in this.pastTours) {
                this.pastTours[this.$state.current.name] =
                    _.union(this.pastTours[this.$state.current.name], [tour.id]);
            }
            else {
                this.pastTours[this.$state.current.name] = [tour.id];
            }
            sessionStorage.setItem("pastTours", JSON.stringify(this.pastTours));
            this.$http.post("/company/hopscotch/", {
                state: this.$state.current.name,
                tour: tour.id
            }).then(function (result) {
            }, function (error) {
                console.error(error);
            });
            if (stepNum) {
                hopscotch.startTour(tour, stepNum);
            }
            else {
                hopscotch.startTour(tour);
            }
        };
        HopscotchService.$inject = ["$state", "$http"];
        return HopscotchService;
    }());
    app.service("HopscotchService", HopscotchService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    "use strict";
    var app = Qna.getModule();
    var VideoService = /** @class */ (function () {
        function VideoService() {
        }
        VideoService.prototype.storeVideo = function (video) {
            this.video = video;
        };
        VideoService.prototype.getVideo = function () {
            return this.video;
        };
        return VideoService;
    }());
    app.service("VideoService", VideoService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    "use strict";
    var app = Qna.getModule();
    var JWTInterceptor = /** @class */ (function () {
        function JWTInterceptor($location, $q, session) {
            var _this = this;
            this.$location = $location;
            this.$q = $q;
            this.session = session;
            this.request = function (config) {
                config.headers = config.headers || {};
                if (_this.session && _this.session.token && config.url.search("https://5qlive-videos.s3-ap-southeast-1.amazonaws.com") == -1)
                    config.headers.Authorization = 'Bearer ' + _this.session.token;
                return config;
            };
            this.requestError = function (rejection) {
                return _this.$q.reject(rejection);
            };
            this.response = function (response) {
                return response || _this.$q.when(response);
            };
            this.responseError = function (rejection) {
                Rollbar.error(rejection);
                return _this.$q.reject(rejection);
            };
        }
        return JWTInterceptor;
    }());
    app.factory("JWTInterceptor", ["$location", "$q", "SessionService", function ($location, $q, session) {
            return new JWTInterceptor($location, $q, session);
        }
    ]);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Filters;
    (function (Filters) {
        "use strict";
        var app = Qna.getModule();
        var TrustedSource = /** @class */ (function () {
            function TrustedSource($sce) {
                return function (recordingURL) {
                    return $sce.trustAsResourceUrl(recordingURL);
                };
            }
            TrustedSource.$inject = ["$sce"];
            return TrustedSource;
        }());
        var SecondsToMinutes = /** @class */ (function () {
            function SecondsToMinutes() {
                return function (seconds) { return seconds / 60; };
            }
            return SecondsToMinutes;
        }());
        var RoundedSecondsToMinutes = /** @class */ (function () {
            function RoundedSecondsToMinutes() {
                return function (seconds) { return Math.ceil(seconds / 60); };
            }
            return RoundedSecondsToMinutes;
        }());
        var SecondsToMMSS = /** @class */ (function () {
            function SecondsToMMSS() {
                return function (t) {
                    if (isNaN(t)) {
                        return "00:00";
                    }
                    var minutes = Math.floor(t / 60.0);
                    var seconds = Math.floor(t % 60);
                    return ((minutes < 10 ? "0" : "") + minutes +
                        ":" +
                        (seconds < 10 ? "0" : "") + seconds);
                };
            }
            return SecondsToMMSS;
        }());
        // @ts-ignore
        app.filter("TrustedSource", TrustedSource);
        // @ts-ignore
        app.filter("SecondsToMinutes", SecondsToMinutes);
        // @ts-ignore
        app.filter("RoundedSecondsToMinutes", RoundedSecondsToMinutes);
        // @ts-ignore
        app.filter("SecondsToMMSS", SecondsToMMSS);
    })(Filters = Qna.Filters || (Qna.Filters = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Hopscotch;
    (function (Hopscotch) {
        Hopscotch.width = function () {
            return Math.min(360, window.innerWidth / 2.5);
        };
    })(Hopscotch = Qna.Hopscotch || (Qna.Hopscotch = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var HomeController = /** @class */ (function () {
            function HomeController($http, $mdToast, session, $state) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.$state = $state;
                this.$onInit = function () { };
                this.code = "";
                this.password = "";
            }
            HomeController.prototype.login = function (code, password) {
                var _this = this;
                var dto = {
                    username: code,
                    password: password
                };
                this.$http.post("/login", dto).then(function (result) {
                    _this.session.setToken(result.headers("Authorization"));
                    if (_this.session.isCandidate()) {
                        _this.$state.go("root.candidate.dashboard", {}, {
                            reload: true
                        });
                    }
                    else if (_this.session.isCompany()) {
                        _this.$state.go("root.company.dashboard", {}, {
                            reload: true
                        });
                    }
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Login Failed")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            HomeController.prototype.checkIfCompany = function (code) {
                var _this = this;
                var dto = {
                    username: code
                };
                this.$http.post("/me/is-employee", dto).then(function (result) {
                    _this.isCompanyEmployee = result.data.companyEmployee;
                    if (!_this.isCompanyEmployee) {
                        _this.password = "";
                    }
                    else {
                        _this.password = "";
                    }
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            HomeController.$inject = ["$http", "$mdToast", "SessionService", "$state"];
            return HomeController;
        }());
        app.controller("candidate.HomeController", HomeController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var DashboardController = /** @class */ (function () {
            function DashboardController($http, $mdToast, $state, $mdDialog, $window, $scope, $timeout, SessionService, candidateInvitationsService, recordingsService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$window = $window;
                this.$scope = $scope;
                this.$timeout = $timeout;
                this.SessionService = SessionService;
                this.candidateInvitationsService = candidateInvitationsService;
                this.recordingsService = recordingsService;
                this.radioData = [
                    { label: 'Retake the whole interview from the start', value: 'Reattempt' },
                    { label: 'Retake only questions with issues', value: 'Continuation' },
                ];
                this.interviewButtons = { videos: {}, documents: {}, setup: {}, practise: {}, interview: {}, retake: {}, retake_pending: {}, continue: {} };
                this.interviewButtonNames = ['videos', 'documents', 'setup', 'practise', 'interview'];
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var error_1;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.list()];
                            case 1:
                                _a.sent();
                                this.candidateName = this.interviews[0].candidate;
                                return [3 /*break*/, 3];
                            case 2:
                                error_1 = _a.sent();
                                Rollbar.error(error_1);
                                return [3 /*break*/, 3];
                            case 3:
                                this.interviewButtons = {
                                    videos: {
                                        label: 'Introduction Video',
                                        icon: 'video_library',
                                        onclick: this.navigateToIntroductionVideoPage,
                                        clickable: true,
                                        completed: this.checkFakeTrueCompletion,
                                        locked: this.isVideosButtonLocked
                                    },
                                    setup: {
                                        label: 'System Check',
                                        icon: 'settings',
                                        onclick: this.navigateSystemCheckPage,
                                        clickable: true,
                                        completed: this.isSetupCompleted,
                                        locked: this.isSetupButtonLocked
                                    },
                                    practise: {
                                        label: 'Practice Session',
                                        icon: 'video_call',
                                        onclick: this.navigatePractiseSession,
                                        clickable: true,
                                        completed: this.isPractiseCompleted,
                                        locked: this.isPractiseButtonLocked
                                    },
                                    documents: {
                                        label: 'Upload Documents',
                                        icon: 'insert_drive_file',
                                        onclick: this.navigateToDocumentsPage,
                                        clickable: true,
                                        completed: this.isDocumentsCompleted,
                                        locked: this.isDocumentsButtonLocked
                                    },
                                    interview: {
                                        label: 'Start Interview',
                                        icon: 'videocam',
                                        onclick: this.goToInterview,
                                        clickable: this.isInterviewCompleted,
                                        completed: this.isInterviewCompleted,
                                        locked: this.isInterviewButtonLocked
                                    },
                                    retake: {
                                        label: 'Request Reattempt',
                                        icon: 'contact_mail',
                                        onclick: this.requestReattempt,
                                        completed: this.checkFakeTrueCompletion,
                                        clickable: true
                                    },
                                    retake_pending: {
                                        label: 'Pending',
                                        icon: 'access_alarm',
                                        completed: this.checkFakeFalseCompletion,
                                        clickable: false
                                    },
                                    continue: {
                                        label: 'Continue Interview',
                                        icon: 'videocam',
                                        onclick: this.goToInterview,
                                        clickable: true,
                                        completed: this.checkFakeTrueCompletion,
                                        locked: this.isInterviewButtonLocked
                                    }
                                };
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.navigateToIntroductionVideoPage = function (interview) { return _this.$state.go('root.candidate.company-intro', { interviewId: interview.guid, interview: interview, video: "intro" }); };
                this.navigateToDocumentsPage = function (interview) { return _this.$state.go('root.candidate.documents', { interviewid: interview.guid }); };
                this.navigateSystemCheckPage = function (interview) { return _this.$state.go('root.candidate.bandwidth', { interviewid: interview.guid }); };
                this.navigatePractiseSession = function (interview) { return _this.$state.go('root.candidate.practise', { interviewId: interview.guid }); };
                this.goToInterview = function (interview) {
                    _this.$mdDialog
                        .show({
                        controller: DashboardController,
                        controllerAs: "dashboard",
                        bindToController: true,
                        templateUrl: "views/candidate/dialogs/start-interview.html",
                        locals: { interviewId: interview.guid },
                        parent: angular.element(document.body),
                        clickOutsideToClose: true,
                        escapeToClose: true
                    });
                };
                this.list = function () { return __awaiter(_this, void 0, void 0, function () {
                    var interviews, _i, interviews_1, interview;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.candidateInvitationsService.getInvitations()];
                            case 1:
                                interviews = _a.sent();
                                for (_i = 0, interviews_1 = interviews; _i < interviews_1.length; _i++) {
                                    interview = interviews_1[_i];
                                    interview.successfullyRecorded = interview.completed;
                                    interview.hasMoreAttempts = this.interviewHasMoreAttempts(interview);
                                }
                                this.interviews = interviews;
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.navigateToInterview = function (interviewId) {
                    _this.$mdDialog.cancel();
                    _this.$state.go('root.candidate.interview', { interviewId: interviewId });
                };
                this.requestReattempt = function (interview) {
                    _this.$mdDialog
                        .show({
                        controller: DashboardController,
                        controllerAs: "dashboard",
                        bindToController: true,
                        templateUrl: "views/candidate/dialogs/request-reattempt.html",
                        locals: { interviewId: interview.guid, },
                        parent: angular.element(document.body),
                        clickOutsideToClose: true,
                        escapeToClose: true
                    });
                };
                this.requestRetake = function (interviewId, reason, type) { return __awaiter(_this, void 0, void 0, function () {
                    var error_2;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                this.$mdDialog.cancel();
                                return [4 /*yield*/, this.candidateInvitationsService.requestAttempt(interviewId, reason, type)];
                            case 1:
                                _a.sent();
                                this.showToastMessage('Successfully requested reattempt');
                                this.$state.reload();
                                return [3 /*break*/, 3];
                            case 2:
                                error_2 = _a.sent();
                                this.showToastMessage('There was an issue trying to request a reattempt');
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.rejectInvitation = function (interviewId) { return __awaiter(_this, void 0, void 0, function () {
                    var request;
                    var _this = this;
                    return __generator(this, function (_a) {
                        request = this.$mdDialog
                            .confirm()
                            .title("Please Confirm!")
                            .textContent("Are you sure you wish to reject this interview?")
                            .ok("Yes, Reject")
                            .cancel("No")
                            .theme("confirmdialog");
                        this.$mdDialog.show(request).then(function () { return __awaiter(_this, void 0, void 0, function () {
                            var error_3;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        console.log("Reject Interview: " + interviewId);
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        this.$mdDialog.cancel();
                                        return [4 /*yield*/, this.candidateInvitationsService.rejectInterview(interviewId)];
                                    case 2:
                                        _a.sent();
                                        this.showToastMessage('Successfully rejected interview');
                                        this.$state.reload();
                                        return [3 /*break*/, 4];
                                    case 3:
                                        error_3 = _a.sent();
                                        this.showToastMessage('There was an issue trying to reject the interview');
                                        return [3 /*break*/, 4];
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); }, function () { });
                        return [2 /*return*/];
                    });
                }); };
                this.rejectInvitationOld = function (interviewId) { return __awaiter(_this, void 0, void 0, function () {
                    var error_4;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                console.log("Reject Interview: " + interviewId);
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                this.$mdDialog.cancel();
                                return [4 /*yield*/, this.candidateInvitationsService.rejectInterview(interviewId)];
                            case 2:
                                _a.sent();
                                this.showToastMessage('Successfully rejected interview');
                                this.$state.reload();
                                return [3 /*break*/, 4];
                            case 3:
                                error_4 = _a.sent();
                                this.showToastMessage('There was an issue trying to reject the interview');
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); };
                this.interviewHasMoreAttempts = function (interview) { return interview.attemptsAllowed > interview.attemptsTaken; };
                /* isUndergraduateInterview = (interview: IInterview) => interview.interviewType === InterviewTypes.UNDERGRADUATE;
                getInterviewNameText = (interview: IInterview) => interview.interviewType === InterviewTypes.UNDERGRADUATE ?
                    'Undergraduate Admissions Interview' : `${interview.role}` */
                this.getInterviewNameText = function (interview) { return "" + interview.role; };
                this.getInterviewButtons = function (interview) {
                    var buttonFilter = function (button) { return false; };
                    var interviewButtons;
                    var documentUploadButton = interview.allowDocumentUpload ? "x_documents" : "documents";
                    buttonFilter = (function (button) { return button !== 'interview' && button !== 'retake_pending' && button !== 'continue' && button !== documentUploadButton; });
                    if (interview.attemptsTaken < interview.attemptsAllowed && !interview.hasAttemptedButNotCompletedRecording) {
                        console.log("Show Start Interview");
                        buttonFilter = (function (button) { return button !== 'retake' && button !== 'retake_pending' && button !== 'continue' && button !== documentUploadButton; });
                    }
                    if (interview.pendingReattemptRequest) {
                        console.log("Show Pending Reattempt");
                        buttonFilter = (function (button) { return button !== 'interview' && button !== 'retake' && button !== 'continue' && button !== documentUploadButton; });
                    }
                    if (interview.hasAttemptedButNotCompletedRecording && interview.attemptsAllowed > interview.attemptsTaken) {
                        console.log("Show Continue");
                        buttonFilter = (function (button) { return button !== 'interview' && button !== 'retake' && button !== 'retake_pending' && button !== documentUploadButton; });
                    }
                    /*buttonFilter =
                        interview.attemptsAllowed >= interview.attemptsTaken && !interview.hasAttemptedButNotCompletedRecording ?
                            (button => button !== 'retake' && button !== 'retake_pending' && button !== 'continue' && button !== documentUploadButton) :
                        interview.pendingReattemptRequest ?
                            (button => button !== 'interview' && button !== 'retake' && button !== 'continue' && button !== documentUploadButton) :
                        interview.hasAttemptedButNotCompletedRecording  && !interview.attemptsAllowed > interview.attemptsTaken ?
                            (button => button !== 'interview' && button !== 'retake' && button !== 'retake_pending' && button !== documentUploadButton) :
                        (button => button !== 'interview' && button !== 'retake_pending' && button !== 'continue' && button !== documentUploadButton);
                    */
                    return Object.keys(_this.interviewButtons).filter(buttonFilter).map(function (button) { return _this.interviewButtons[button]; });
                };
                /*getInterviewButtons = interview => {
                    let buttonFilter = (button: any): boolean => false;
                    let interviewButtons: any;
                    buttonFilter = interview.attemptsAllowed > interview.attemptsTaken ?
                        (button => button !== 'retake' && button !== 'retake_pending') :
                        interview.pendingReattemptRequest ?
                            (button => button !== 'interview' && button !== 'retake') :
                            (button => button !== 'interview' && button !== 'retake_pending');
        
                    return Object.keys(this.interviewButtons).filter(buttonFilter).map(button => this.interviewButtons[button])
                }*/
                this.isVideosButtonLocked = function (interview) {
                    return interview.pendingReattemptRequest ||
                        interview.attemptsAllowed === interview.attemptsTaken;
                };
                this.isDocumentsButtonLocked = function (interview) {
                    return !interview.hasWatchedVideo ||
                        interview.pendingReattemptRequest ||
                        interview.attemptsAllowed === interview.attemptsTaken;
                };
                this.isSetupButtonLocked = function (interview) {
                    return !interview.hasWatchedVideo ||
                        interview.pendingReattemptRequest ||
                        interview.attemptsAllowed === interview.attemptsTaken;
                };
                this.isPractiseButtonLocked = function (interview) {
                    return !interview.hasWatchedVideo ||
                        interview.pendingReattemptRequest ||
                        interview.attemptsAllowed === interview.attemptsTaken;
                };
                this.isInterviewButtonLocked = function (interview) {
                    return !interview.hasWatchedVideo ||
                        !interview.hasCompletedSetup ||
                        !interview.hasCompletedPractice || interview.pendingReattemptRequest;
                };
                this.isVideosCompleted = function (interview) { return interview.hasWatchedVideo; };
                this.isDocumentsCompleted = function (interview) { return interview.hasUploadedDocuments; };
                this.isSetupCompleted = function (interview) { return interview.hasCompletedSetup; };
                this.isPractiseCompleted = function (interview) { return interview.hasCompletedPractice; };
                this.isInterviewCompleted = function (interview) { return _this.isPractiseCompleted(interview); };
                this.checkFakeTrueCompletion = function (interview) { return true; };
                this.checkFakeFalseCompletion = function (interview) { return false; };
                this.requestAttempt = function (interview) {
                    if (!interview.pendingReattemptRequest) {
                        var request = _this.$mdDialog
                            .confirm()
                            .title("Would you like to retake the interview?")
                            .textContent("A request will be sent to the Interviewer for approval and if accepted you will receive a new invitation via email shortly.")
                            .ok("Send Request")
                            .cancel("Cancel")
                            .theme("confirmdialog");
                        _this.$mdDialog.show(request).then(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                            return [2 /*return*/];
                        }); }); }, function () { });
                    }
                };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(message)
                        .hideDelay(10000)
                        .theme("toasttheme"));
                };
                this.timeZone = new Date().toLocaleString("en", { timeZoneName: "short" }).split(" ").pop();
                if (this.getChromeVersion() === 49)
                    this.$state.go("root.system-requirements", {}, { reload: false });
                if (is.ie() || is.edge() || navigator.userAgent.match(/SamsungBrowser/i) || navigator.userAgent.match(/UC\s?Browser|UCWEB/i)) {
                    Rollbar.info("Candidate Failed Browser Requirements");
                    this.$state.go("root.system-requirements", {}, { reload: false });
                }
                var ua = navigator.userAgent || navigator.vendor;
                if (!(OT.checkSystemRequirements() === 1 ||
                    (Modernizr.getusermedia && Modernizr.datachannel && Modernizr.peerconnection) ||
                    is.chrome() || is.firefox() || is.safari() || is.opera() || ua.indexOf("FBAN") !== -1 ||
                    ua.indexOf("FBAV") !== -1)) {
                    Rollbar.info("Candidate Failed Browser Requirements");
                    this.$state.go("root.system-requirements", {}, { reload: false });
                }
                Rollbar.info("Candidate is on Dashboard");
                this.interviewPath = this.$window.MediaRecorder != null ? 'root.candidate.interviewrecording' : 'root.candidate.interview';
            }
            DashboardController.prototype.goToEssayInterview = function (invitation) {
                var _this = this;
                var request = this.$mdDialog
                    .confirm()
                    .title("Please note")
                    .textContent("Please close all other open tabs in your browser and do not click back/refresh button or close the browser during the interview.You will get only one attempt")
                    .ok("Start Assessment")
                    .cancel("Go Back")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$state.go("root.candidate.interviewessay", { invitationGuid: invitation.guid }, { reload: false });
                }, function () { });
            };
            DashboardController.prototype.getChromeVersion = function () {
                var raw = navigator.userAgent.match(/Chrom(e|ium)\/([0-9]+)\./);
                return raw ? parseInt(raw[2], 10) : false;
            };
            DashboardController.prototype.activateJoinInterview = function (interview) {
                var today = new Date();
                var diffMs = interview.fromUTCDateTime - today.getTime(); // milliseconds between now & Christmas
                var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);
                var endTimeinMS = interview.fromUTCDateTime + ((interview.duration + 20) * 60 * 1000);
                var differenceInEndTimeAndNow = endTimeinMS - today.getTime();
                var fromDate = new Date(interview.fromUTCDateTime);
                if (fromDate.getFullYear() == today.getFullYear() &&
                    fromDate.getMonth() == today.getMonth() &&
                    fromDate.getDate() == today.getDate())
                    return diffMins <= 15 && differenceInEndTimeAndNow >= 0;
                return false;
            };
            DashboardController.prototype.updateDom = function () { if (!this.$scope.$$phase)
                this.$scope.$apply(); };
            DashboardController.prototype.uploadResume = function (event) {
                var _this = this;
                var invitationId = $(event.target).data("invitation-id");
                var file = event.target.files[0];
                var fileReader = new FileReader();
                fileReader.onloadend = function (ev) {
                    var formData = new FormData();
                    formData.append("file", file);
                    _this.$http.post("/candidates/invitation/upload-cv/" + invitationId, formData, {
                        transformRequest: angular.identity,
                        headers: { "Content-Type": undefined }
                    }).then(function (result) { return _this.showToastMessage('Resume uploaded successfully'); }, function (error) {
                        _this.showToastMessage("Resume upload failed. The error was: " + error.message);
                        Rollbar.error(error);
                    });
                };
                fileReader.readAsDataURL(file);
            };
            DashboardController.$inject = [
                "$http",
                "$mdToast",
                "$state",
                "$mdDialog",
                "$window",
                "$scope",
                "$timeout",
                "SessionService",
                "candidate.invitationsService",
                "candidate.recordingsService"
            ];
            return DashboardController;
        }());
        app.controller("candidate.DashboardController", DashboardController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var InterviewController = /** @class */ (function () {
            function InterviewController($http, $mdToast, $scope, $q, $window, $state, $stateParams, $interval, isAttemptAllowed) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.$q = $q;
                this.$window = $window;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$interval = $interval;
                this.isAttemptAllowed = isAttemptAllowed;
                this.$onInit = function () { };
                this.disableNextButton = true;
                var query = Modernizr.mq('(max-width: 600px)');
                if (query) {
                    $("#root-bar").hide();
                    $("#interview-container").height(window.innerHeight);
                }
                else {
                    $("#interview-container").height(window.innerHeight - 96);
                }
                this.timerTheme = 'default';
                this.styleCountdownDisplay();
                //  this.bingClientTTS = new BingSpeech.TTSClient("b41fe46b58be4e3d8e74a43f38f7d135",BingSpeech.SupportedLocales.enGB_Female);
                this.invitationGuid = $stateParams.invitationGuid;
                this.answers = [];
                this.startTime = undefined;
                this.nextButtonText = "Next Question";
                this.currentQuestion = 0;
                $window.addEventListener("resize", function () {
                    if (_this.publisher) {
                        // this.publisher.element.style.height = (window.innerHeight - 96) + "";
                        _this.publisher.element.style.width = "100%";
                    }
                    _this.styleCountdownDisplay();
                });
                this.isPublisherInitialized = $q.defer();
                this.canUserPublish = $q.defer();
                this.recordingStarted = $q.defer();
                $http.post("/candidates/recording/session-and-token/" + this.invitationGuid, {}).then(function (result) {
                    _this.recordingGuid = result.data.recordingGuid;
                    if (OT.checkSystemRequirements() == 1) {
                        _this.publisher = OT.initPublisher(null, { width: '100%', height: 0, insertMode: 'append', insertDefaultUI: false }, function (error) {
                            if (error) {
                                _this.$mdToast.show(_this.$mdToast.simple()
                                    .textContent(error.name + " " + error.message)
                                    .hideDelay(10000)
                                    .theme("toasttheme"));
                                Rollbar.log("Error connecting: ", error.name, error.message);
                                _this.isPublisherInitialized.reject();
                            }
                            else {
                                // $mdToast.showSimple("Publisher initialized");
                                Rollbar.log("Publisher initialized");
                                _this.isPublisherInitialized.resolve();
                            }
                        });
                        _this.publisher.on({
                            accessAllowed: function (event) {
                                // $mdToast.showSimple('Thank you for allowing access to your camera and microphone.');
                                Rollbar.log('Thank you for allowing access to your camera and microphone.');
                            },
                            accessDenied: function (event) {
                                _this.$mdToast.show(_this.$mdToast.simple()
                                    .textContent('Please allow us access to your camera and microphone before the recording begins')
                                    .hideDelay(10000)
                                    .theme("toasttheme"));
                                Rollbar.log('Please allow us access to your camera and microphone before the recording begins.');
                            },
                            accessDialogOpened: function (event) {
                                _this.$mdToast.show(_this.$mdToast.simple()
                                    .textContent("Use your browser's popup to grant us access to your camera and microphone")
                                    .hideDelay(10000)
                                    .theme("toasttheme"));
                                Rollbar.log("Use your browser's popup to grant us access to your camera and microphone");
                            },
                            videoElementCreated: function (event) {
                                var videoElement = event.element;
                                $("#publisher-element").append(videoElement);
                            }
                        });
                        _this.session = OT.initSession(result.data.apiKey, result.data.sessionId);
                        if (_this.session) {
                            // $mdToast.showSimple("Session Initialized. Token acquired.");
                            Rollbar.log("Session Initialized. Token acquired.");
                            _this.session.on({
                                sessionReconnecting: function (event) {
                                    if (event.connection.connectionId != _this.session.connection.connectionId) {
                                        $mdToast.showSimple('Another client connected.');
                                        Rollbar.log('Another client connected.');
                                    }
                                    else {
                                        $mdToast.showSimple('Reconnecting to session.');
                                        Rollbar.log('Reconnecting to session.');
                                    }
                                },
                                sessionReconnected: function (event) {
                                    $mdToast.showSimple('Reconnected to session.');
                                    Rollbar.log('Reconnected to session.');
                                },
                                sessionDisconnected: function (event) {
                                    _this.$mdToast.show(_this.$mdToast.simple()
                                        .textContent("Interview Ended")
                                        .hideDelay(10000)
                                        .theme("toasttheme"));
                                    Rollbar.log('A client disconnected.');
                                },
                                connectionCreated: function (event) {
                                    // $mdToast.showSimple('Connection created.');
                                    Rollbar.log('Connection created.');
                                },
                                connectionDestroyed: function (event) {
                                    $mdToast.showSimple('Connection destroyed.');
                                    Rollbar.log('Connection destroyed.');
                                }
                            });
                            _this.session.connect(result.data.token, function (error) {
                                if (error) {
                                    $mdToast.showSimple(error.name + " " + error.message);
                                    Rollbar.log("Error connecting: ", error.name, error.message);
                                }
                                else {
                                    // $mdToast.showSimple("Connected to the session");
                                    Rollbar.log("Connected to the session");
                                    if (_this.session.capabilities.publish === 1) {
                                        // $mdToast.showSimple("User can publish.");
                                        Rollbar.log("User can publish");
                                        _this.canUserPublish.resolve();
                                    }
                                    else {
                                        $mdToast.showSimple("User cannot publish.");
                                        Rollbar.log("User cannot publish");
                                        _this.canUserPublish.reject();
                                    }
                                }
                            });
                        }
                    }
                    else {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("This system does not satisfy the system requirements")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                        Rollbar.error("This system does not satisfy the system requirements");
                    }
                }, function (error) {
                    $mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
                $scope.$on("$destroy", function (event) {
                    if (_this.session)
                        _this.session.disconnect();
                    // this.session.unpublish(this.publisher);
                    if (_this.publisher)
                        _this.publisher.destroy();
                    _this.canUserPublish.reject();
                    _this.isPublisherInitialized.reject();
                    _this.session = undefined;
                    _this.publisher = undefined;
                });
                this.isPublisherInitialized.promise.then(function (_a) {
                    _this.canUserPublish.promise.then(function (_a) {
                        _this.session.publish(_this.publisher, function (error) {
                            if (error) {
                                $mdToast.showSimple("Stream cannot be published. See console for details.");
                                Rollbar.log(error);
                                _this.recordingStarted.reject();
                            }
                            else {
                                // $mdToast.showSimple("You are live! You are being recorded.");
                                Rollbar.log("You are live! You are being recorded.");
                                _this.setCountdownCoordinates();
                                _this.startTime = new Date();
                                _this.recordingStarted.resolve();
                            }
                        });
                    }, function (error) {
                        $mdToast.showSimple("Some error has happened. See console for details");
                        Rollbar.error(error);
                    });
                }, function (error) {
                    $mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
                this.recordingStarted.promise.then(function (_a) {
                    $http.put("/candidates/recording/register-attempt/" + _this.invitationGuid, {}).then(function (result) {
                        Rollbar.log("Attempt registered!");
                    }, function (error) {
                        Rollbar.error(error);
                    });
                    $http.get("/candidates/recording/all-questions/" + _this.invitationGuid).then(function (result) {
                        _this.questions = result.data;
                        angular.forEach(_this.questions, function (q, i) {
                            q.question = q.question + " (You have " + _this.secondsToWords(q.timeallowed) + " to answer)";
                        });
                        _this.currentQuestion = 0;
                        _this.answers = [{
                                questionGuid: _this.questions[0].guid,
                                start: 0,
                                end: _this.startTime.valueOf() + 2000 //placeholder value
                            }];
                        _this.startTimer(_this.startTime, _this.questions[0].timeallowed);
                    }, function (error) {
                        $mdToast.showSimple("Some error has happened. See console for details");
                        Rollbar.error(error);
                    });
                }, function (error) {
                    $mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            }
            InterviewController.prototype.nextQuestion = function () {
                var _this = this;
                var currentTime = new Date();
                var timeDiff = currentTime.valueOf() - this.startTime.valueOf();
                if (this.currentQuestion === this.questions.length - 2) {
                    this.nextButtonText = "End Interview";
                }
                if (this.currentQuestion === this.questions.length - 1) {
                    this.disableNextButton = true;
                    angular.element(document.querySelector('#next-button')).remove();
                    this.updateDom();
                    this.answers[this.currentQuestion].end = timeDiff;
                    this.session.disconnect();
                    this.session.unpublish(this.publisher);
                    this.publisher.destroy();
                    this.$http.post("/candidates/recording/answers/" + this.recordingGuid, this.answers).then(function (result) {
                        $("#root-bar").show();
                        _this.$state.go("root.candidate.goodbye", { recordingGuid: _this.recordingGuid }, {
                            reload: true
                        });
                    }, function (error) {
                        _this.$mdToast.showSimple(error.data.message);
                        Rollbar.error(error);
                    });
                }
                if (this.currentQuestion < this.questions.length - 1) {
                    this.disableNextButton = true;
                    this.updateDom();
                    this.answers[this.currentQuestion].end = timeDiff;
                    this.currentQuestion += 1;
                    this.answers.push({
                        questionGuid: this.questions[this.currentQuestion].guid,
                        start: timeDiff,
                        end: timeDiff + 10000 //placeholder value
                    });
                    this.startTimer(currentTime, this.questions[this.currentQuestion].timeallowed);
                }
            };
            InterviewController.prototype.startTimer = function (startTime, limit) {
                var _this = this;
                if (limit === void 0) { limit = 30; }
                this.timerTheme = "default";
                // this.bingClientTTS.synthesize(this.questions[this.currentQuestion].question);
                if (this.timer) {
                    this.percentageLeft = 0;
                    this.secondsLeftToAnswer = 0;
                    this.$interval.cancel(this.timer);
                }
                this.timer = this.$interval(function () {
                    var currentTime = new Date();
                    var timeSinceStart = ((currentTime.valueOf() - startTime.valueOf()) / 1000.0);
                    var timeRemaining = InterviewController.QUESTION_READING_TIME + limit - timeSinceStart;
                    var timeToAnswer = limit - timeSinceStart + InterviewController.QUESTION_READING_TIME;
                    if (timeRemaining <= 0) {
                        _this.$interval.cancel(_this.timer);
                        _this.nextQuestion();
                    }
                    else if (timeRemaining >= 0 && timeSinceStart > InterviewController.QUESTION_READING_TIME) {
                        _this.secondsLeftToAnswer = timeToAnswer;
                        _this.percentageLeft = 100 - Math.round(100.0 * (timeToAnswer / limit));
                    }
                    if (timeRemaining >= 0 && timeSinceStart <= InterviewController.QUESTION_READING_TIME) {
                        _this.timerTheme = "default";
                        _this.disableNextButton = true;
                        _this.updateDom();
                        _this.showCountdown = true;
                        _this.countdownValue = Math.round(InterviewController.QUESTION_READING_TIME - timeSinceStart);
                    }
                    else {
                        _this.disableNextButton = false;
                        _this.showCountdown = false;
                        _this.countdownValue = 0;
                    }
                    if (_this.secondsLeftToAnswer <= InterviewController.TIMEOUT_WARNING_TIME) {
                        _this.timerTheme = "timer";
                    }
                    else {
                        _this.timerTheme = "default";
                    }
                }, 1000);
            };
            InterviewController.prototype.styleCountdownDisplay = function () {
                $("#countdown").text(99);
                var widest = $("#countdown").height() > $("#countdown").width() ? $("#countdown").height() : $("#countdown").width();
                widest = widest * 1.1;
                $("#countdown").width(widest);
                $("#countdown").height(widest);
                $("#countdown").css("border-radius", widest / 2.0);
                $("#countdown").css("-moz-border-radius", widest / 2.0);
                $("#countdown").css("-webkit-border-radius", widest / 2.0);
                $("#countdown").css("line-height", 1.2);
                $("#countdown").text("");
                this.widest = widest;
            };
            InterviewController.prototype.setCountdownCoordinates = function () {
                var _this = this;
                this.isPublisherInitialized.promise.then(function () {
                    var publisherHeight = $("#publisher-element").height();
                    var publisherWidth = $("#publisher-element").width();
                    $("#countdown").css("top", (publisherHeight - _this.widest) / 2.0);
                    $("#countdown").css("left", (publisherWidth - _this.widest) / 2.0);
                });
            };
            InterviewController.prototype.secondsToWords = function (seconds) {
                var returnVal = '';
                if (seconds < 60) {
                    returnVal = seconds + " seconds";
                }
                else if (seconds == 60) {
                    returnVal = "1 minute";
                }
                else if (seconds % 60 == 0) {
                    return (seconds / 60) + " minutes";
                }
                else {
                    var minutes = Math.floor(seconds / 60);
                    var secondsRemainder = seconds % 60;
                    if (minutes == 1) {
                        returnVal = "1 minute " + secondsRemainder + " seconds";
                    }
                    else {
                        returnVal = minutes + " minutes " + secondsRemainder + " seconds";
                    }
                }
                return returnVal;
            };
            InterviewController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            InterviewController.prototype.secondsToMMSS = function (t) {
                if (isNaN(t)) {
                    return "00:00";
                }
                var minutes = Math.floor(t / 60.0);
                var seconds = Math.floor(t % 60);
                return ((minutes < 10 ? "0" : "") +
                    minutes +
                    ":" +
                    (seconds < 10 ? "0" : "") +
                    seconds);
            };
            InterviewController.QUESTION_READING_TIME = 6; //inorder to show all countdown values we increment the  number andrew requested
            InterviewController.TIMEOUT_WARNING_TIME = 10;
            InterviewController.$inject = ["$http", "$mdToast", "$scope", "$q", "$window", "$state", "$stateParams", "$interval", "isAttemptAllowed"];
            return InterviewController;
        }());
        app.controller("candidate.InterviewController", InterviewController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var InterviewRecordingController = /** @class */ (function () {
            function InterviewRecordingController($http, $mdToast, $scope, $q, $window, $state, $stateParams, $interval, isAttemptAllowed, $mdDialog, VideoService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.$q = $q;
                this.$window = $window;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$interval = $interval;
                this.isAttemptAllowed = isAttemptAllowed;
                this.$mdDialog = $mdDialog;
                this.VideoService = VideoService;
                this.$onInit = function () { };
                this.disableNextButton = true;
                this.updateDom();
                if (angular.isDefined($window.MediaRecorder)) {
                    this.isMediaRecorderSupported = true;
                }
                else {
                    this.isMediaRecorderSupported = false;
                }
                var query = Modernizr.mq('(max-width: 600px)');
                if (query) {
                    $("#root-bar").hide();
                    $("#interview-container").height(window.innerHeight);
                }
                else {
                    $("#interview-container").height(window.innerHeight - 96);
                }
                this.timerTheme = 'default';
                this.styleCountdownDisplay();
                this.video = document.getElementById("video");
                // this.bingClientTTS = new BingSpeech.TTSClient("b41fe46b58be4e3d8e74a43f38f7d135", BingSpeech.SupportedLocales.enGB_Female);
                this.invitationGuid = $stateParams.invitationGuid;
                this.answers = [];
                this.startTime = undefined;
                this.nextButtonText = "Next Question";
                this.currentQuestion = 0;
                this.isPublisherInitialized = $q.defer();
                this.canUserPublish = $q.defer();
                this.recordingStarted = $q.defer();
                $http.post("/candidates/recording/mediarecorder-session/" + this.invitationGuid, {}).then(function (result) {
                    _this.recordingGuid = result.data.recordingGuid;
                    if (_this.isMediaRecorderSupported) {
                        var mediaConstraints = {
                            video: true, audio: true
                        };
                        navigator.mediaDevices
                            .getUserMedia(mediaConstraints)
                            .then(_this.successCallback.bind(_this), _this.errorCallback.bind(_this));
                    }
                }, function (error) {
                    $mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            }
            InterviewRecordingController.prototype.processVideo = function (audioVideoWebMURL) {
                this.disableNextButton = true;
                this.updateDom();
                if (this.timer)
                    this.$interval.cancel(this.timer);
                var recordRTC = this.recordRTC;
                var recordedBlob = recordRTC.getBlob();
                var stream = this.stream;
                stream.getAudioTracks().forEach(function (track) { return track.stop(); });
                stream.getVideoTracks().forEach(function (track) { return track.stop(); });
                recordRTC.getDataURL(function (dataURL) { });
                var blob = this.recordRTC.getBlob();
                var file = new File([blob], this.recordingGuid + '.webm', {
                    type: 'video/webm'
                });
                this.VideoService.storeVideo(file);
                $("#root-bar").show();
                this.$state.go("root.candidate.uploading", { recordingGuid: this.recordingGuid, answers: this.answers });
            };
            InterviewRecordingController.prototype.nextQuestion = function () {
                var currentTime = new Date();
                var timeDiff = currentTime.valueOf() - this.startTime.valueOf();
                if (this.currentQuestion === this.questions.length - 1) {
                    this.disableNextButton = true;
                    this.video.hidden = true;
                    this.updateDom();
                    if (this.timer)
                        this.$interval.cancel(this.timer);
                    this.nextButtonText = "Please wait..";
                    this.answers[this.currentQuestion].end = timeDiff;
                    this.recordRTC.stopRecording((this.processVideo.bind(this)));
                }
                if (this.currentQuestion < this.questions.length - 1) {
                    this.disableNextButton = true;
                    this.updateDom();
                    if (this.timer)
                        this.$interval.cancel(this.timer);
                    if (this.currentQuestion === this.questions.length - 2) {
                        this.nextButtonText = "End Interview";
                    }
                    this.answers[this.currentQuestion].end = timeDiff;
                    this.currentQuestion += 1;
                    this.answers.push({
                        questionGuid: this.questions[this.currentQuestion].guid,
                        start: timeDiff,
                        end: timeDiff + 10000 //placeholder value
                    });
                    this.startTimer(currentTime, this.questions[this.currentQuestion].timeallowed, this.currentQuestion);
                }
            };
            InterviewRecordingController.prototype.startTimer = function (startTime, limit, questionNumber) {
                var _this = this;
                if (limit === void 0) { limit = 30; }
                this.timerTheme = "default";
                //  this.bingClientTTS.synthesize(this.questions[this.currentQuestion].question);
                if (this.timer) {
                    this.percentageLeft = 0;
                    this.secondsLeftToAnswer = 0;
                    this.$interval.cancel(this.timer);
                }
                this.timer = this.$interval(function () {
                    var currentTime = new Date();
                    var timeSinceStart = ((currentTime.valueOf() - startTime.valueOf()) / 1000.0);
                    var timeRemaining = InterviewRecordingController.QUESTION_READING_TIME + limit - timeSinceStart;
                    var timeToAnswer = limit - timeSinceStart + InterviewRecordingController.QUESTION_READING_TIME;
                    if (timeRemaining <= 0) {
                        _this.$interval.cancel(_this.timer);
                        //  this.recordRTC.pauseRecording();
                        _this.nextQuestion();
                    }
                    else if (timeRemaining >= 0 && timeSinceStart > InterviewRecordingController.QUESTION_READING_TIME) {
                        _this.secondsLeftToAnswer = timeToAnswer;
                        _this.percentageLeft = 100 - Math.round(100.0 * (timeToAnswer / limit));
                    }
                    if (timeRemaining >= 0 && timeSinceStart <= InterviewRecordingController.QUESTION_READING_TIME) {
                        _this.timerTheme = "default";
                        _this.disableNextButton = true;
                        _this.updateDom();
                        _this.showCountdown = true;
                        _this.countdownValue = Math.round(InterviewRecordingController.QUESTION_READING_TIME - timeSinceStart);
                    }
                    else {
                        _this.disableNextButton = false;
                        _this.updateDom();
                        _this.showCountdown = false;
                        _this.countdownValue = 0;
                    }
                    if (timeRemaining === InterviewRecordingController.QUESTION_READING_TIME) {
                        if (questionNumber === 0) { }
                        else {
                            //   this.recordRTC.resumeRecording();
                        }
                    }
                    if (_this.secondsLeftToAnswer <= InterviewRecordingController.TIMEOUT_WARNING_TIME) {
                        _this.timerTheme = "timer";
                    }
                    else {
                        _this.timerTheme = "default";
                    }
                }, 1000);
            };
            InterviewRecordingController.prototype.styleCountdownDisplay = function () {
                $("#countdown").text(99);
                var widest = $("#countdown").height() > $("#countdown").width() ? $("#countdown").height() : $("#countdown").width();
                widest = widest * 1.1;
                $("#countdown").width(widest);
                $("#countdown").height(widest);
                $("#countdown").css("border-radius", widest / 2.0);
                $("#countdown").css("-moz-border-radius", widest / 2.0);
                $("#countdown").css("-webkit-border-radius", widest / 2.0);
                $("#countdown").css("line-height", 1.2);
                $("#countdown").text("");
                this.widest = widest;
            };
            InterviewRecordingController.prototype.successCallback = function (stream) {
                var _this = this;
                this.setCountdownCoordinates();
                this.video.controls = false;
                this.startTime = new Date();
                var options = {
                    mimeType: 'video/webm\;codecs=vp8',
                    //   audioBitsPerSecond: 128000,
                    // videoBitsPerSecond: 128000,
                    bitsPerSecond: 256000 // if this line is provided, skip above two
                };
                this.stream = stream;
                this.recordRTC = RecordRTC(stream, options);
                this.recordRTC.startRecording();
                var video = this.video;
                try {
                    video.srcObject = stream;
                }
                catch (error) {
                    video.src = window.URL.createObjectURL(stream);
                }
                this.toggleControls();
                this.$http.put("/candidates/recording/register-attempt/" + this.invitationGuid, {}).then(function (result) {
                    console.debug("Attempt registered!");
                }, function (error) {
                    Rollbar.error(error);
                });
                this.$http.get("/candidates/recording/all-questions/" + this.invitationGuid).then(function (result) {
                    _this.questions = result.data;
                    angular.forEach(_this.questions, function (q, i) {
                        q.question = q.question + " (You have " + _this.secondsToWords(q.timeallowed) + " to answer)";
                    });
                    _this.currentQuestion = 0;
                    _this.answers = [{
                            questionGuid: _this.questions[0].guid,
                            start: 0,
                            end: _this.startTime.valueOf() + 2000 //placeholder value
                        }];
                    _this.startTimer(_this.startTime, _this.questions[0].timeallowed, _this.currentQuestion);
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            InterviewRecordingController.prototype.errorCallback = function (error) {
                //handle error here
                Rollbar.error(error);
            };
            InterviewRecordingController.prototype.setCountdownCoordinates = function () {
                var publisherHeight = $("#video").height();
                var publisherWidth = $("#video").width();
                $("#countdown").css("top", (publisherHeight - this.widest) / 2.0);
                $("#countdown").css("left", (publisherWidth - this.widest) / 2.0);
            };
            InterviewRecordingController.prototype.secondsToWords = function (seconds) {
                var returnVal = '';
                if (seconds < 60) {
                    returnVal = seconds + " seconds";
                }
                else if (seconds == 60) {
                    returnVal = "1 minute";
                }
                else if (seconds % 60 == 0) {
                    return (seconds / 60) + " minutes";
                }
                else {
                    var minutes = Math.floor(seconds / 60);
                    var secondsRemainder = seconds % 60;
                    if (minutes == 1) {
                        returnVal = "1 minute " + secondsRemainder + " seconds";
                    }
                    else {
                        returnVal = minutes + " minutes " + secondsRemainder + " seconds";
                    }
                }
                return returnVal;
            };
            InterviewRecordingController.prototype.toggleControls = function () {
                var video = this.video;
                video.muted = true;
                // video.controls = false;
                video.autoplay = true;
            };
            InterviewRecordingController.prototype.secondsToMMSS = function (t) {
                if (isNaN(t)) {
                    return "00:00";
                }
                var minutes = Math.floor(t / 60.0);
                var seconds = Math.floor(t % 60);
                return ((minutes < 10 ? "0" : "") +
                    minutes +
                    ":" +
                    (seconds < 10 ? "0" : "") +
                    seconds);
            };
            InterviewRecordingController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            InterviewRecordingController.QUESTION_READING_TIME = 6; //inorder to show all countdown values we increment the  number andrew requested
            InterviewRecordingController.TIMEOUT_WARNING_TIME = 10;
            InterviewRecordingController.$inject = ["$http", "$mdToast", "$scope", "$q", "$window", "$state", "$stateParams", "$interval", "isAttemptAllowed", "$mdDialog", "VideoService"];
            return InterviewRecordingController;
        }());
        app.controller("candidate.InterviewRecordingController", InterviewRecordingController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var SetupController = /** @class */ (function () {
            function SetupController($http, $mdToast, $scope, $q, $window, $state, $stateParams, $interval) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.$q = $q;
                this.$window = $window;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$interval = $interval;
                this.movingAvg = null;
                this.destroy = function () {
                    if (_this.session)
                        _this.session.disconnect();
                    if (_this.publisher)
                        _this.publisher.destroy();
                    _this.canUserPublish.reject();
                    _this.isPublisherInitialized.reject();
                    delete _this.session;
                    delete _this.publisher;
                    _this.$interval.cancel(_this.timer);
                };
                this.$onInit = function () { };
                $("#interview-container").height(window.innerHeight - 96);
                $("#volume").width(window.innerHeight - 387); // we set the width to height because it is rotated
                var right = Math.floor(-0.4 * (window.innerHeight - 387));
                $("#volume").css("right", right);
                this.timerTheme = "default";
                this.styleCountdownDisplay();
                this.interviewGuid = $stateParams.interviewid;
                this.answers = [];
                this.startTime = undefined;
                this.nextButtonText = "Next";
                this.currentQuestion = 0;
                $window.addEventListener("resize", function () {
                    if (_this.publisher) {
                        // this.publisher.element.style.height = (window.innerHeight - 96) + "";
                        _this.publisher.element.style.width = "100%";
                    }
                    $("#volume").width(window.innerHeight - 387); // we set the width to height because it is rotated
                    var right = Math.floor(-0.4 * (window.innerHeight - 387));
                    $("#volume").css("right", right);
                    _this.styleCountdownDisplay();
                });
                this.isPublisherInitialized = $q.defer();
                this.canUserPublish = $q.defer();
                this.recordingStarted = $q.defer();
                $http.post("/candidates/setup/session-and-token/" + this.interviewGuid, {}).then(function (result) {
                    _this.recordingGuid = result.data.recordingGuid;
                    if (OT.checkSystemRequirements() == 1) {
                        _this.publisher = OT.initPublisher(null, { width: '100%', height: 0, insertMode: 'append', insertDefaultUI: false }, function (error) {
                            if (error) {
                                _this.$mdToast.show(_this.$mdToast.simple()
                                    .textContent(error.name + " " + error.message)
                                    .hideDelay(10000)
                                    .theme("toasttheme"));
                                Rollbar.log("Error connecting: ", error.name, error.message);
                                _this.isPublisherInitialized.reject();
                            }
                            else {
                                // $mdToast.showSimple("Publisher initialized");
                                Rollbar.log("Publisher initialized");
                                _this.isPublisherInitialized.resolve();
                            }
                        });
                        _this.publisher.on({
                            accessAllowed: function (event) {
                                // $mdToast.showSimple('Thank you for allowing access to your camera and microphone.');
                                Rollbar.log('Thank you for allowing access to your camera and microphone.');
                            },
                            accessDenied: function (event) {
                                _this.$mdToast.show(_this.$mdToast.simple()
                                    .textContent('Please allow us access to your camera and microphone before the recording begins')
                                    .hideDelay(10000)
                                    .theme("toasttheme"));
                            },
                            accessDialogOpened: function (event) {
                                _this.$mdToast.show(_this.$mdToast.simple()
                                    .textContent("Use your browser's popup to grant us access to your camera and microphone")
                                    .hideDelay(10000)
                                    .theme("toasttheme"));
                                Rollbar.log("Use your browser's popup to grant us access to your camera and microphone");
                            },
                            audioLevelUpdated: function (event) {
                                if (_this.movingAvg === null || _this.movingAvg <= event.audioLevel) {
                                    _this.movingAvg = event.audioLevel;
                                }
                                else {
                                    _this.movingAvg = 0.7 * _this.movingAvg + 0.3 * event.audioLevel;
                                }
                                // 1.5 scaling to map the -30 - 0 dBm range to [0,1]
                                var _logLevel = (Math.log(_this.movingAvg) / Math.LN10) / 1.5 + 1;
                                _this.logLevel = (Math.min(Math.max(_logLevel, 0), 1) * 100.0);
                            },
                            videoElementCreated: function (event) {
                                var videoElement = event.element;
                                $("#publisher-element").append(videoElement);
                            }
                        });
                        _this.session = OT.initSession(result.data.apiKey, result.data.sessionId);
                        if (_this.session) {
                            // $mdToast.showSimple("Session Initialized. Token acquired.");
                            Rollbar.log("Session Initialized. Token acquired.");
                            _this.session.on({
                                sessionReconnecting: function (event) {
                                    if (event.connection.connectionId != _this.session.connection.connectionId) {
                                        $mdToast.showSimple('Another client connected.');
                                        Rollbar.log('Another client connected.');
                                    }
                                    else {
                                        $mdToast.showSimple('Reconnecting to session.');
                                        Rollbar.log('Reconnecting to session.');
                                    }
                                },
                                sessionReconnected: function (event) {
                                    $mdToast.showSimple('Reconnected to session.');
                                    Rollbar.log('Reconnected to session.');
                                },
                                sessionDisconnected: function (event) {
                                    $mdToast.showSimple('Setup completed. Feel free to run setup again');
                                    Rollbar.log('A client disconnected.');
                                },
                                connectionCreated: function (event) {
                                    // $mdToast.showSimple('Connection created.');
                                    Rollbar.log('Connection created.');
                                },
                                connectionDestroyed: function (event) {
                                    $mdToast.showSimple('Connection destroyed.');
                                    Rollbar.log('Connection destroyed.');
                                }
                            });
                            _this.session.connect(result.data.token, function (error) {
                                if (error) {
                                    $mdToast.showSimple(error.name + " " + error.message);
                                    Rollbar.log("Error connecting: ", error.name, error.message);
                                }
                                else {
                                    // $mdToast.showSimple("Connected to the session");
                                    Rollbar.log("Connected to the session");
                                    if (_this.session.capabilities.publish === 1) {
                                        // $mdToast.showSimple("User can publish.");
                                        Rollbar.log("User can publish");
                                        _this.canUserPublish.resolve();
                                    }
                                    else {
                                        $mdToast.showSimple("User cannot publish.");
                                        Rollbar.log("User cannot publish");
                                        _this.canUserPublish.reject();
                                    }
                                }
                            });
                        }
                    }
                    else {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("This system does not satisfy the system requirements")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                        Rollbar.error("This system does not satisfy the system requirements");
                    }
                }, function (error) {
                    $mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
                $scope.$on("$destroy", function (event) { return _this.destroy(); });
                this.isPublisherInitialized.promise.then(function (_a) {
                    _this.canUserPublish.promise.then(function (_a) {
                        _this.session.publish(_this.publisher, function (error) {
                            if (error) {
                                $mdToast.showSimple("Stream cannot be published. See console for details.");
                                Rollbar.log(error);
                                _this.recordingStarted.reject();
                            }
                            else {
                                // $mdToast.showSimple("You are in a practice session!");
                                Rollbar.log("You are setitng up!");
                                _this.setCountdownCoordinates();
                                _this.startTime = new Date();
                                _this.startTimer(_this.startTime, 30);
                                _this.recordingStarted.resolve();
                            }
                        });
                    }, function (error) {
                        $mdToast.showSimple("Some error has happened. See console for details");
                        Rollbar.error(error);
                    });
                }, function (error) {
                    $mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
                this.recordingStarted.promise.then(function (_a) {
                    $http.get("/candidates/setup/all-questions/" + _this.interviewGuid).then(function (result) {
                        // this.questions = result.data;
                        _this.questions = [
                            { guid: "00000000-0000-0000-0000-000000000000", question: "Please check your front facing camera. Are you able to see yourself below? Please make sure that your face is fully visible and centered at all times during the interview.", timeallowed: 30 },
                            { guid: "00000000-0000-0000-0000-000000000001", question: "Please see the volume bar on the right of the screen, and check if it moves when you speak", timeallowed: 30 },
                            { guid: "00000000-0000-0000-0000-000000000002", question: "Please check your background and lighting to\n" +
                                    "ensure that you have an optimum interview setting. It is recommended that\n" +
                                    "you have good lighting and a simple background for your interview.", timeallowed: 30 },
                            { guid: "00000000-0000-0000-0000-000000000003", question: "If you are ready, press the End Setup button to proceed to the next step.\nYou can do this system check as many times as you like.", timeallowed: 30 }
                        ];
                        _this.currentQuestion = 0;
                        _this.answers = [{
                                questionGuid: _this.questions[0].guid,
                                start: 0,
                                end: _this.startTime.valueOf() + 2000 //placeholder value
                            }];
                    }, function (error) {
                        $mdToast.showSimple("Some error has happened. See console for details");
                        Rollbar.error(error);
                    });
                }, function (error) {
                    $mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            }
            SetupController.prototype.setupNextQuestion = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var currentTime, timeDiff, error_5;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                currentTime = new Date();
                                timeDiff = currentTime.valueOf() - this.startTime.valueOf();
                                if (this.currentQuestion === this.questions.length - 2) {
                                    this.nextButtonText = "End Setup";
                                }
                                if (!(this.currentQuestion === this.questions.length - 1)) return [3 /*break*/, 6];
                                this.answers[this.currentQuestion].end = timeDiff;
                                if (this.session) {
                                    this.session.disconnect();
                                    this.session.unpublish(this.publisher);
                                }
                                if (this.publisher)
                                    this.publisher.destroy();
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 4, , 5]);
                                return [4 /*yield*/, this.$http.put("/candidates/invitation/completed-setup/" + this.interviewGuid, {})];
                            case 2:
                                _a.sent();
                                return [4 /*yield*/, this.$http.post("/candidates/setup/answers/" + this.recordingGuid, this.answers)];
                            case 3:
                                _a.sent();
                                this.destroy();
                                this.$state.go("root.candidate.dashboard");
                                return [3 /*break*/, 5];
                            case 4:
                                error_5 = _a.sent();
                                this.$mdToast.showSimple("Some error has happened. See console for details");
                                Rollbar.error(error_5);
                                return [3 /*break*/, 5];
                            case 5:
                                ;
                                _a.label = 6;
                            case 6:
                                if (this.currentQuestion < this.questions.length - 1) {
                                    this.answers[this.currentQuestion].end = timeDiff;
                                    this.currentQuestion += 1;
                                    this.answers.push({
                                        questionGuid: this.questions[this.currentQuestion].guid,
                                        start: timeDiff,
                                        end: timeDiff + 10000 //placeholder value
                                    });
                                    this.startTimer(currentTime, 30);
                                }
                                return [2 /*return*/];
                        }
                    });
                });
            };
            SetupController.prototype.startTimer = function (startTime, limit) {
                var _this = this;
                if (limit === void 0) { limit = 30; }
                this.timerTheme = "default";
                if (this.timer) {
                    this.percentageLeft = 0;
                    this.secondsLeftToAnswer = 0;
                    this.$interval.cancel(this.timer);
                }
                this.timer = this.$interval(function () {
                    var currentTime = new Date();
                    var timeSinceStart = ((currentTime.valueOf() - startTime.valueOf()) / 1000.0);
                    var timeRemaining = SetupController.QUESTION_READING_TIME + limit - timeSinceStart;
                    var timeToAnswer = limit - timeSinceStart + SetupController.QUESTION_READING_TIME;
                    if (timeRemaining <= 0) {
                        _this.$interval.cancel(_this.timer);
                        _this.setupNextQuestion();
                    }
                    else if (timeRemaining >= 0 && timeSinceStart > SetupController.QUESTION_READING_TIME) {
                        _this.secondsLeftToAnswer = timeToAnswer;
                        _this.percentageLeft = 100 - Math.round(100.0 * (timeToAnswer / limit));
                    }
                    if (timeRemaining >= 0 && timeSinceStart <= SetupController.QUESTION_READING_TIME) {
                        _this.timerTheme = "default";
                        _this.showCountdown = true;
                        _this.countdownValue = Math.round(SetupController.QUESTION_READING_TIME - timeSinceStart);
                    }
                    else {
                        _this.showCountdown = false;
                        _this.countdownValue = 0;
                    }
                    if (_this.secondsLeftToAnswer <= SetupController.TIMEOUT_WARNING_TIME) {
                        _this.timerTheme = "timer";
                    }
                    else {
                        _this.timerTheme = "default";
                    }
                }, 1000);
            };
            SetupController.prototype.styleCountdownDisplay = function () {
                $("#countdown").text(99);
                var widest = $("#countdown").height() > $("#countdown").width() ? $("#countdown").height() : $("#countdown").width();
                widest = widest * 1.1;
                // $("#countdown").attr("style", "width: " + widest + "px !important; height: " + widest + "px !important;");
                $("#countdown").width(widest);
                $("#countdown").height(widest);
                $("#countdown").css("border-radius", widest / 2.0);
                $("#countdown").css("-moz-border-radius", widest / 2.0);
                $("#countdown").css("-webkit-border-radius", widest / 2.0);
                $("#countdown").css("line-height", 1.2);
                $("#countdown").text("");
                this.widest = widest;
            };
            SetupController.prototype.setCountdownCoordinates = function () {
                var _this = this;
                this.isPublisherInitialized.promise.then(function () {
                    var publisherHeight = $("#publisher-element").height();
                    var publisherWidth = $("#publisher-element").width();
                    $("#countdown").css("top", (publisherHeight - _this.widest) / 2.0);
                    $("#countdown").css("left", (publisherWidth - _this.widest) / 2.0);
                });
            };
            SetupController.QUESTION_READING_TIME = 6; //inorder to show all countdown values we increment the  number andrew requested
            SetupController.TIMEOUT_WARNING_TIME = 10;
            SetupController.$inject = ["$http", "$mdToast", "$scope", "$q", "$window", "$state", "$stateParams", "$interval"];
            return SetupController;
        }());
        app.controller("candidate.SetupController", SetupController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var UploadController = /** @class */ (function () {
            function UploadController($http, $mdToast, $state, $mdDialog, $window, $stateParams, VideoService, $scope) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$window = $window;
                this.$stateParams = $stateParams;
                this.VideoService = VideoService;
                this.$scope = $scope;
                this.progress = 0;
                this.amazon = true;
                this.$onInit = function () { };
                this.message = "Uploading your Interview. Please do not close this window ";
                this.answers = $stateParams.answers;
                this.video = this.VideoService.getVideo();
                this.recordingGuid = $stateParams.recordingGuid;
                var path = "/candidates/recording/answers-video/";
                if (window.location.hostname === "app.5qlive.com") {
                    path = "https://upload.5qlive.com/candidates/recording/answers-video/";
                }
                else {
                    path = "/candidates/recording/answers-video/";
                }
                this.$http.get("/candidates/recording/upload-url/" + this.recordingGuid).then(function (result) {
                    _this.presignedURL = result.data.url;
                    var __this = _this;
                    _this.$http.put(_this.presignedURL, _this.video, {
                        transformRequest: angular.identity,
                        headers: {
                            'Content-Type': 'video/webm'
                        }, uploadEventHandlers: {
                            progress: function (e) {
                                if (e.lengthComputable) {
                                    __this.progress = (e.loaded / e.total) * 100;
                                    __this.updateDom();
                                }
                            }
                        }
                    }).then(function (result) {
                        _this.$http.post("/candidates/recording/success-bucket-upload/" + _this.recordingGuid, {}).then(function (result) {
                            _this.$http.post("/candidates/recording/answers-times/" + _this.recordingGuid, _this.answers).then(function (result) {
                                _this.$state.go("root.candidate.goodbye", { recordingGuid: _this.recordingGuid }, {
                                    reload: true
                                });
                            }, function (error) {
                                _this.$mdToast.showSimple("Some error has happened. We are notifying our Engineers");
                                Rollbar.error(error);
                            });
                        });
                    }, function (error) {
                        _this.message = "Trying to upload on alternate server. Please be patient and do not close this window or press Refresh";
                        _this.amazon = false;
                        _this.updateDom();
                        Rollbar.error(error);
                        var formData = new FormData();
                        var __this = _this;
                        _this.progress = 0;
                        formData.append('file', _this.video);
                        _this.$http.post(path + _this.recordingGuid, formData, {
                            transformRequest: angular.identity,
                            headers: {
                                'Content-Type': undefined
                            }, uploadEventHandlers: {
                                progress: function (e) {
                                    if (e.lengthComputable) {
                                        __this.progress = (e.loaded / e.total) * 100;
                                        __this.updateDom();
                                    }
                                }
                            }
                        }).then(function (result) {
                            _this.$http.post("/candidates/recording/answers-times/" + _this.recordingGuid, _this.answers).then(function (result) {
                                _this.$state.go("root.candidate.goodbye", { recordingGuid: _this.recordingGuid }, {
                                    reload: true
                                });
                            }, function (error) {
                                _this.$mdToast.showSimple("Some error has happened. We are notifying our Engineers");
                                Rollbar.error(error);
                            });
                        }, function (error) {
                            _this.$mdToast.showSimple("Some error has happened. We are notifying our Engineers");
                            Rollbar.error(error);
                        });
                        Rollbar.error(error);
                    });
                }, function (error) {
                    _this.amazon = false;
                    _this.updateDom();
                    _this.progress = 0;
                    var formData = new FormData();
                    var __this = _this;
                    formData.append('file', _this.video);
                    _this.$http.post(path + _this.recordingGuid, formData, {
                        transformRequest: angular.identity,
                        headers: {
                            'Content-Type': undefined
                        }, uploadEventHandlers: {
                            progress: function (e) {
                                if (e.lengthComputable) {
                                    __this.progress = (e.loaded / e.total) * 100;
                                    __this.updateDom();
                                }
                            }
                        }
                    }).then(function (result) {
                        _this.$http.post("/candidates/recording/answers-times/" + _this.recordingGuid, _this.answers).then(function (result) {
                            _this.$state.go("root.candidate.goodbye", { recordingGuid: _this.recordingGuid }, {
                                reload: true
                            });
                        }, function (error) {
                            _this.$mdToast.showSimple("Some error has happened. We are notifying our Engineers");
                            Rollbar.error(error);
                        });
                    }, function (error) {
                        _this.$mdToast.showSimple("Some error has happened. We are notifying our Engineers");
                        Rollbar.error(error);
                    });
                });
            }
            UploadController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            UploadController.$inject = ["$http", "$mdToast", "$state", "$mdDialog", "$window", "$stateParams", "VideoService", "$scope"];
            return UploadController;
        }());
        app.controller("candidate.UploadController", UploadController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var GoodbyeController = /** @class */ (function () {
            function GoodbyeController($http, $mdToast, $stateParams, $state, SessionService, $mdDialog, $location, $window) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$location = $location;
                this.$window = $window;
                this.SURVEY_QUESTIONS = Qna.SURVEY_QUESTIONS;
                this.stars = [0, 0, 0];
                this.completionStatus = false;
                this.completionResult = "Failed";
                this.getStarsClass = function (questionIndex, stars) {
                    var result = 'material-icons star no-highlight';
                    result += _this.stars[questionIndex] < stars ? ' disabled' : ' enabled';
                    return result;
                };
                this.checkStars = function (questionIndex, stars) { return _this.stars[questionIndex] = stars; };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position("top left")
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.$onInit = function () { };
                this.invitationId = this.$stateParams.invitationId;
                //Add success here
                //this.completeRecording();
                if (Rollbar) {
                    Rollbar.info("Candidate is on goodbye page");
                }
            }
            GoodbyeController.prototype.completeRecording = function () {
                var _this = this;
                this.$http.put("/candidates/recording/mark-completion/" + this.invitationId, {}).then(function (result) {
                    _this.completionStatus = result.data.completionStatus;
                    _this.completionResult = result.data.result;
                    _this.$mdToast.showSimple("Your interview recording status: " + _this.completionResult);
                    _this.$state.go("root.candidate.dashboard", {}, { reload: true });
                }, function (error) {
                    _this.$mdToast.showSimple("There was an issue with completion of the recording. Please try again");
                    Rollbar.error(error);
                });
            };
            GoodbyeController.prototype.submit = function () {
                var _this = this;
                var feedbackDTO = {
                    q1Response: this.stars[0],
                    q2Response: this.stars[1],
                    q3Response: this.stars[2],
                    feedbackText: this.feedback
                };
                this.$http.post("/candidates/recording/feedback/" + this.invitationId, feedbackDTO)
                    .then(function (response) {
                    return _this.completeRecording();
                }
                //this.$state.go("root.candidate.dashboard", {}, <ng.ui.IStateOptions>{reload: true})
                )
                    .catch(function () {
                    _this.showToastMessage("There was an issue storing your feedback. Please try again later");
                });
            };
            GoodbyeController.$inject = ["$http", "$mdToast", "$stateParams", "$state", "SessionService", "$mdDialog", "$location", "$window"];
            return GoodbyeController;
        }());
        app.controller("candidate.GoodbyeController", GoodbyeController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var HomeController = /** @class */ (function () {
            function HomeController($http, $mdToast, session, $state, $mdDialog, $stateParams) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$stateParams = $stateParams;
                this.password = '';
                this.$onInit = function () { };
                Rollbar.info("User is on the company login page");
            }
            HomeController.prototype.sendResetLink = function () {
                var _this = this;
                var frDTO = { userNameOrEmail: this.userNameOrEmail.toLowerCase() };
                this.$http.post("/company/password/forgot-password", frDTO).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("A link has been sent your email")
                        .hideDelay(10000)
                        .position('top left')
                        .theme("toasttheme"));
                    _this.$mdDialog.hide();
                    _this.userNameOrEmail = "";
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Request failed. Please try again")
                        .hideDelay(10000)
                        .position('top left')
                        .theme("toasttheme"));
                    _this.userNameOrEmail = "";
                    //this.$mdDialog.hide();
                });
            };
            HomeController.prototype.forgotPassword = function () {
                this.passwordDialog = this.$mdDialog.show({
                    controller: HomeController,
                    controllerAs: "home",
                    bindToController: true,
                    templateUrl: 'views/company/dialogs/forgot-password.html',
                    parent: angular.element(document.body),
                    // locals: { openInviteLink: this.openInviteLink },
                    clickOutsideToClose: true,
                    escapeToClose: true
                    // Only for -xs, -sm breakpoints.
                }).then(function () {
                    console.debug("You clicked the button to close the bottom sheet");
                })
                    .catch(function () {
                    console.debug("You clicked cancel button");
                });
            };
            HomeController.prototype.login = function (code, password) {
                var _this = this;
                if (code.indexOf('@') != -1) {
                    code = code.toLowerCase();
                }
                var dto = {
                    username: code,
                    password: password
                };
                this.$http.post("/login", dto).then(function (result) {
                    _this.session.setToken(result.headers("Authorization"));
                    if (_this.session.isCompany()) {
                        if (_this.$stateParams.recordingid == null || !angular.isDefined(_this.$stateParams.recordingid)) {
                            _this.checkSubscriptionStatus().then(function (result) {
                                _this.session.setPlan(result.data);
                            }, function (error) {
                                Rollbar.error(error);
                            });
                            if (_this.session.blocked()) {
                                _this.$state.go("root.company.blocked", {}, {
                                    reload: true
                                });
                            }
                            var url = "root.company.login";
                            if (_this.session.isRoleSuperAdmin() || _this.session.isRoleAdmin()) {
                                url = 'root.company.dashboard';
                                //url = 'root.company.reviewerdashboard';
                            }
                            else if (_this.session.isRoleReviewer() && !_this.session.isRoleSuperAdmin() && !_this.session.isRoleAdmin()) {
                                url = 'root.company.reviewerdashboard';
                            }
                            console.log(url);
                            _this.$state.go(url, {}, {
                                reload: true
                            });
                        }
                        else {
                            _this.$http.get("/company/recordings//by-recording/" + _this.$stateParams.recordingid)
                                .then(function (result) {
                                var recordings = [];
                                recordings.push(result.data);
                                _this.$state.go("root.company.player", { recording: result.data, interviewId: result.data.interviewId, recordings: recordings });
                            }, function (error) {
                                _this.$state.go("root.company.dashboard", {}, {
                                    reload: true
                                });
                            });
                        }
                    }
                    else if (_this.session.isCandidate()) {
                        _this.$state.go("root.candidate.dashboard", {}, {
                            reload: true
                        });
                    }
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent(error.data.message)
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            HomeController.prototype.checkSubscriptionStatus = function () {
                return this.$http.get("/company/subscriptions/check-status");
            };
            HomeController.$inject = ["$http", "$mdToast", "SessionService", "$state", "$mdDialog", "$stateParams"];
            return HomeController;
        }());
        app.controller("company.HomeController", HomeController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var CompleteProfileController = /** @class */ (function () {
            function CompleteProfileController($http, $mdToast, $state, $stateParams, $scope, SessionService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$onInit = function () { };
                this.fileElement = document.getElementById("file");
                this.fileReader = new FileReader();
                this.fileElement.onchange = function (ev) {
                    _this.file = _this.fileElement.files[0];
                    _this.fileReader.readAsDataURL(_this.file);
                };
                this.fileReader.onloadend = function (ev) {
                    _this.updateDom();
                };
            }
            CompleteProfileController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            CompleteProfileController.prototype.refreshToken = function () {
                var _this = this;
                var promise = this.$http.get("/me/refresh-token");
                promise.then(function (result) {
                    _this.SessionService.setToken(result.headers("Authorization"));
                }, function (error) {
                    Rollbar.error(JSON.stringify(error));
                });
                return promise;
            };
            CompleteProfileController.prototype.extractDomainFromEmail = function (email) {
                return email.split("@")[1];
            };
            CompleteProfileController.prototype.update = function () {
                var _this = this;
                if (this.file == null) {
                    this.upadateCompany.logo = "https://logo.clearbit.com/" + this.extractDomainFromEmail(this.SessionService.getEmail());
                }
                else {
                    this.upadateCompany.logo = null;
                }
                if (this.file != null) {
                    this.formData = new FormData();
                    this.formData.append('file', this.file);
                    this.$http.post("/company/subscriptions/upload-logo", this.formData, {
                        transformRequest: angular.identity,
                        headers: {
                            'Content-Type': undefined
                        }
                    }).then(function (result) {
                        _this.SessionService.setLogo(result.data.logoURL);
                        _this.upadateCompany.logo = null;
                        _this.$http.post("/company/company-completion", _this.upadateCompany).then(function () {
                            _this.refreshToken().then(function () {
                                _this.$state.go("root.company.dashboard");
                            });
                        }, function (error) {
                            _this.$mdToast.show(_this.$mdToast.simple()
                                .textContent("Details Update Failed")
                                .hideDelay(10000)
                                .theme("toasttheme"));
                            Rollbar.error(error);
                        });
                    });
                }
                else {
                    this.$http.post("/company/company-completion", this.upadateCompany).then(function () {
                        _this.refreshToken().then(function () {
                            _this.$state.go("root.company.dashboard");
                        });
                    }, function (error) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Details Update Failed")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                        Rollbar.error(error);
                    });
                }
            };
            CompleteProfileController.$inject = ["$http", "$mdToast", "$state", "$stateParams", "$scope", "SessionService"];
            return CompleteProfileController;
        }());
        app.controller("company.CompleteProfileController", CompleteProfileController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var moment;
        var DashboardController = /** @class */ (function () {
            function DashboardController($http, $mdToast, $scope, SessionService, $state, $timeout, $window, $mdDialog, CompanyInterviewsService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$state = $state;
                this.$timeout = $timeout;
                this.$window = $window;
                this.$mdDialog = $mdDialog;
                this.CompanyInterviewsService = CompanyInterviewsService;
                this.responseDeadline = new Date();
                this.allowDocumentUpload = false;
                this.showDuplicateLoading = false;
                this.showSelect = false;
                this.archiveList = [];
                this.search = "";
                this.selectedPageNumber = 1;
                this.pageOptions = [10, 20, 50, 100];
                this.selectedSearchCriteria = "ALL";
                this.searchText = "";
                this.disableSearch = false;
                this.totalResults = 0;
                this.disablePaging = false;
                this.sort = '-creationDate';
                this.sortableFields = [
                    {
                        label: 'Creation Date',
                        directions: [
                            { label: 'Last Posted', value: '-creationDate' },
                            { label: 'First Posted', value: 'creationDate' }
                        ]
                    },
                    {
                        label: 'Deadline',
                        directions: [
                            { label: 'End First', value: '-deadline' },
                            { label: 'End Last', value: 'deadline' }
                        ]
                    },
                ];
                this.typeFilter = '';
                this.filterFields = [
                    {
                        label: 'Interview Type',
                        options: [
                            { label: 'All', value: '' },
                        ]
                    }
                ];
                this.interviewEmailTemplateExists = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.CompanyInterviewsService.getInterviewEmailTemplate(interviewId)];
                        case 1: return [2 /*return*/, (_a.sent()).template != null];
                    }
                }); }); };
                this.filter = function (interview) {
                    var matchesFilter = _this.search == '' ? true : interview.role.toLowerCase().includes(_this.search.toLowerCase());
                    if (_this.typeFilter != '')
                        matchesFilter = matchesFilter && interview.interviewType.name === _this.typeFilter;
                    return matchesFilter;
                };
                this.listNoPaging = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, error_6;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 2, , 3]);
                                _a = this;
                                return [4 /*yield*/, this.CompanyInterviewsService.getInterviews()];
                            case 1:
                                _a.allInterviews = _b.sent();
                                this.interviews = JSON.parse(JSON.stringify(this.allInterviews));
                                this.disablePaging = true;
                                return [3 /*break*/, 3];
                            case 2:
                                error_6 = _b.sent();
                                this.showToastMessage('Some error has happened. See console for details');
                                Rollbar.error(error_6);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.create = function (interviewData) { return __awaiter(_this, void 0, void 0, function () {
                    var newInterview, error_7;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.CompanyInterviewsService.createInterview(interviewData)];
                            case 1:
                                newInterview = _a.sent();
                                this.allInterviews = __spreadArray(__spreadArray([], this.allInterviews), [newInterview]);
                                this.interviews = JSON.parse(JSON.stringify(this.allInterviews));
                                this.showToastMessage('Interview created, you can add questions now');
                                this.resetNewInterviewData();
                                return [3 /*break*/, 3];
                            case 2:
                                error_7 = _a.sent();
                                this.showCreateInterview = false;
                                this.interviewName = '';
                                this.showToastMessage(error_7.data.message);
                                Rollbar.error(error_7);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.duplicateInterview = function (interview) {
                    _this.dialog = _this.$mdDialog
                        .show({
                        controller: DashboardController,
                        controllerAs: "duplicate",
                        bindToController: true,
                        templateUrl: "views/company/dialogs/duplicate-interview.html",
                        parent: angular.element(document.body),
                        locals: {
                            maxdate: _this.responseDeadline,
                            interview: interview,
                            currentInterview: interview
                        },
                        clickOutsideToClose: true,
                        escapeToClose: true
                    })
                        .then(function () {
                        _this.$mdDialog.hide();
                        console.debug("You clicked the button to close the bottom sheet");
                    })
                        .catch(function (error) {
                        console.debug("You clicked cancel button");
                        console.debug(error);
                    });
                };
                this.cancelDuplicate = function () {
                    _this.$mdDialog.hide();
                };
                this.createDuplicateInterview = function (interviewId) { return __awaiter(_this, void 0, void 0, function () {
                    var duplicateInterview;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.showDuplicateLoading = true;
                                duplicateInterview = {
                                    newName: this.duplicateInterviewName,
                                    newDeadline: this.duplicateInterviewDeadline,
                                    duplicateId: interviewId
                                };
                                //console.log(duplicateInterview);
                                return [4 /*yield*/, this.$http.post("/company/interviews/duplicate-interview/" + interviewId, duplicateInterview)
                                        .then(function (result) { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            this.showDuplicateLoading = false;
                                            this.duplicateInterviewName = null;
                                            this.duplicateInterviewDeadline = null;
                                            this.cancelDuplicate();
                                            this.showToastMessage("Interview Duplicated Succesfully");
                                            this.$state.go("root.company.candidates", { interviewId: result.data.guid });
                                            return [2 /*return*/];
                                        });
                                    }); })];
                            case 1:
                                //console.log(duplicateInterview);
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, myFilterOptions, error_8;
                    var _this = this;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (!this.SessionService.isRoleSuperAdmin()) return [3 /*break*/, 2];
                                return [4 /*yield*/, this.list()];
                            case 1:
                                _b.sent();
                                return [3 /*break*/, 4];
                            case 2: return [4 /*yield*/, this.listNoPaging()];
                            case 3:
                                _b.sent();
                                _b.label = 4;
                            case 4:
                                this.$scope.$on('create', function (evt, interview) { return _this.create(interview); });
                                this.$scope.$on('cancel', function (evt, interview) {
                                    return _this.interviews.find(function (i) { return i.guid === interview.guid; }).isEdit = false;
                                });
                                this.$scope.$on('cancelAdd', function (evt) {
                                    return _this.showCreateInterview = false;
                                });
                                this.$scope.$on('update', function (evt, interview) { return _this.update(interview); });
                                _b.label = 5;
                            case 5:
                                _b.trys.push([5, 7, , 8]);
                                _a = this;
                                return [4 /*yield*/, this.CompanyInterviewsService.getInterviewTypes()];
                            case 6:
                                _a.interviewTypes = _b.sent();
                                myFilterOptions = [
                                    { label: 'All', value: '' }
                                ];
                                this.interviewTypes.forEach(function (element) {
                                    var filterObject = { label: element.name, value: element.name };
                                    myFilterOptions.push(filterObject);
                                });
                                this.filterFields[0].options = myFilterOptions;
                                return [3 /*break*/, 8];
                            case 7:
                                error_8 = _b.sent();
                                this.showToastMessage('There was an issue retrieving the interview types');
                                return [3 /*break*/, 8];
                            case 8:
                                this.companySubscriptionStatus = {
                                    hasActiveSubscription: true,
                                    everHadSubscription: true,
                                    planName: "Unlimited",
                                    forceUpgrade: false
                                };
                                this.SessionService.setPlan(this.companySubscriptionStatus);
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position("top left")
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.resetNewInterviewData = function () {
                    _this.showCreateInterview = false;
                    _this.interviewName = '';
                    _this.responseDeadline = new Date();
                };
                this.getReadableDate = function (date) { return new Date(date).toLocaleDateString('en-GB', {
                    day: 'numeric', month: 'short', year: 'numeric'
                }).replace(/ /g, '-'); };
                var d = new Date();
                this.now = new Date();
                this.timeZone = d
                    .toLocaleString("en", { timeZoneName: "short" })
                    .split(" ")
                    .pop();
                if (is.ie() ||
                    navigator.userAgent.match(/SamsungBrowser/i) ||
                    navigator.userAgent.match(/UC\s?Browser|UCWEB/i)) {
                    this.$state.go("root.system-requirements", {}, {
                        reload: false
                    });
                }
                if (is.chrome() || is.firefox() || is.safari() || is.opera()) {
                }
                else {
                    this.$state.go("root.system-requirements", {}, {
                        reload: false
                    });
                }
                this.showCreateInterview = false;
                this.currentPage = 0;
                this.pageSize = 10;
            }
            DashboardController.prototype.list = function () {
                var _this = this;
                this.$http.get("/company/interviews/paged", { params: { page: this.currentPage, pagesize: this.pageSize } }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.lastCalledSearch = 'list';
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            DashboardController.prototype.previousPage = function () {
                var _this = this;
                this.currentPage = this.currentPage - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/paged", { params: params }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            DashboardController.prototype.nextPage = function () {
                var _this = this;
                this.currentPage = this.currentPage + 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/paged", { params: params }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            DashboardController.prototype.reloadPage = function () {
                var _this = this;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/paged", { params: params }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            DashboardController.prototype.getPagesArray = function (num) {
                var array = [];
                for (var i = 1; i <= num; i++) {
                    array.push(i);
                }
                return array;
            };
            DashboardController.prototype.selectedPage = function () {
                var _this = this;
                this.currentPage = this.selectedPageNumber - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.selectedPageNumber - 1, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/paged", { params: params }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            DashboardController.prototype.toggleSelect = function (interview) {
                if (interview.checkedForArchive) {
                    this.archiveList.push(interview);
                }
                else {
                    var index = this.archiveList.indexOf(interview);
                    this.archiveList.splice(index, 1);
                }
            };
            DashboardController.prototype.assignPriority = function (interviews) {
                var priority = 0;
                var one_day = 1000 * 60 * 60 * 24;
                var today = new Date();
                var todayMs = today.getTime();
                interviews.map(function (interview) {
                    var fromDate = new Date(interview.fromUTCDateTime);
                    if (fromDate.getFullYear() == today.getFullYear() && fromDate.getMonth() == today.getMonth() && fromDate.getDate() == today.getDate()) {
                        interview.daysToStart = 0;
                    }
                    else {
                        // Calculate the difference in milliseconds
                        var difference_ms = fromDate.getTime() - todayMs;
                        // Convert back to days and return
                        interview.daysToStart = Math.round(difference_ms / one_day);
                        if (interview.daysToStart < 0) {
                            interview.daysToStart = 99999;
                        }
                    }
                });
            };
            DashboardController.prototype.resultsPerPageChanged = function () {
                this.list();
            };
            DashboardController.prototype.clearSearch = function () {
                this.disableSearch = false;
                this.searchText = "";
                this.selectedSearchCriteria = "ALL";
                this.currentPage = 0;
                this.list();
            };
            DashboardController.prototype.searchInterviews = function () {
                var _this = this;
                this.currentPage = 0;
                this.disableSearch = true;
                this.$http.get("/company/interviews/paged", { params: { page: this.currentPage, pagesize: this.pageSize, search: this.selectedSearchCriteria, searchtext: this.searchText } }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalElements = result.data.totalElements;
                    _this.lastCalledSearch = 'search';
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            DashboardController.prototype.cancelEdit = function (interview) {
                interview.isEdit = false;
            };
            DashboardController.prototype.clickArchive = function () {
                this.showSelect = true;
            };
            DashboardController.prototype.clickCancel = function () {
                this.showSelect = false;
                this.interviews.map(function (interview) {
                    delete interview.checkedForArchive;
                });
            };
            DashboardController.prototype.cancelInterview = function (interview) {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure?")
                    .textContent("Are you sure you wish to cancel this interview? You will not be able to undo this action")
                    .ok("Confirm")
                    .cancel("Back")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/company/multiparty/cancel-event/" + interview.id, {})
                        .then(function (result) {
                        interview.cancelled = true;
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Interview Cancelled")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    }, function (error) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Request failed. Please try again")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    });
                }, function () {
                });
            };
            DashboardController.prototype.clickArchiveSelected = function () {
                var _this = this;
                this.showSelect = false;
                this.$http.put("/company/interviews/archive-jobs", this.archiveList).then(function (result) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this.$mdToast.show(this.$mdToast
                            .simple()
                            .textContent(this.archiveList.length + " " + (this.archiveList.length > 1 ? 'Interviews' : 'Interview') + " Archived Sucessfully")
                            .position("top left")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                        this.showSelect = false;
                        this.$state.reload();
                        this.archiveList = [];
                        return [2 /*return*/];
                    });
                }); }, function (error) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(error.data.message)
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                });
            };
            DashboardController.prototype.checkSubscriptionStatus = function () {
                return this.$http.get("/company/subscriptions/check-status");
            };
            DashboardController.prototype.toggleCreateInterview = function () {
                this.showCreateInterview = !this.showCreateInterview;
            };
            DashboardController.prototype.edit = function (interview) {
                interview.isEdit = true;
            };
            // public sortInterviews = () => {
            //   if (this.sort.type !== 'filter') this.interviews = this.allInterviews
            //   const sort = (a, b) => {
            //     const min = this.sort.direction === 'asc' ? a : b;
            //     const max = this.sort.direction === 'asc' ? b : a;
            //     const minField = this.sort.subfield ? min[this.sort.field][this.sort.subfield] : min[this.sort.field]
            //     const maxField = this.sort.subfield ? max[this.sort.field][this.sort.subfield] : max[this.sort.field]
            //     if (minField > maxField) { return 1 }
            //     if (maxField > minField) { return -1 }
            //     return 0;
            //   }
            //   this.interviews.sort((a: any, b: any) => sort(a, b))
            //   this.updateDom();
            // }
            DashboardController.prototype.update = function (interview) {
                var _this = this;
                this.interviews.find(function (i) { return i.guid === interview.guid; }).isEdit = false;
                this.$http.put("/company/interviews/", interview).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Interview Edited Sucessfully...")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.$state.reload();
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(error.data.message)
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                });
            };
            DashboardController.prototype.activateJoinInterview = function (interview) {
                var today = new Date();
                var diffMs = interview.fromUTCDateTime - today.getTime(); // milliseconds between now & Christmas
                var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);
                var endTimeinMS = interview.fromUTCDateTime + ((interview.duration + 20) * 60 * 1000);
                var differenceInEndTimeAndNow = endTimeinMS - today.getTime();
                var fromDate = new Date(interview.fromUTCDateTime);
                if (fromDate.getFullYear() == today.getFullYear() && fromDate.getMonth() == today.getMonth() && fromDate.getDate() == today.getDate()) {
                    if (diffMins <= 15 && differenceInEndTimeAndNow >= 0) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                else {
                    return false;
                }
            };
            DashboardController.prototype.disableCancelAndReschedule = function (interview) {
                var today = new Date();
                var diffMs = interview.fromUTCDateTime - today.getTime(); // milliseconds between now & Christmas
                var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);
                var endTimeinMS = interview.fromUTCDateTime + ((interview.duration + 20) * 60 * 1000);
                if (diffMins <= 15) {
                    return true;
                }
                else {
                    return false;
                }
            };
            DashboardController.prototype.updateMultipartyEvent = function (interview) {
                var _this = this;
                interview.fromUTCDateTime = interview.newFromUTCDateTime;
                this.$http.put("/company/multiparty/reschedule-interview", interview).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Interview Rescheduled...")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    interview.isEdit = false;
                });
            };
            DashboardController.prototype.createMultipartyInterview = function () {
                var _this = this;
                this.$http.post("/company/multiparty/create-interview", this.newMultipartyInterview).then(function (result) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.list()];
                            case 1:
                                _a.sent();
                                this.newMultipartyInterview.id = null;
                                this.newMultipartyInterview.interviewName = null;
                                this.newMultipartyInterview.jobDescription = null;
                                this.showCreateInterview = false;
                                return [2 /*return*/];
                        }
                    });
                }); });
            };
            DashboardController.prototype.showReschedule = function (multipartyInterview) {
                multipartyInterview.isEdit = true;
            };
            DashboardController.prototype.updateDom = function () {
                if (!this.$scope.$$phase)
                    this.$scope.$apply();
            };
            DashboardController.$inject = [
                "$http",
                "$mdToast",
                "$scope",
                "SessionService",
                "$state",
                "$timeout",
                "$window",
                "$mdDialog",
                "company.interviewsService"
            ];
            return DashboardController;
        }());
        app.controller("company.DashboardController", DashboardController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var QuestionsController = /** @class */ (function () {
            function QuestionsController($http, $scope, $window, $mdToast, $stateParams, $state, SessionService, $timeout, competenciesService, interviewsService) {
                var _this = this;
                this.$http = $http;
                this.$scope = $scope;
                this.$window = $window;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$timeout = $timeout;
                this.competenciesService = competenciesService;
                this.interviewsService = interviewsService;
                this.QUESTION_TYPES = {
                    TEXT: 'Written Answer',
                    VIDEO: 'Video Response'
                };
                this.editAllowed = false;
                this.editingQuestionId = null;
                this.showCreateQuestion = false;
                this.showLoading = false;
                this.showWaitAdding = false;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b, error_9;
                    var _this = this;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _c.trys.push([0, 4, , 5]);
                                //this.interview = (await this.interviewsService.getInterviews()).find(i => i.guid === this.interviewId)
                                _a = this;
                                return [4 /*yield*/, this.interviewsService.getInterview(this.interviewId)];
                            case 1:
                                //this.interview = (await this.interviewsService.getInterviews()).find(i => i.guid === this.interviewId)
                                _a.interview = _c.sent();
                                _b = this;
                                return [4 /*yield*/, this.competenciesService.getCoreCompetencies()];
                            case 2:
                                _b.coreCompetencies = _c.sent();
                                if (this.interview.competencyType != 'Core')
                                    this.editAllowed = true;
                                return [4 /*yield*/, this.refreshCompetencies()];
                            case 3:
                                _c.sent();
                                return [3 /*break*/, 5];
                            case 4:
                                error_9 = _c.sent();
                                this.showToastMessage('There was an issue retrieving competencies');
                                Rollbar.error(error_9);
                                return [3 /*break*/, 5];
                            case 5:
                                this.$scope.$on('create', function (evt, params) { return __awaiter(_this, void 0, void 0, function () {
                                    var question, file, createdQuestion, _a;
                                    return __generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                question = params.question, file = params.file;
                                                return [4 /*yield*/, this.competenciesService.createCompetencyQuestion(this.showingCompetencyQuestionsId, question)];
                                            case 1:
                                                createdQuestion = _b.sent();
                                                if (!file) return [3 /*break*/, 3];
                                                return [4 /*yield*/, this.uploadVideo(file, createdQuestion)];
                                            case 2:
                                                _a = _b.sent();
                                                return [3 /*break*/, 5];
                                            case 3: return [4 /*yield*/, this.refreshCompetencies()];
                                            case 4:
                                                _a = _b.sent();
                                                _b.label = 5;
                                            case 5:
                                                _a;
                                                this.toggleCreateQuestion();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); });
                                this.$scope.$on('deleteChoice', function (evt, params) { return __awaiter(_this, void 0, void 0, function () {
                                    var choiceId;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                choiceId = params.choiceId;
                                                return [4 /*yield*/, this.competenciesService.deleteChoice(choiceId)];
                                            case 1:
                                                _a.sent();
                                                return [4 /*yield*/, this.refreshCompetencies()];
                                            case 2:
                                                _a.sent();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); });
                                this.$scope.$on('cancel', function (evt, question) { return _this.editingQuestionId = null; });
                                this.$scope.$on('update', function (evt, params) { return __awaiter(_this, void 0, void 0, function () {
                                    var question, file, _a;
                                    return __generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                question = params.question, file = params.file;
                                                return [4 /*yield*/, this.competenciesService.updateCompetencyQuestion(question)];
                                            case 1:
                                                _b.sent();
                                                this.editingQuestionId = null;
                                                if (!file) return [3 /*break*/, 3];
                                                return [4 /*yield*/, this.uploadVideo(file, question)];
                                            case 2:
                                                _a = _b.sent();
                                                return [3 /*break*/, 5];
                                            case 3: return [4 /*yield*/, this.refreshCompetencies()];
                                            case 4:
                                                _a = _b.sent();
                                                _b.label = 5;
                                            case 5:
                                                _a;
                                                return [2 /*return*/];
                                        }
                                    });
                                }); });
                                this.$scope.$on('competencies-listChanged', function (event, _a) {
                                    var checked = _a.checked, unchecked = _a.unchecked;
                                    return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_b) {
                                            switch (_b.label) {
                                                case 0: return [4 /*yield*/, this.addCoreCompetenciesAsCustom(checked)];
                                                case 1:
                                                    _b.sent();
                                                    return [4 /*yield*/, this.refreshCompetencies()];
                                                case 2:
                                                    _b.sent();
                                                    return [2 /*return*/];
                                            }
                                        });
                                    });
                                });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.getQuestionTypeText = function (question) { return _this.QUESTION_TYPES[question.questionType] || question.questionType; };
                this.addNewCompetency = function () { return _this.$state.go('root.company.new-custom-competency', { interviewId: _this.interviewId }); };
                this.refreshCompetencies = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, selectedCompetency;
                    var _this = this;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _a = this;
                                return [4 /*yield*/, this.competenciesService.getInterviewCustomCompetencies(this.interviewId)];
                            case 1:
                                _a.customCompetencies = _b.sent();
                                this.selectedCompetencies = this.customCompetencies;
                                this.checkedCoreCompetencies = this.getSelectedCoreCompetencies();
                                if (this.showingCompetencyQuestionsId) {
                                    selectedCompetency = this.selectedCompetencies.find(function (c) { return c.id === _this.showingCompetencyQuestionsId; });
                                    this.questions = selectedCompetency.questionList;
                                }
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.showCompetencyQuestions = function (competency) {
                    if (_this.showingCompetencyQuestionsId !== competency.id) {
                        _this.showCreateQuestion = false;
                    }
                    _this.showingCompetencyQuestionsId = competency.id;
                    _this.questions = competency.questionList;
                };
                this.isShowingQuestions = function (competency) {
                    return competency.id == _this.showingCompetencyQuestionsId;
                };
                this.deleteCompetency = function (competency) { return __awaiter(_this, void 0, void 0, function () {
                    var error_10;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.competenciesService.deleteCustomCompetency(competency.id)];
                            case 1:
                                _a.sent();
                                this.showToastMessage("Successfully deleted " + competency.name + " competency");
                                if (this.showingCompetencyQuestionsId === competency.id)
                                    this.questions = [];
                                //await this.refreshCompetencies();
                                this.$window.location.reload();
                                return [3 /*break*/, 3];
                            case 2:
                                error_10 = _a.sent();
                                this.showToastMessage('There was an issue deleting the competency');
                                Rollbar.error(error_10);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.getCompetencyQuestions = function (competency) { return __awaiter(_this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _a = competency;
                                return [4 /*yield*/, this.competenciesService.getCompetencyQuestions(competency.id)];
                            case 1:
                                _a.questionList = _b.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.toggleCreateQuestion = function () { return _this.showCreateQuestion = !_this.showCreateQuestion; };
                this.getSelectedCoreCompetencies = function () { return _this.coreCompetencies
                    .map(function (coreCompetency, index) {
                    if (_this.selectedCompetencies.map(function (customCompetency) { return customCompetency.name; }).indexOf(coreCompetency.name) !== -1)
                        return index;
                })
                    .filter(function (index) { return index !== null && index !== undefined; }); };
                this.addCoreCompetenciesAsCustom = function (competencies) { return __awaiter(_this, void 0, void 0, function () {
                    var selectedCompetencyNames, nonAddedCompetencies, _i, nonAddedCompetencies_1, competency, competencyData, customCompetency, questionDataList, _a, _b, question, questionData, _c, _d, choice, error_11;
                    return __generator(this, function (_e) {
                        switch (_e.label) {
                            case 0:
                                this.showWaitAdding = true;
                                selectedCompetencyNames = this.selectedCompetencies.map(function (competency) { return competency.name; });
                                nonAddedCompetencies = competencies.filter(function (competency) { return selectedCompetencyNames.indexOf(competency.name) === -1; });
                                _e.label = 1;
                            case 1:
                                _e.trys.push([1, 7, , 8]);
                                _i = 0, nonAddedCompetencies_1 = nonAddedCompetencies;
                                _e.label = 2;
                            case 2:
                                if (!(_i < nonAddedCompetencies_1.length)) return [3 /*break*/, 6];
                                competency = nonAddedCompetencies_1[_i];
                                competencyData = {
                                    name: competency.name,
                                    description: competency.description,
                                    interviewId: this.interviewId,
                                    oneStarRatingDefinition: competency.oneStarRatingDefinition,
                                    twoStarRatingDefinition: competency.twoStarRatingDefinition,
                                    threeStarRatingDefinition: competency.threeStarRatingDefinition,
                                    fourStarRatingDefinition: competency.fourStarRatingDefinition,
                                    fiveStarRatingDefinition: competency.fiveStarRatingDefinition
                                };
                                return [4 /*yield*/, this.competenciesService.createCustomCompetency(competencyData)];
                            case 3:
                                customCompetency = _e.sent();
                                if (!customCompetency) return [3 /*break*/, 5];
                                questionDataList = [];
                                for (_a = 0, _b = competency.questionList; _a < _b.length; _a++) {
                                    question = _b[_a];
                                    questionData = {
                                        questionText: question.questionText,
                                        questionType: question.questionType,
                                        questionVideoURL: question.questionVideoURL,
                                        readingTime: question.readingTime,
                                        timeallowed: question.timeallowed,
                                        canChooseMultiple: question.canChooseMultiple,
                                        canAnswerShort: question.canAnswerShort,
                                        choices: question.choices
                                    };
                                    for (_c = 0, _d = question.choices; _c < _d.length; _c++) {
                                        choice = _d[_c];
                                        delete choice.id;
                                    }
                                    questionDataList.push(questionData);
                                }
                                return [4 /*yield*/, this.competenciesService.createCompetencyQuestions(customCompetency.id, questionDataList)];
                            case 4:
                                _e.sent();
                                this.showCompetencyQuestions(customCompetency);
                                _e.label = 5;
                            case 5:
                                _i++;
                                return [3 /*break*/, 2];
                            case 6: return [3 /*break*/, 8];
                            case 7:
                                error_11 = _e.sent();
                                this.showToastMessage('There was an issue adding competencies');
                                return [3 /*break*/, 8];
                            case 8:
                                this.showWaitAdding = false;
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.openVideo = function (url) { return _this.$window.open(url, '_blank'); };
                this.selectQuestionToEdit = function (question) { return _this.editingQuestionId = question.id; };
                this.deleteQuestion = function (question) { return __awaiter(_this, void 0, void 0, function () {
                    var index, error_12;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.competenciesService.deleteQuestionFromCompetency(question.id)];
                            case 1:
                                _a.sent();
                                index = this.questions.findIndex(function (q) { return q.id === question.id; });
                                this.questions.splice(index, 1);
                                this.showToastMessage("Succesfully deleted question.");
                                return [3 /*break*/, 3];
                            case 2:
                                error_12 = _a.sent();
                                Rollbar.error(error_12);
                                this.showToastMessage("Failed to delete question.");
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position("top left")
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.uploadVideo = function (file, question) {
                    if (!file)
                        return;
                    var formData = new FormData();
                    formData.append("file", file);
                    var format = file.type.split('/')[1];
                    _this.showLoading = true;
                    _this.$http.post("/company/custom-competency/question-video/" + question.id + "/" + format, formData, { transformRequest: angular.identity, headers: { 'Content-Type': undefined } }).then(function (result) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.showLoading = false;
                                    this.showToastMessage('Video Uploaded');
                                    return [4 /*yield*/, this.refreshCompetencies()];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); }, function (error) {
                        _this.showToastMessage('Error Uploading your Video. Please try again');
                        Rollbar.error(error);
                    });
                };
                this.interviewId = $stateParams.interviewId;
                this.plan = SessionService.getPlan();
            }
            QuestionsController.prototype.loadQuestions = function (industryId) {
                var _this = this;
                this.$http.get("/candidate/video-cv/get-question/" + industryId).then(function (result) {
                    _this.industryQuestions = result.data;
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            QuestionsController.$inject = [
                "$http",
                "$scope",
                "$window",
                "$mdToast",
                "$stateParams",
                "$state",
                "SessionService",
                "$timeout",
                "company.competenciesService",
                "company.interviewsService"
            ];
            return QuestionsController;
        }());
        app.controller("company.QuestionsController", QuestionsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        'use strict';
        var app = Qna.getModule();
        var CandidatesController = /** @class */ (function () {
            function CandidatesController($http, $scope, $window, $mdToast, $state, $stateParams, SessionService, $mdDialog, $timeout, interviewsService, invitationsService, $mdMenu, roleConstants, candidateInvitationService, reportsService) {
                var _this = this;
                this.$http = $http;
                this.$scope = $scope;
                this.$window = $window;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.interviewsService = interviewsService;
                this.invitationsService = invitationsService;
                this.$mdMenu = $mdMenu;
                this.roleConstants = roleConstants;
                this.candidateInvitationService = candidateInvitationService;
                this.reportsService = reportsService;
                this.selectedInvitations = [];
                this.selectedInvitationIds = [];
                this.search = "";
                this.orderVariable = "-creationDate";
                this.filterStatus = "";
                this.reviewers = [];
                this.selectedReviewers = [];
                this.teamMembers = [];
                this.assignedCandidateReviewers = [];
                this.selectedIndexes = [];
                this.showNonAssigned = false;
                this.showSelectReviewers = false;
                this.showExtendDeadline = false;
                this.selectedPageNumber = 1;
                this.pageOptions = [10, 20, 50, 100];
                this.selectedSearchCriteria = "ALL";
                this.searchText = "";
                this.disableSearch = false;
                this.totalResults = 0;
                this.isOpen = false;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b;
                    var _this = this;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                this.selectedInvitations = [];
                                _a = this;
                                return [4 /*yield*/, this.interviewsService.getInterview(this.interviewId)];
                            case 1:
                                _a.interview = _c.sent();
                                _b = this;
                                return [4 /*yield*/, this.interviewsService.getTeamMembers(this.interviewId)];
                            case 2:
                                _b.teamMembers = _c.sent();
                                this.teamMembers = this.teamMembers
                                    .filter(function (obj) { return obj.hasAccess && obj.role == _this.roleConstants.identifiers.REVIEWER; });
                                //.sort((a,b) =>  (a > b ? 1 : -1));
                                return [4 /*yield*/, this.list()];
                            case 3:
                                //.sort((a,b) =>  (a > b ? 1 : -1));
                                _c.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.listNoPage = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _i, _b, invitation, error_13;
                    var _this = this;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _c.trys.push([0, 2, , 3]);
                                _a = this;
                                return [4 /*yield*/, this.invitationsService.getInterviewInvitations(this.interviewId)];
                            case 1:
                                _a.allInvitations = _c.sent();
                                for (_i = 0, _b = this.allInvitations; _i < _b.length; _i++) {
                                    invitation = _b[_i];
                                    invitation.status = this.getInvitationStatus(invitation);
                                    invitation.reviewers = invitation.reviewers
                                        .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                                }
                                this.invitations = JSON.parse(JSON.stringify(this.allInvitations));
                                return [3 /*break*/, 3];
                            case 2:
                                error_13 = _c.sent();
                                this.showToastMessage('There was an issue retrieving the interview invitations');
                                Rollbar.error(error_13);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.assignReviewersToMultipleCandidates = function () { return __awaiter(_this, void 0, void 0, function () {
                    var checkedReviewers;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                checkedReviewers = this.selectedReviewers.map(function (r) { return r.name; });
                                return [4 /*yield*/, this.selectedInvitations.forEach(function (invitation) {
                                        var assignReviewersDTO = {
                                            endUserIds: _this.selectedReviewers
                                                .filter(function (r) { return checkedReviewers.includes(r.name); })
                                                .map(function (r) { return r.guid; })
                                        };
                                        console.info("Assign " + assignReviewersDTO + " To " + invitation.candidateemail);
                                        _this.invitationsService.assignReviewersToCandidate(invitation.guid, assignReviewersDTO);
                                        invitation.reviewers = invitation.reviewers
                                            .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                                    })];
                            case 1:
                                _a.sent();
                                this.clickCancelAssignReviewers();
                                //location.reload();
                                return [4 /*yield*/, this.list()];
                            case 2:
                                //location.reload();
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.extendDeadlineOfMultipleCandidates = function () { return __awaiter(_this, void 0, void 0, function () {
                    var newDeadline;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!(this.selectedInvitations.length > 0)) return [3 /*break*/, 3];
                                newDeadline = this.newBatchDeadline;
                                return [4 /*yield*/, this.selectedInvitations.forEach(function (invitation) {
                                        var ExtendDeadlineDTO = {
                                            newDeadline: _this.newBatchDeadline
                                        };
                                        console.info("Extend Deadline To " + ExtendDeadlineDTO + " For " + invitation.candidateemail);
                                        _this.invitationsService.extendDeadlineToCandidate(invitation.guid, ExtendDeadlineDTO);
                                    })];
                            case 1:
                                _a.sent();
                                this.clickCancelExtendDeadline();
                                //location.reload();
                                return [4 /*yield*/, this.list()];
                            case 2:
                                //location.reload();
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 3:
                                this.showToastMessage('Please select atleast one invitation');
                                _a.label = 4;
                            case 4: return [2 /*return*/];
                        }
                    });
                }); };
                this.extendBatchDeadline = function () { return __awaiter(_this, void 0, void 0, function () {
                    var invitations, extendDeadlineDTO;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                invitations = [];
                                return [4 /*yield*/, this.selectedInvitations.forEach(function (invitation) {
                                        invitations.push(invitation.guid);
                                    })];
                            case 1:
                                _a.sent();
                                if (!(invitations.length > 0)) return [3 /*break*/, 4];
                                extendDeadlineDTO = {
                                    newDeadline: this.newBatchDeadline,
                                    invitations: invitations
                                };
                                console.log(extendDeadlineDTO);
                                return [4 /*yield*/, this.invitationsService.extendBatchCandidate(extendDeadlineDTO)];
                            case 2:
                                _a.sent();
                                this.clickCancelExtendDeadline();
                                //location.reload();
                                return [4 /*yield*/, this.list()];
                            case 3:
                                //location.reload();
                                _a.sent();
                                return [3 /*break*/, 5];
                            case 4:
                                this.showToastMessage('Please select atleast one invitation');
                                _a.label = 5;
                            case 5: return [2 /*return*/];
                        }
                    });
                }); };
                this.filterCandidatesByStatus = function () {
                    /*if (this.filterStatus === 'non-assigned') {
                      this.filterStatus = 'all';
                      this.showNonAssigned = true;
                    } else {
                      this.showNonAssigned = false;
                    }*/
                    var filterCondition;
                    if (_this.filterStatus == null || _this.filterStatus == 'all' || _this.filterStatus == '')
                        filterCondition = function (invitation) { return _this.checkShowNonAssignedCandidates(invitation); };
                    if (_this.filterStatus === 'pending')
                        filterCondition = function (invitation) { return !invitation.hasAttemptedButNotCompletedRecording
                            && !invitation.completed
                            && _this.checkShowNonAssignedCandidates(invitation); };
                    if (_this.filterStatus === 'completed')
                        filterCondition = function (invitation) { return invitation.completed && _this.checkShowNonAssignedCandidates(invitation); };
                    if (_this.filterStatus === 'incomplete')
                        filterCondition = function (invitation) { return invitation.hasAttemptedButNotCompletedRecording && _this.checkShowNonAssignedCandidates(invitation); };
                    ;
                    _this.invitations = _this.allInvitations.filter(filterCondition);
                };
                this.checkShowNonAssignedCandidates = function (inv) {
                    if (_this.showNonAssigned) {
                        return inv.reviewers.length === 0;
                    }
                    else {
                        return true;
                    }
                };
                this.showNonAssignedCandidates = function () {
                    _this.filterCandidatesByStatus();
                };
                this.getInvitationStatus = function (invitation) {
                    if (invitation.completed)
                        return 'Interview Recorded';
                    if (invitation.hasAttemptedButNotCompletedRecording)
                        return 'Incomplete Recording Attempt';
                    return 'Pending Recording';
                };
                this.getStatusColor = function (invitation) {
                    return invitation.status === 'Interview Recorded' ?
                        'green' : invitation.status === 'Pending Recording' ? 'inherit' : 'red';
                };
                this.showReattemptReason = function (invitation) {
                    _this.linkDialog = _this.$mdDialog
                        .show({
                        controller: CandidatesController,
                        controllerAs: "candidate",
                        bindToController: true,
                        templateUrl: "views/company/dialogs/candidate-reattempt.html",
                        parent: angular.element(document.body),
                        locals: { candidateComment: invitation.reattemptComment, reattemptId: invitation.reattemptRequestId },
                        clickOutsideToClose: true,
                        escapeToClose: true
                    })
                        .then(function () {
                        console.debug("You clicked the button to close the bottom sheet");
                    })
                        .catch(function () {
                        console.debug("You clicked cancel button");
                    });
                };
                this.changeReattemptStatus = function (reattemptRequestId, allow) { return __awaiter(_this, void 0, void 0, function () {
                    var error_14;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.invitationsService.changeReattemptStatus(reattemptRequestId, allow)];
                            case 1:
                                _a.sent();
                                this.$state.reload();
                                return [3 /*break*/, 3];
                            case 2:
                                error_14 = _a.sent();
                                this.showToastMessage('There was an issue changing the reattempt status');
                                return [3 /*break*/, 3];
                            case 3:
                                this.$mdDialog.cancel();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.setEditable = function (invitation) {
                    invitation.isEdit = true;
                    _this.editableExpiry = new Date(invitation.invitationExpiry);
                };
                this.edit = function (invitation) { return __awaiter(_this, void 0, void 0, function () {
                    var updatedInvitation, error_15;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.invitationsService.updateInterviewInvitation({
                                        guid: invitation.guid,
                                        candidatename: invitation.candidatename,
                                        candidateemail: invitation.candidateemail,
                                        invitationExpiry: this.editableExpiry
                                    })];
                            case 1:
                                updatedInvitation = _a.sent();
                                invitation.isEdit = false;
                                invitation.invitationcode = updatedInvitation.invitationcode;
                                invitation.invitationExpiry = updatedInvitation.invitationExpiry;
                                this.showToastMessage('Invitation Edited Successfully');
                                this.reloadPage();
                                return [3 /*break*/, 3];
                            case 2:
                                error_15 = _a.sent();
                                this.showToastMessage(error_15.data.message || 'There was an error updating the invitation');
                                Rollbar.error(error_15);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.create = function () { return __awaiter(_this, void 0, void 0, function () {
                    var invitationData, createdInvitation, error_16;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                invitationData = { candidateemail: this.email, candidatename: this.name, applicantid: this.applicantId };
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.invitationsService.createInterviewInvitation(this.interviewId, invitationData)];
                            case 2:
                                createdInvitation = _a.sent();
                                createdInvitation.reviewers = createdInvitation.reviewers
                                    .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                                createdInvitation.status = this.getInvitationStatus(createdInvitation);
                                if (createdInvitation != null)
                                    this.invitations = __spreadArray(__spreadArray([], this.invitations), [createdInvitation]);
                                this.resetNewInvitationData();
                                this.showToastMessage('Invitation Sent');
                                return [3 /*break*/, 4];
                            case 3:
                                error_16 = _a.sent();
                                this.resetNewInvitationData();
                                this.showToastMessage(error_16.data.message || 'There was an error creating the invitation');
                                Rollbar.error(error_16);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); };
                this.exportInvitations = function () { return __awaiter(_this, void 0, void 0, function () {
                    var url;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.reportsService.getInvitationsExcelReport(this.interviewId)];
                            case 1:
                                url = _a.sent();
                                this.$window.open(url.reportURL);
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.isSelfInvitation = function (email) {
                    return _this.$http.post("/company/invitations/is-self-invitation/", { email: email });
                };
                this.isSameDomainInvitation = function (email) {
                    return _this.$http.post("/company/invitations/is-same-domain-invitation/", { email: email });
                };
                this.isAnotherCompanyInvitation = function (email) {
                    return _this.$http.post("/company/invitations/is-another-company-invitation/", { email: email });
                };
                this.resetNewInvitationData = function () {
                    _this.showInviteCandidate = false;
                    _this.name = '';
                    _this.email = '';
                    _this.applicantId = '';
                };
                this.getChipsClass = function (invitation) {
                    var style = 'invitation-reviewer-chips';
                    if (!invitation.reviewers || invitation.reviewers.length === 0)
                        style += " warning";
                    return style;
                };
                this.showReviewers = function (invitation) { return __awaiter(_this, void 0, void 0, function () {
                    var members, groups, assignedReviewers;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.interviewsService.getTeamMembers(this.interviewId)];
                            case 1:
                                members = _a.sent();
                                members = members.filter(function (m) { return m.hasAccess && m.role === _this.roleConstants.identifiers.REVIEWER; });
                                return [4 /*yield*/, this.interviewsService.getTeamGroups(this.interviewId)];
                            case 2:
                                groups = _a.sent();
                                // Not used as right now all the reviewers in groups are returned also in members, but maybe we'll need to change this
                                this.reviewers = members;
                                assignedReviewers = members.sort(function (a, b) { return (a.name > b.name ? 1 : -1); }).map(function (m) { return ({ name: m.name }); });
                                this.selectedIndexes = invitation.reviewers
                                    .map(function (rev) { return members.findIndex(function (m) { return m.guid === rev.id; }); })
                                    .filter(function (index) { return index >= 0; });
                                this.$mdDialog.show({
                                    templateUrl: "views/company/dialogs/assignReviewers.html",
                                    controller: function CustomController($scope, $mdDialog, invitation, assignedReviewers, selectedIndexes) {
                                        $scope.invitation = invitation;
                                        $scope.assignedReviewers = assignedReviewers;
                                        $scope.selectedIndexes = selectedIndexes;
                                        $scope.closeDialog = function () {
                                            $mdDialog.hide();
                                        };
                                        $scope.save = function (invitation, reviewers) {
                                            $mdDialog.hide({ invitation: invitation, reviewers: reviewers });
                                        };
                                    },
                                    controllerAs: "reviewers",
                                    parent: angular.element(document.body),
                                    locals: {
                                        invitation: invitation, assignedReviewers: assignedReviewers,
                                        selectedIndexes: this.selectedIndexes
                                    },
                                    clickOutsideToClose: true,
                                    escapeToClose: true,
                                }).then(function (answer) { return _this.assignReviewersToCandidate(answer.invitation, answer.reviewers); });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.assignReviewersToCandidate = function (invitation, reviewers) { return __awaiter(_this, void 0, void 0, function () {
                    var checkedReviewers, assignReviewersDTO;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                checkedReviewers = reviewers.filter(function (r) { return r.checked; }).map(function (r) { return r.name; });
                                assignReviewersDTO = {
                                    endUserIds: this.reviewers
                                        .filter(function (r) { return checkedReviewers.includes(r.name); })
                                        .map(function (r) { return r.guid; })
                                };
                                return [4 /*yield*/, this.invitationsService.assignReviewersToCandidate(invitation.guid, assignReviewersDTO)];
                            case 1:
                                _a.sent();
                                invitation.reviewers = invitation.reviewers
                                    .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                                return [4 /*yield*/, this.list()];
                            case 2:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.openCandidateRating = function (invitation) {
                    _this.$state.go("root.company.candidatedetails", {
                        interviewId: _this.interviewId,
                        applicationId: invitation.guid
                    }, { reload: true });
                };
                this.showToastMessage = function (message) { return _this.$mdToast.show(_this.$mdToast
                    .simple()
                    .textContent(message)
                    .position("top left")
                    .hideDelay(1000)
                    .theme("toasttheme")); };
                this.getReadableDate = function (date) { return new Date(date).toLocaleDateString('en-GB', {
                    day: '2-digit', month: '2-digit', year: 'numeric', timeZone: 'UTC'
                }); }; //.replace(/ /g, '-');
                this.statuses = [];
                this.statuses.push({ name: "Interview Recorded", selected: true }, { name: "Incomplete Recording Attempt", selected: true }, { name: "Pending Recording", selected: true });
                this.interviewId = $stateParams.interviewId;
                this.showInviteCandidate = false;
                if (!JSON.parse(sessionStorage.getItem("system_modules")).hasOwnProperty("Applicant ID")) {
                    this.applicantId = "None";
                }
                this.currentPage = 0;
                this.totalElements = 0;
                this.pageSize = 10;
            }
            CandidatesController.prototype.list = function () {
                var _this = this;
                this.$http.get("/company/invitations/paged/" + this.interviewId, { params: { page: this.currentPage, pagesize: this.pageSize } }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    _this.lastCalledSearch = 'list';
                    _this.totalResults = result.data.totalElements;
                    for (var _i = 0, _a = _this.invitations; _i < _a.length; _i++) {
                        var invitation = _a[_i];
                        invitation.status = _this.getInvitationStatus(invitation);
                        invitation.reviewers = invitation.reviewers
                            .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                    }
                }, function (error) {
                    _this.showToastMessage('There was an issue retrieving the interview invitations');
                    Rollbar.error(error);
                });
            };
            CandidatesController.prototype.previousPage = function () {
                var _this = this;
                this.currentPage = this.currentPage - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/invitations/paged/" + this.interviewId, { params: params }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    for (var _i = 0, _a = _this.invitations; _i < _a.length; _i++) {
                        var invitation = _a[_i];
                        invitation.status = _this.getInvitationStatus(invitation);
                        invitation.reviewers = invitation.reviewers
                            .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidatesController.prototype.nextPage = function () {
                var _this = this;
                this.currentPage = this.currentPage + 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/invitations/paged/" + this.interviewId, { params: params }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    for (var _i = 0, _a = _this.invitations; _i < _a.length; _i++) {
                        var invitation = _a[_i];
                        invitation.status = _this.getInvitationStatus(invitation);
                        invitation.reviewers = invitation.reviewers
                            .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidatesController.prototype.reloadPage = function () {
                var _this = this;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/invitations/paged/" + this.interviewId, { params: params }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    for (var _i = 0, _a = _this.invitations; _i < _a.length; _i++) {
                        var invitation = _a[_i];
                        invitation.status = _this.getInvitationStatus(invitation);
                        invitation.reviewers = invitation.reviewers
                            .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidatesController.prototype.getPagesArray = function (num) {
                var array = [];
                for (var i = 1; i <= num; i++) {
                    array.push(i);
                }
                return array;
            };
            CandidatesController.prototype.selectedPage = function () {
                var _this = this;
                this.currentPage = this.selectedPageNumber - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.selectedPageNumber - 1, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/invitations/paged/" + this.interviewId, { params: params }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    for (var _i = 0, _a = _this.invitations; _i < _a.length; _i++) {
                        var invitation = _a[_i];
                        invitation.status = _this.getInvitationStatus(invitation);
                        invitation.reviewers = invitation.reviewers
                            .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidatesController.prototype.resultsPerPageChanged = function () {
                this.list();
            };
            CandidatesController.prototype.isSelected = function (i) {
                return this.selectedInvitations.some(function (_a) {
                    var guid = _a.guid;
                    return guid == i.guid;
                });
                //return this.selectedInvitationIds.indexOf(i.guid) !== -1;
            };
            CandidatesController.prototype.addSelectedInvitation = function (inv) {
                this.selectedInvitations.push(inv);
                //this.selectedInvitationIds.push(inv.guid);
            };
            CandidatesController.prototype.selectAllInvitations = function () {
                for (var _i = 0, _a = this.invitations; _i < _a.length; _i++) {
                    var invitation = _a[_i];
                    if (!this.isSelected(invitation)) {
                        this.selectedInvitations.push(invitation);
                    }
                }
                //this.selectedInvitationIds.push(inv.guid);
            };
            CandidatesController.prototype.removeSelectedInvitation = function (inv) {
                var index = this.selectedInvitations.map(function (e) { return e.guid; }).indexOf(inv.guid);
                //let index = this.selectedInvitationIds.indexOf(inv.guid);
                this.selectedInvitations.splice(index, 1);
                //this.selectedInvitationIds.splice(index, 1);
            };
            CandidatesController.prototype.toggleSelectReviewer = function (mem) {
                console.info("Toggle reviewer" + mem.isChecked);
                if (mem.isChecked) {
                    this.selectedReviewers.push(mem);
                }
                else {
                    var index = this.selectedReviewers.indexOf(mem);
                    this.selectedReviewers.splice(index, 1);
                }
            };
            CandidatesController.prototype.clickAssignReviewers = function () {
                this.showSelectReviewers = true;
            };
            CandidatesController.prototype.clickCancelAssignReviewers = function () {
                this.showSelectReviewers = false;
                this.teamMembers.map(function (invitation) {
                    delete invitation.isChecked;
                });
                this.selectedInvitations = [];
                this.selectedReviewers = [];
            };
            CandidatesController.prototype.clickExtendDeadline = function () {
                this.showExtendDeadline = true;
            };
            CandidatesController.prototype.clickCancelExtendDeadline = function () {
                this.showExtendDeadline = false;
                this.selectedInvitations = [];
            };
            CandidatesController.prototype.toggleOption = function (item) {
                if (item.selected) {
                    item.selected = false;
                    this.filterByStatus();
                }
                else {
                    item.selected = true;
                    this.filterByStatus();
                }
            };
            CandidatesController.prototype.filterByStatus = function () {
                var _this = this;
                this.invitations = _.filter(this.invitations, function (obj) {
                    for (var _i = 0, _a = _this.statuses; _i < _a.length; _i++) {
                        var status_1 = _a[_i];
                        if (status_1.selected) {
                            if (status_1.name === obj.status) {
                                return true;
                            }
                        }
                    }
                    return false;
                });
            };
            CandidatesController.prototype.filter = function () {
                var _this = this;
                if (this.search != "") {
                    this.invitations = _.filter(this.allInvitations, function (obj) {
                        return (obj.candidatename
                            .toLowerCase()
                            .indexOf(_this.search.toLowerCase()) !== -1 ||
                            obj.candidateemail
                                .toLowerCase()
                                .indexOf(_this.search.toLowerCase()) !== -1);
                    });
                }
                else {
                    this.invitations = this.allInvitations;
                }
            };
            CandidatesController.prototype.sortResultsAscending = function () {
                this.orderVariable = "creationDate";
            };
            CandidatesController.prototype.sortResultsDescending = function () {
                this.orderVariable = "-creationDate";
            };
            CandidatesController.prototype.clearSearch = function () {
                this.disableSearch = false;
                this.searchText = "";
                this.selectedSearchCriteria = "ALL";
                this.currentPage = 0;
                this.list();
            };
            CandidatesController.prototype.searchInvitations = function () {
                var _this = this;
                this.currentPage = 0;
                this.disableSearch = true;
                this.$http.get("/company/invitations/paged/" + this.interviewId, { params: { page: this.currentPage, pagesize: this.pageSize, search: this.selectedSearchCriteria, searchtext: this.searchText } }).then(function (result) {
                    var recordingList = result.data.invitationDTOS;
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    _this.lastCalledSearch = 'search';
                    _this.totalResults = result.data.totalElements;
                    for (var _i = 0, _a = _this.invitations; _i < _a.length; _i++) {
                        var invitation = _a[_i];
                        invitation.status = _this.getInvitationStatus(invitation);
                        invitation.reviewers = invitation.reviewers
                            .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidatesController.prototype.showOpenInviteLink = function () {
                this.linkDialog = this.$mdDialog
                    .show({
                    controller: CandidatesController,
                    controllerAs: "candidates",
                    bindToController: true,
                    templateUrl: "views/company/dialogs/share-link.html",
                    parent: angular.element(document.body),
                    locals: { openInviteLink: this.openInviteLink },
                    clickOutsideToClose: true,
                    escapeToClose: true
                    // Only for -xs, -sm breakpoints.
                })
                    .then(function () {
                    console.debug("You clicked the button to close the bottom sheet");
                })
                    .catch(function () {
                    console.debug("You clicked cancel button");
                });
            };
            CandidatesController.prototype.copyToClipBoard = function () {
                var element = document.getElementById("unique-link");
                element.select();
                document.execCommand("Copy");
                this.$mdToast.show(this.$mdToast
                    .simple()
                    .textContent("Copied to Clipboard")
                    .hideDelay(10000)
                    .position("top left")
                    .theme("toasttheme"));
            };
            CandidatesController.prototype.cancel = function () {
                this.$mdDialog.hide();
            };
            CandidatesController.prototype.toggleInviteCandidate = function () {
                this.showInviteCandidate = !this.showInviteCandidate;
            };
            CandidatesController.prototype.reinvite = function (invitationId) {
                var _this = this;
                this.$http.put("/company/invitations/reinvite/" + invitationId, {}).then(function (result) {
                    _this.showToastMessage("Invitation Sent Again");
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidatesController.prototype.uninvite = function (invitation) {
                var _this = this;
                var dialog = this.$mdDialog
                    .confirm()
                    .title("Are you sure?")
                    .textContent("The invitation will be deleted and the candidate won't be able to record the interview")
                    .ok("UNINVITE")
                    .cancel("CANCEL")
                    .theme("confirmdialog");
                this.$mdDialog.show(dialog).then(function () { return __awaiter(_this, void 0, void 0, function () {
                    var deletedInvitation, error_17;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.invitationsService.deleteInterviewInvitation(invitation.guid)];
                            case 1:
                                deletedInvitation = _a.sent();
                                this.invitations.splice(this.invitations.indexOf(deletedInvitation), 1);
                                this.showToastMessage('Invitation Deleted');
                                return [3 /*break*/, 3];
                            case 2:
                                error_17 = _a.sent();
                                this.showToastMessage(error_17.data.message);
                                Rollbar.error(error_17);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); });
            };
            CandidatesController.$inject = [
                "$http",
                "$scope",
                "$window",
                "$mdToast",
                "$state",
                "$stateParams",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "company.interviewsService",
                "company.invitationsService",
                "$mdMenu",
                "roleConstants",
                "candidate.invitationsService",
                "company.reportsService"
            ];
            return CandidatesController;
        }());
        app.controller("company.CandidatesController", CandidatesController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var InfiniteRecordings = /** @class */ (function () {
            function InfiniteRecordings($http) {
                this.$http = $http;
                this.pageNumber = 0;
                this.recordings = [];
                this.numLoaded = 0;
                this.toLoad = 0;
                this.hasMoreToLoad = true;
            }
            InfiniteRecordings.prototype.getItemAtIndex = function (index) {
                if (index > this.numLoaded) {
                    this.fetchMoreInterviews(index);
                    return null;
                }
                return this.recordings[index];
            };
            InfiniteRecordings.prototype.getLength = function () {
                return this.numLoaded + 5;
            };
            InfiniteRecordings.prototype.fetchMoreInterviews = function (index) {
                var _this = this;
                if (this.toLoad < index && this.hasMoreToLoad) {
                    this.$http.get('/company/interviews/paged', { params: { page: this.pageNumber, pagesize: 50 } }).then(function (result) {
                        _this.recordings = _this.recordings.concat(result.data);
                        _this.numLoaded = _this.toLoad;
                        if (result.data.length < 1) {
                            _this.hasMoreToLoad = false;
                            _this.toLoad += 5;
                        }
                        _this.pageNumber = +1;
                    });
                }
            };
            return InfiniteRecordings;
        }());
        Company.InfiniteRecordings = InfiniteRecordings;
        var RecordingsController = /** @class */ (function () {
            function RecordingsController($http, $mdToast, $state, $stateParams, SessionService, $mdDialog, $timeout, $scope, interviewsService, CompanyRecordingsService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.$scope = $scope;
                this.interviewsService = interviewsService;
                this.CompanyRecordingsService = CompanyRecordingsService;
                this.search = "";
                this.orderVariable = "-recordingDate";
                this.selectedPageNumber = 1;
                this.pageOptions = [10, 20, 50, 100];
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a;
                    var _this = this;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0: return [4 /*yield*/, this.list()];
                            case 1:
                                _b.sent();
                                this.$http
                                    .get("/company/details-by-interview/" + this.interviewId)
                                    .then(function (result) {
                                    _this.roleCompany = result.data;
                                });
                                _a = this;
                                return [4 /*yield*/, this.interviewsService.getInterviews()];
                            case 2:
                                _a.interview = (_b.sent()).find(function (i) { return i.guid === _this.interviewId; });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.feedbackEnabled = function (recording) {
                    return recording.candidateFeedback != null ||
                        recording.candidateFeedBackQ1 !== null || recording.candidateFeedBackQ1 !== undefined ||
                        recording.candidateFeedBackQ2 !== null || recording.candidateFeedBackQ2 !== undefined ||
                        recording.candidateFeedBackQ3 !== null || recording.candidateFeedBackQ3 !== undefined;
                };
                this.watchRecording = function (recording) {
                    _this.$state.go('root.company.player', {
                        recording: recording,
                        interviewId: _this.interviewId,
                        recordings: [recording],
                        invitationid: recording.invitationId
                    });
                };
                this.cancel = function () { return _this.$mdDialog.hide(); };
                this.listNoPaging = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, error_18;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 2, , 3]);
                                _a = this;
                                return [4 /*yield*/, this.CompanyRecordingsService.getInterviewRecordings(this.interviewId)];
                            case 1:
                                _a.recordingsList = _b.sent();
                                this.allRecordingsList = JSON.parse(JSON.stringify(this.recordingsList));
                                this.updateDom();
                                return [3 /*break*/, 3];
                            case 2:
                                error_18 = _b.sent();
                                this.$mdToast.showSimple("Some error has happened. See console for details");
                                Rollbar.error(error_18);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.isBlank = function (s) { return s != null; };
                this.updateDom = function () {
                    if (!_this.$scope.$$phase)
                        _this.$scope.$apply();
                };
                this.interviewId = $stateParams.interviewId;
                this.currentPage = 0;
                this.totalElements = 0;
                this.pageSize = 1;
            }
            RecordingsController.prototype.ratedOne = function (rating, recording) {
                rating.value = 1;
            };
            RecordingsController.prototype.ratedZero = function (rating, recording) {
                rating.value = 0;
            };
            RecordingsController.prototype.ratedTwo = function (rating, recording) {
                rating.value = 2;
            };
            RecordingsController.prototype.ratedThree = function (rating, recording) {
                rating.value = 3;
            };
            RecordingsController.prototype.ratedFour = function (rating, recording) {
                rating.value = 4;
            };
            RecordingsController.prototype.ratedFive = function (rating, recording) {
                rating.value = 5;
            };
            RecordingsController.prototype.getNumber = function (num) {
                return new Array(num);
            };
            RecordingsController.prototype.getIcon = function (rating, index) {
                if (angular.isUndefined(rating.value) || rating.value < index + 1) {
                    return "star_border";
                }
                else if (rating.value >= index + 1) {
                    return "star";
                }
            };
            RecordingsController.prototype.rated = function (rating, value) {
                rating.value = value;
            };
            RecordingsController.prototype.showCandidateFeedback = function (recording) {
                this.linkDialog = this.$mdDialog
                    .show({
                    controller: RecordingsController,
                    controllerAs: "recordings",
                    bindToController: true,
                    templateUrl: "views/company/dialogs/candidate-feedback.html",
                    parent: angular.element(document.body),
                    locals: { feedback: recording.candidateFeedback },
                    clickOutsideToClose: true,
                    escapeToClose: true
                })
                    .then(function () {
                    console.debug("You clicked the button to close the bottom sheet");
                })
                    .catch(function () {
                    console.debug("You clicked cancel button");
                });
            };
            RecordingsController.prototype.showRatingsDialog = function (recording) {
                var _this = this;
                if (recording.interviewVersion === 1) {
                    this.ratingsDialog = this.$mdDialog
                        .show({
                        controller: RecordingsController,
                        controllerAs: "recordings",
                        bindToController: true,
                        templateUrl: "views/company/dialogs/rating.html",
                        parent: angular.element(document.body),
                        locals: { currentRecording: recording },
                        clickOutsideToClose: true,
                        escapeToClose: true
                        // Only for -xs, -sm breakpoints.
                    })
                        .then(function () {
                        console.debug("You clicked the button to close the bottom sheet");
                    })
                        .catch(function () {
                        console.debug("You clicked cancel button");
                    });
                }
                else {
                    this.$http
                        .get("/company/ratings/rating-dimensions/" + recording.interviewId)
                        .then(function (result) {
                        _this.ratingDimensions = result.data;
                        if (result.data.length < 1) {
                            _this.hasDimensionsSet = false;
                        }
                        else {
                            _this.hasDimensionsSet = true;
                        }
                        if (_this.hasDimensionsSet) {
                            _this.ratingsDialog = _this.$mdDialog
                                .show({
                                controller: RecordingsController,
                                controllerAs: "recording",
                                bindToController: true,
                                templateUrl: "views/company/dialogs/oneway-recordings-rating.html",
                                parent: angular.element(document.body),
                                locals: {
                                    ratings: _this.ratingDimensions,
                                    recording: recording
                                },
                                clickOutsideToClose: true,
                                escapeToClose: true
                                // Only for -xs, -sm breakpoints.
                            })
                                .then(function () {
                                console.debug("You clicked the button to close the bottom sheet");
                            })
                                .catch(function () {
                                console.debug("You clicked cancel button");
                            });
                        }
                        else {
                            _this.$mdToast.showSimple("Please set the rating dimensions in the settings for this interview");
                        }
                    });
                }
            };
            RecordingsController.prototype.saveRating = function (recording) {
                var _this = this;
                var comments;
                if (angular.isUndefined(this.comment)) {
                    comments = " ";
                }
                else {
                    comments = this.comment;
                }
                for (var _i = 0, _a = this.ratings; _i < _a.length; _i++) {
                    var rating = _a[_i];
                    if (rating.value == null) {
                        rating.value = 0;
                    }
                }
                var userRating = {
                    comment: comments,
                    ratingDimensionDTOList: this.ratings
                };
                this.$http.post("/company/ratings/rate/" + recording.recordingId, userRating)
                    .then(function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                recording.hasRated = true;
                                return [4 /*yield*/, this.list()];
                            case 1:
                                _a.sent();
                                this.$http
                                    .get("/company/ratings/get-rating-by-user/" + recording.recordingId)
                                    .then(function (result) {
                                    recording.userRatings = result.data;
                                });
                                this.$mdDialog.hide();
                                return [2 /*return*/];
                        }
                    });
                }); }, function (error) {
                    Rollbar.error(error);
                });
            };
            RecordingsController.prototype.rate = function () {
                var _this = this;
                this.rating = {
                    comment: this.currentRecording.comment,
                    ratings: this.currentRecording.userRatings
                };
                this.$http
                    .post("/company/recordings/rate/" + this.currentRecording.recordingId, this.rating)
                    .then(function () {
                    _this.currentRecording.userComment = _this.currentRecording.comment;
                    _this.currentRecording.hasRated = true;
                    var ratings = _this.currentRecording.averageRatings;
                    if (_this.currentRecording.hasRatings) {
                        for (var i = 0; i < _this.currentRecording.averageRatings.length; i++) {
                            ratings[i].dimensionName = _this.currentRecording.averageRatings[i].dimensionName;
                            ratings[i].ratingTypeId = _this.currentRecording.averageRatings[i].ratingTypeId;
                            ratings[i].value =
                                _this.currentRecording.averageRatings[i].value *
                                    _this.currentRecording.reviewersCount;
                        }
                        var sumOfAverage = 0;
                        for (var i = 0; i < _this.currentRecording.userRatings.length; i++) {
                            for (var j = 0; j < ratings.length; j++)
                                if (ratings[j].ratingTypeId ===
                                    _this.currentRecording.userRatings[i].ratingTypeId) {
                                    var newAverage = (ratings[j].value +
                                        _this.currentRecording.userRatings[i].value) /
                                        (_this.currentRecording.reviewersCount + 1);
                                    ratings[j].value = newAverage;
                                    sumOfAverage += newAverage;
                                }
                        }
                        _this.currentRecording.averageRatings = ratings;
                        _this.currentRecording.sumOfAverageRatings = sumOfAverage;
                    }
                    else {
                        if (_this.currentRecording.reviewersCount == 0) {
                            _this.currentRecording.reviewersCount = 1;
                            _this.currentRecording.averageRatings = _this.currentRecording.userRatings;
                            _this.currentRecording.hasRatings = true;
                            for (var i = 0; i < _this.currentRecording.userRatings.length; i++) {
                                _this.currentRecording.sumOfAverageRatings += _this.currentRecording.userRatings[i].value;
                            }
                        }
                    }
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Ratings Submitted")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.$mdDialog.hide();
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            RecordingsController.prototype.filter = function () {
                var _this = this;
                if (this.search != null) {
                    this.recordingsList = this.allRecordingsList
                        .filter(function (obj) { return (obj.candidateName.toLowerCase().indexOf(_this.search.toLowerCase()) !== -1); });
                }
                else {
                    this.recordingsList = this.allRecordingsList;
                }
            };
            RecordingsController.prototype.list = function () {
                var _this = this;
                this.$http.get("/company/recordings/paged/", { params: { interviewid: this.interviewId, page: this.currentPage, pagesize: this.pageSize } }).then(function (result) {
                    _this.recordingsList = result.data.recordingDTOS;
                    _this.allRecordingsList = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    //this.lastCalledSearch = 'list';
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            RecordingsController.prototype.previousPage = function () {
                var _this = this;
                this.currentPage = this.currentPage - 1;
                var params = { interviewid: this.interviewId, page: this.currentPage, pagesize: this.pageSize };
                this.$http.get("/company/interviews/paged", { params: params }).then(function (result) {
                    _this.recordingsList = result.data.recordingDTOS;
                    _this.allRecordingsList = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            RecordingsController.prototype.nextPage = function () {
                var _this = this;
                this.currentPage = this.currentPage + 1;
                var params = { interviewid: this.interviewId, page: this.currentPage, pagesize: this.pageSize };
                this.$http.get("/company/interviews/paged", { params: params }).then(function (result) {
                    _this.recordingsList = result.data.recordingDTOS;
                    _this.allRecordingsList = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            RecordingsController.prototype.reloadPage = function () {
                var _this = this;
                var params = { interviewid: this.interviewId, page: this.currentPage, pagesize: this.pageSize };
                this.$http.get("/company/interviews/paged", { params: params }).then(function (result) {
                    _this.recordingsList = result.data.recordingDTOS;
                    _this.allRecordingsList = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            RecordingsController.prototype.getPagesArray = function (num) {
                var array = [];
                for (var i = 1; i <= num; i++) {
                    array.push(i);
                }
                return array;
            };
            RecordingsController.prototype.selectedPage = function () {
                var _this = this;
                this.currentPage = this.selectedPageNumber - 1;
                this.$http.get("/company/interviews/paged", { params: { interviewid: this.interviewId, page: this.selectedPageNumber - 1, pagesize: this.pageSize } }).then(function (result) {
                    _this.recordingsList = result.data.recordingDTOS;
                    _this.allRecordingsList = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            RecordingsController.prototype.milliSecondsToMMSS = function (t) {
                if (isNaN(t))
                    return "00:00";
                t = Math.floor(t / 1000);
                var minutes = Math.floor(t / 60.0);
                var seconds = Math.floor(t % 60);
                return ((minutes < 10 ? "0" : "") +
                    minutes +
                    ":" +
                    (seconds < 10 ? "0" : "") +
                    seconds);
            };
            RecordingsController.$inject = [
                "$http",
                "$mdToast",
                "$state",
                "$stateParams",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "$scope",
                "company.interviewsService",
                "company.recordingsService"
            ];
            return RecordingsController;
        }());
        app.controller("company.RecordingsController", RecordingsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var PlayerController = /** @class */ (function () {
            function PlayerController($http, $mdToast, $window, $scope, $rootScope, $state, $stateParams, $location, $anchorScroll, $mdDialog, interviewsService, ratingsService, recordingsService, SessionService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$window = $window;
                this.$scope = $scope;
                this.$rootScope = $rootScope;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$location = $location;
                this.$anchorScroll = $anchorScroll;
                this.$mdDialog = $mdDialog;
                this.interviewsService = interviewsService;
                this.ratingsService = ratingsService;
                this.recordingsService = recordingsService;
                this.SessionService = SessionService;
                this.SCORES = [
                    { label: '1 - Very Poor', field: 'oneStarDefinition', value: 1 },
                    { label: '2 - Poor', field: 'twoStarDefinition', value: 2 },
                    { label: '3 - Fair', field: 'threeStarDefinition', value: 3 },
                    { label: '4 - Good', field: 'fourStarDefinition', value: 4 },
                    { label: '5 - Excellent', field: 'fiveStarDefinition', value: 5 }
                ];
                this.duration = 0;
                this.currentTime = 0;
                this.currentRecordingIndex = 0;
                this.alreadyRated = false;
                this.playbackSpeed = 1;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b, recordings, i, _c, error_19;
                    var _this = this;
                    return __generator(this, function (_d) {
                        switch (_d.label) {
                            case 0:
                                _a = this;
                                return [4 /*yield*/, this.interviewsService.getInterviews()];
                            case 1:
                                _a.interview = (_d.sent()).find(function (i) { return i.guid === _this.interviewId; });
                                _b = this;
                                return [4 /*yield*/, this.ratingsService.getRatingDimensions(this.invitationid)];
                            case 2:
                                _b.ratingDimensions = (_d.sent());
                                return [4 /*yield*/, this.$http.get("/company/recordings/?interviewid=" + this.interviewId)];
                            case 3:
                                recordings = (_d.sent()).data;
                                this.recording = recordings.find(function (r) { return r.invitationId === _this.invitationid; });
                                this.answers = this.recording.videoResponses;
                                for (i = 0; i < this.answers.length; i++) {
                                    this.answers[i].indexNumber = i;
                                }
                                this.currentRecordingIndex = 0;
                                this.currentAnswer = this.answers[0];
                                this.currentAnswer.videoURL = this.getVideoURL();
                                this.currentAnswer.videoType = this.getVideoType();
                                this.currentCompetency = this.ratingDimensions.find(function (r) { return r.competencyName === _this.currentAnswer.competencyName; });
                                _d.label = 4;
                            case 4:
                                _d.trys.push([4, 6, , 7]);
                                _c = this;
                                return [4 /*yield*/, this.ratingsService.getUserAverageRating(this.invitationid)];
                            case 5:
                                _c.ratings = _d.sent();
                                return [3 /*break*/, 7];
                            case 6:
                                error_19 = _d.sent();
                                Rollbar.log("Not rated yet");
                                this.ratings = [];
                                return [3 /*break*/, 7];
                            case 7:
                                this.rating = this.getCurrentRatingScore(this.currentAnswer);
                                if (this.rating > 0)
                                    this.alreadyRated = true;
                                this.duration = 0;
                                this.videoElement = document.getElementById("player");
                                if (is.ios() && is.safari()) {
                                    this.updateDom();
                                }
                                this.videoElement.addEventListener("loadeddata", this.handleLoadedData, true);
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.watchWrittenAnswers = function (recording) { return _this.$state.go('root.company.essayanswerrs', {
                    interviewId: _this.interviewId, invitationid: recording.invitationId
                }); };
                this.getVideoURL = function () { return _this.currentAnswer.mp4URL || _this.currentAnswer.webmURL; };
                this.getVideoType = function () { return _this.getVideoURL().search(".*webm$") === -1 ? 'video/mp4' : 'video/webm'; };
                this.getCurrentRatingScore = function (response) {
                    if (_this.ratings.length > 0) {
                        var currentRating = _this.ratings.find(function (rating) { return rating.answerId === response.answerId; });
                        return currentRating ? currentRating.yourScore : 0;
                    }
                    return 0;
                };
                this.handleLoadedData = function (event) {
                    _this.updateDom();
                };
                this.handleSeekingEvent = function (event) {
                    _this.updateDom();
                };
                this.handleMetaData = function (event) {
                    _this.duration = event.target.duration;
                };
                this.handleTimeUpdateEvent = function (event) {
                    _this.currentVideoPercentage =
                        100.0 * event.target.currentTime / _this.duration;
                    _this.currentTime = event.target.currentTime;
                    _this.updateDom();
                    if (angular.isDefined(_this.currentAnswer) && angular.isDefined(_this.currentAnswer.endtime)) {
                        if (_this.currentTime >= _this.currentAnswer.endtime) {
                            _this.currentAnswer = _this.answers[_this.currentAnswer.indexNumber + 1];
                            _this.updateDom();
                        }
                    }
                };
                this.handleSeekEvent = function (event) {
                    _this.updateDom();
                    _this.currentVideoPercentage =
                        100.0 * _this.videoElement.currentTime / _this.duration;
                    _this.currentTime = _this.videoElement.currentTime;
                    for (var i = 0; i < _this.answers.length; i++) {
                        if (_this.currentTime >= _this.answers[i].starttime && _this.currentTime < _this.answers[i].endtime) {
                            _this.currentAnswer = _this.answers[i];
                        }
                    }
                };
                this.getRatingDescription = function (score) {
                    if (!_this.currentCompetency)
                        return '';
                    return _this.currentCompetency[score.field];
                };
                this.showFlagDialog = function (recording, event) {
                    _this.flagDialog = _this.$mdDialog
                        .show({
                        controller: PlayerController,
                        controllerAs: "player",
                        bindToController: true,
                        templateUrl: "views/company/dialogs/flag-interview.html",
                        parent: angular.element(document.body),
                        locals: {
                            flagReason: _this.flagReason,
                            recording: recording
                        },
                        clickOutsideToClose: true,
                        escapeToClose: true
                    });
                };
                this.flagRecording = function () { return __awaiter(_this, void 0, void 0, function () {
                    var error_20;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.recordingsService.flagRecording(this.invitationid, this.flagReason)];
                            case 1:
                                _a.sent();
                                this.$mdDialog.cancel(this.flagDialog);
                                this.showToastMessage('Record successfully flagged');
                                this.$state.reload();
                                return [3 /*break*/, 3];
                            case 2:
                                error_20 = _a.sent();
                                this.showToastMessage('There was an issue while flagging this recording');
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.showToastMessage = function (message) { return _this.$mdToast.show(_this.$mdToast.simple()
                    .position("bottom right")
                    .textContent(message)
                    .hideDelay(10000)
                    .theme("toasttheme")); };
                var query = Modernizr.mq('(max-width: 600px)');
                if (query) {
                    this.$location.hash("player-next-button");
                    this.$anchorScroll();
                }
                else {
                    $("#player-view").height($window.innerHeight - 96);
                    $window.addEventListener("resize", function () {
                        $("#player-view").height($window.innerHeight - 96);
                    });
                }
                this.interviewId = $stateParams.interviewId;
                this.invitationid = $stateParams.invitationid;
            }
            ;
            PlayerController.prototype.changePlaybackSpeed = function (speed) {
                if (speed >= 0.5 && speed <= 5) {
                    var player = document.getElementById("player");
                    player.playbackRate = speed;
                    player.play();
                    this.playbackSpeed = speed;
                }
            };
            PlayerController.prototype.jumpToAnswer = function (answer) {
                var _this = this;
                this.currentAnswer = answer;
                this.currentAnswer.videoURL = this.getVideoURL();
                this.currentAnswer.videoType = this.getVideoType();
                this.rating = this.getCurrentRatingScore(this.currentAnswer);
                this.alreadyRated = this.rating > 0;
                this.currentCompetency = this.ratingDimensions.find(function (r) { return r.competencyName === _this.currentAnswer.competencyName; });
                this.updateDom();
            };
            PlayerController.prototype.jumpToCandidate = function (recordingIndex) {
                var _this = this;
                this.recording = this.recordings[recordingIndex];
                this.videoElement.removeEventListener("timeupdate", this.handleTimeUpdateEvent, true);
                this.videoElement.removeEventListener("loadedmetadata", this.handleMetaData, true);
                this.videoElement.removeEventListener("seeked", this.handleSeekEvent, true);
                this.videoElement.removeEventListener("seeking", this.handleSeekingEvent, true);
                this.currentRecordingIndex = recordingIndex;
                this.videoElement.pause();
                this.videoElement.src = this.recording.videoURL;
                this.$http.get("/company/recordings/answers/" + this.recording.recordingId)
                    .then(function (result) {
                    _this.answers = result.data;
                    for (var i = 0; i < _this.answers.length; i++) {
                        _this.answers[i].indexNumber = i;
                    }
                    _this.currentAnswer = _this.answers[_this.currentAnswer.indexNumber];
                    _this.videoElement.currentTime = _this.currentAnswer.starttime;
                    _this.currentTime = _this.currentAnswer.starttime;
                    var duration = _this.answers[_this.answers.length - 1].endtime;
                    _this.duration = duration;
                    _this.currentVideoPercentage =
                        100.0 * _this.currentTime / duration;
                    _this.updateDom();
                });
            };
            PlayerController.prototype.saveRating = function (recording) {
                return __awaiter(this, void 0, void 0, function () {
                    var userRating, _a, next;
                    var _this = this;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                userRating = {
                                    competencyDimensionId: this.currentCompetency.competencyDimensionId,
                                    comment: '',
                                    rating: this.rating
                                };
                                return [4 /*yield*/, this.ratingsService.postRating(this.currentAnswer.answerId, userRating)];
                            case 1:
                                _b.sent();
                                _a = this;
                                return [4 /*yield*/, this.ratingsService.getUserAverageRating(this.invitationid)];
                            case 2:
                                _a.ratings = _b.sent();
                                this.alreadyRated = this.rating > 0;
                                this.updateDom();
                                this.showToastMessage('Rating saved successfully');
                                if (this.answers.indexOf(this.currentAnswer) < this.answers.length - 1) {
                                    next = this.answers.indexOf(this.currentAnswer) + 1;
                                    if (next) {
                                        this.jumpToAnswer(this.answers[next]);
                                    }
                                }
                                this.$http.get("/company/recordings/paged/", { params: { interviewid: this.interviewId, search: 'uuid', searchtext: this.invitationid } }).then(function (result) {
                                    if (result.data && result.data.recordingDTOS && result.data.recordingDTOS[0].reviewedByYou) {
                                        result.data.recordingDTOS[0].tempCount = 0;
                                        _this.$rootScope.$emit("OpenRating", result.data.recordingDTOS[0]);
                                    }
                                });
                                return [2 /*return*/];
                        }
                    });
                });
            };
            PlayerController.prototype.cancel = function () {
                this.$mdDialog.hide();
            };
            PlayerController.prototype.seek = function () {
                var newTime = Math.floor(this.currentVideoPercentage * this.duration / 100);
                if (!isNaN(newTime)) {
                    this.videoElement.currentTime = newTime || 0;
                }
            };
            PlayerController.prototype.play = function () {
                if (this.videoElement.paused) {
                    this.videoElement.play();
                    this.videoElement.addEventListener("timeupdate", this.handleTimeUpdateEvent, true);
                    this.videoElement.addEventListener("loadedmetadata", this.handleMetaData, true);
                    this.videoElement.addEventListener("seeking", this.handleSeekingEvent, true);
                    this.videoElement.addEventListener("seeked", this.handleSeekEvent, true);
                }
                else {
                    this.videoElement.pause();
                }
            };
            PlayerController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            PlayerController.prototype.mute = function () {
                if (this.videoElement.muted) {
                    this.videoElement.muted = false;
                }
                else {
                    this.videoElement.muted = true;
                }
            };
            PlayerController.prototype.secondsToMMSS = function (t) {
                if (isNaN(t)) {
                    return "00:00";
                }
                var minutes = Math.floor(t / 60.0);
                var seconds = Math.floor(t % 60);
                return ((minutes < 10 ? "0" : "") +
                    minutes +
                    ":" +
                    (seconds < 10 ? "0" : "") +
                    seconds);
            };
            PlayerController.prototype.goBack = function () {
                window.history.back();
            };
            PlayerController.prototype.getNumber = function (num) {
                return new Array(num);
            };
            PlayerController.prototype.getIcon = function (rating, index) {
                if (angular.isUndefined(rating.value) || rating.value < index + 1) {
                    return "star_border";
                }
                else if (rating.value >= index + 1) {
                    return "star";
                }
            };
            PlayerController.prototype.rated = function (rating, value) {
                rating.value = value;
            };
            PlayerController.$inject = [
                "$http", "$mdToast", "$window", "$scope", "$rootScope", "$state", "$stateParams", "$location", "$anchorScroll",
                "$mdDialog", "company.interviewsService", "company.ratingsService", "company.recordingsService",
                "SessionService"
            ];
            return PlayerController;
        }());
        app.controller("company.PlayerController", PlayerController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var ReportController = /** @class */ (function () {
            function ReportController($http, $mdToast, $scope, SessionService, $stateParams) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$stateParams = $stateParams;
                this.orderVariable = '';
                this.$onInit = function () { };
                this.interviewId = $stateParams.interviewId;
                this.$http.get("/company/details-by-interview/" + this.interviewId).then(function (result) {
                    _this.roleCompany = result.data;
                });
                $http.get("/company/reports/average/" + this.interviewId).then(function (result) {
                    _this.allData = _.cloneDeep(result.data);
                    _this.filteredData = _.cloneDeep(result.data);
                }, function (error) {
                    Rollbar.error(error);
                });
            }
            ReportController.prototype.getColor = function (index) {
                var i = index % 4;
                switch (i) {
                    case 0:
                        return "{'background': 'report-primary-500-1.0'}";
                    case 1:
                        return "{'background': 'report-accent-500-1.0'}";
                    case 2:
                        return "{'background': 'report-warn-500-1.0'}";
                    case 3:
                        return "{'background': 'report-background-500-1.0'}";
                }
            };
            ReportController.prototype.filter = function () {
                var _this = this;
                if (this.search != '') {
                    this.filteredData.candidateRatings = _.cloneDeep(_.filter(this.allData.candidateRatings, function (obj) {
                        return obj.candidateName.toLowerCase().indexOf(_this.search.toLowerCase()) !== -1;
                    }));
                }
                else {
                    this.filteredData = _.cloneDeep(this.allData);
                }
            };
            ReportController.$inject = ["$http", "$mdToast", "$scope", "SessionService", "$stateParams"];
            return ReportController;
        }());
        app.controller("company.ReportController", ReportController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var ReportDetailController = /** @class */ (function () {
            function ReportDetailController($http, $mdToast, $scope, SessionService, $stateParams) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$stateParams = $stateParams;
                this.orderVariable = '';
                this.$onInit = function () { };
                this.interviewId = $stateParams.interviewId;
                this.candidateId = $stateParams.candidateId;
                this.recordingId = $stateParams.recordingId;
                this.total = $stateParams.total;
                this.$http.get("/company/details-by-interview/" + this.interviewId).then(function (result) {
                    _this.roleCompany = result.data;
                });
                $http.get("/company/reports/details/" + this.interviewId + "/" + this.candidateId + "/" + this.recordingId).then(function (result) {
                    _this.insertTotal(result.data);
                    _this.allData = _.cloneDeep(result.data);
                    _this.filteredData = _.cloneDeep(result.data);
                }, function (error) {
                    Rollbar.error(error);
                });
            }
            ReportDetailController.prototype.getColor = function (index) {
                var i = index % 4;
                switch (i) {
                    case 0:
                        return "{'background': 'report-primary-500-1.0'}";
                    case 1:
                        return "{'background': 'report-accent-500-1.0'}";
                    case 2:
                        return "{'background': 'report-warn-500-1.0'}";
                    case 3:
                        return "{'background': 'report-background-500-1.0'}";
                }
            };
            ReportDetailController.prototype.filter = function () {
                var _this = this;
                if (this.search != '') {
                    this.filteredData.reviewerRatings = _.cloneDeep(_.filter(this.allData.reviewerRatings, function (obj) {
                        return obj.reviewerName.toLowerCase().indexOf(_this.search.toLowerCase()) !== -1;
                    }));
                }
                else {
                    this.filteredData = _.cloneDeep(this.allData);
                }
            };
            ReportDetailController.prototype.insertTotal = function (data) {
                data.reviewerRatings.forEach(function (value, index) {
                    var total = 0;
                    value.dimensions.forEach(function (v, i) {
                        total += v.value;
                    });
                    value.dimensions.unshift({
                        name: "Total",
                        value: total
                    });
                });
            };
            ReportDetailController.$inject = ["$http", "$mdToast", "$scope", "SessionService", "$stateParams"];
            return ReportDetailController;
        }());
        app.controller("company.ReportDetailController", ReportDetailController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var UploadController = /** @class */ (function () {
            function UploadController($http, $stateParams, $scope, $mdMedia, SessionService, CSVDownloadService, $mdToast) {
                var _this = this;
                this.$http = $http;
                this.$stateParams = $stateParams;
                this.$scope = $scope;
                this.$mdMedia = $mdMedia;
                this.SessionService = SessionService;
                this.CSVDownloadService = CSVDownloadService;
                this.$mdToast = $mdToast;
                this.$onInit = function () { };
                this.interviewId = $stateParams.interviewId;
                this.$http.get("/company/details-by-interview/" + this.interviewId)
                    .then(function (result) {
                    _this.roleCompany = result.data;
                });
                this.fileElement = document.getElementById("file");
                this.uploadReady = false;
                this.wrongFileType = false;
                this.updateDom();
                this.fileElement.onchange = function (ev) {
                    _this.file = _this.fileElement.files[0];
                    _this.fileReader.readAsText(_this.file);
                };
                this.fileReader = new FileReader();
                this.fileReader.onloadend = function (ev) {
                    if (/\.csv$/i.test(_this.file.name)) {
                        _this.wrongFileType = false;
                        _this.uploadReady = true;
                        _this.updateDom();
                    }
                    else {
                        _this.wrongFileType = true;
                        _this.uploadReady = false;
                        _this.updateDom();
                    }
                };
            }
            UploadController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            UploadController.prototype.upload = function () {
                var _this = this;
                this.formData = new FormData();
                this.formData.append('file', this.file);
                this.$http.post("/company/invitations/bulk-upload/" + this.interviewId, this.formData, {
                    transformRequest: angular.identity,
                    headers: {
                        'Content-Type': undefined
                    }
                }).then(function (result) {
                    _this.uploadResponse = result.data;
                    _this.fileElement.value = null;
                    _this.updateDom();
                    _this.uploadReady = false;
                    _this.wrongFileType = false;
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent(error.data.message)
                        .position('top left')
                        .hideDelay(10000)
                        .theme("toasttheme"));
                });
            };
            UploadController.prototype.downloadResponse = function () {
                var headersArrayList = ['applicantid', 'candidatename', 'candidateemail', 'resultText', 'resultMessage'];
                if (this.uploadResponse) {
                    this.CSVDownloadService.downloadFile(this.uploadResponse.failedRecords, 'BulkInvitationResult', headersArrayList);
                    //this.downloadFile(this.uploadResponse.uploadResults, 'BulkFlowResult');
                }
            };
            UploadController.$inject = ["$http", "$stateParams", "$scope", "$mdMedia", "SessionService", "company.CSVService", "$mdToast"];
            return UploadController;
        }());
        app.controller("company.UploadController", UploadController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var PlansController = /** @class */ (function () {
            function PlansController($http, SessionService, $state, $window, $mdDialog) {
                var _this = this;
                this.$http = $http;
                this.SessionService = SessionService;
                this.$state = $state;
                this.$window = $window;
                this.$mdDialog = $mdDialog;
                this.$onInit = function () { };
                Rollbar.info("User is on the plans page");
                this.monthlyPlans = [];
                this.yearlyPlans = [];
                this.$http.get("/company/signup/plans").then(function (result) {
                    angular.forEach(result.data, function (v, k) {
                        _this.monthlyPlans.push(v);
                    });
                }, function (error) {
                    Rollbar.error(JSON.stringify(error));
                });
            }
            PlansController.prototype.showContactForm = function () {
                this.$mdDialog.show({
                    controller: "company.ContactUsController",
                    controllerAs: "contact",
                    bindToController: true,
                    templateUrl: 'views/company/dialogs/contact-us.html',
                    parent: angular.element(document.body),
                    clickOutsideToClose: true,
                    escapeToClose: true
                }).then(function () {
                    console.debug("You clicked the button to close the bottom sheet");
                }).catch(function () {
                    console.debug("You clicked cancel button");
                });
            };
            PlansController.prototype.subscribe = function (plan) {
                if (this.SessionService.isCompany()) {
                    this.$state.go("root.company.braintree", { plan: plan });
                }
                else {
                    this.$state.go("root.company.signup", { plan: plan });
                }
            };
            PlansController.prototype.getColor = function (index) {
                var i = index % 4;
                switch (i) {
                    case 0:
                        return "{'color': 'report-accent-500-1.0'}";
                    case 1:
                        return "{'color': 'report-warn-500-1.0'}";
                    case 2:
                        return "{'color': 'report-background-500-1.0'}";
                    case 3:
                        return "{'color': 'report-warn-500-1.0'}";
                }
            };
            PlansController.prototype.scrollToTop = function () {
                this.$window.scrollTo(0, 0);
            };
            PlansController.$inject = ["$http", "SessionService", "$state", "$window", "$mdDialog"];
            return PlansController;
        }());
        app.controller("company.PlansController", PlansController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var SignupController = /** @class */ (function () {
            function SignupController($http, SessionService, $stateParams, $state, $mdToast, $scope, $mdDialog) {
                this.$http = $http;
                this.SessionService = SessionService;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.$mdDialog = $mdDialog;
                this.$onInit = function () { };
                Rollbar.info("User is on the signup page");
                if ($stateParams.plan) {
                    this.plan = $stateParams.plan;
                    if (angular.isUndefined(this.plan.planid)) {
                        this.$state.go("root.company.plans");
                    }
                }
                else {
                    this.$state.go("root.company.plans");
                }
            }
            SignupController.prototype.notBlackListed = function (email) {
                return this.$http.post("/company/signup/check-email", { email: email });
            };
            SignupController.prototype.notAlreadyExists = function (email) {
                return this.$http.post("/company/signup/does-email-exist", { email: email });
            };
            SignupController.prototype.signup = function () {
                var _this = this;
                this.$http.post("/company/signup/create", this.createCompany).then(function (result) {
                    _this.newCompany = result.data;
                    var dto = {
                        username: _this.newCompany.companyemail,
                        password: _this.createCompany.password
                    };
                    _this.$http.post("/login", dto).then(function (res) {
                        _this.SessionService.setToken(res.headers("Authorization"));
                        if (_this.SessionService.isCandidate() && !_this.SessionService.isCompany()) {
                            _this.$state.go("root.candidate.dashboard", {}, {
                                reload: true
                            });
                        }
                        else if (_this.SessionService.isCompany()) {
                            if (_this.plan.hasTrial) {
                                var subscriptionDTO = {
                                    chosenPlanId: _this.plan.planid,
                                    chosenPlanUUID: _this.plan.planUUID,
                                    nonce: null,
                                    promoCode: null
                                };
                                _this.$http.post("/company/payments/trial-new-company", subscriptionDTO).then(function (result) {
                                    if (result.data.result) {
                                        _this.checkSubscriptionStatus().then(function (result) {
                                            _this.refreshToken().then(function (result) {
                                                _this.$state.go("root.company.dashboard");
                                            });
                                        });
                                    }
                                });
                            }
                            else {
                                _this.$state.go("root.company.braintree", { plan: _this.plan });
                            }
                        }
                    }, function (error) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Login Failed")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                        Rollbar.error(error);
                    });
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Signup Failed")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            SignupController.prototype.refreshToken = function () {
                var _this = this;
                var promise = this.$http.get("/me/refresh-token");
                promise.then(function (result) {
                    _this.SessionService.setToken(result.headers("Authorization"));
                }, function (error) {
                    Rollbar.error(JSON.stringify(error));
                });
                return promise;
            };
            SignupController.prototype.showContactForm = function () {
                this.$mdDialog.show({
                    controller: "company.ContactUsController",
                    controllerAs: "contact",
                    bindToController: true,
                    templateUrl: 'views/company/dialogs/contact-us.html',
                    parent: angular.element(document.body),
                    clickOutsideToClose: true,
                    escapeToClose: true
                }).then(function () {
                    console.debug("You clicked the button to close the bottom sheet");
                }).catch(function () {
                    console.debug("You clicked cancel button");
                });
            };
            SignupController.prototype.checkSubscriptionStatus = function () {
                return this.$http.get("/company/subscriptions/check-status");
            };
            SignupController.$inject = ["$http", "SessionService", "$stateParams", "$state", "$mdToast", "$scope", "$mdDialog"];
            return SignupController;
        }());
        app.controller("company.SignupController", SignupController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var BraintreeController = /** @class */ (function () {
            function BraintreeController($http, SessionService, $stateParams, $state, $scope, $interval) {
                var _this = this;
                this.$http = $http;
                this.SessionService = SessionService;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.$scope = $scope;
                this.$interval = $interval;
                this.promoError = false;
                this.$onInit = function () { };
                this.hidePromoCodeButton = false;
                Rollbar.info("User is on the payments page");
                this.oneMonthLater = new Date();
                this.oneMonthLater.setMonth(this.oneMonthLater.getMonth() + 1);
                this.ready = false;
                this.failed = false;
                this.errorViewModels = [];
                if ($stateParams.plan) {
                    this.plan = $stateParams.plan;
                    if (angular.isUndefined(this.plan.planid)) {
                        this.$state.go("root.company.plans");
                    }
                }
                else {
                    this.$state.go("root.company.subscriptions");
                }
                if (angular.isDefined($stateParams.promocode) && $stateParams.promocode != null && $stateParams.promocode != "") {
                    this.promoCode = $stateParams.promocode;
                    this.applyPromoCode();
                }
                this.$http.get("/company/payments/token-newuser").then(function (result) {
                    _this.paymentsToken = result.data;
                    var button = document.querySelector('#submit-button');
                    braintree.dropin.create({
                        authorization: _this.paymentsToken.token,
                        container: '#dropin-container'
                    }, function (createErr, instance) {
                        if (createErr) {
                            Rollbar.error(createErr);
                            _this.ready = false;
                            _this.failed = true;
                            _this.errorViewModels = [{
                                    errorHeading: "Braintree Payment UI Failed To Initialize",
                                    errorMessage: JSON.stringify(createErr),
                                    hardDecline: false
                                }];
                            _this.updateDom();
                        }
                        else {
                            _this.ready = true;
                            _this.failed = false;
                            _this.updateDom();
                            button.addEventListener('click', function () {
                                instance.requestPaymentMethod(function (err, payload) {
                                    // Submit payload.nonce to your server
                                    _this.submitNonce(payload.nonce);
                                });
                            });
                        }
                    });
                }, function (error) {
                    Rollbar.error(error);
                    _this.ready = false;
                    _this.failed = true;
                    _this.errorViewModels = [{
                            errorHeading: error.error || "Error",
                            errorMessage: error.message || JSON.stringify(error),
                            hardDecline: false
                        }];
                    _this.updateDom();
                });
            }
            BraintreeController.prototype.applyPromoCode = function () {
                var _this = this;
                this.promoError = false;
                var promoCode = { chosenPlanId: this.plan.planid,
                    chosenPlanUUID: this.plan.planUUID,
                    promoCode: this.promoCode };
                this.$http.post("/company/payments/validate-promo", promoCode).then(function (result) {
                    if (result.data.valid) {
                        _this.promoAlreadyApplied = true;
                        _this.promoCodeResult = result.data;
                    }
                    else {
                        _this.promoError = true;
                        _this.promoCodeResult = result.data;
                    }
                });
            };
            BraintreeController.prototype.submitNonce = function (nonce) {
                var _this = this;
                this.hidePromoCodeButton = true;
                this.ready = false;
                this.updateDom();
                var subscriptionDTO = {
                    chosenPlanId: this.plan.planid,
                    chosenPlanUUID: this.plan.planUUID,
                    nonce: nonce,
                    promoCode: this.promoCode
                };
                this.$http.post("/company/payments/payment-new-company", subscriptionDTO).then(function (result) {
                    if (result.data.result) {
                        var timesChecked = 0;
                        var statusChecker_1 = _this.$interval(function () {
                            _this.checkSubscriptionStatus().then(function (result) {
                                if (result.data.hasActiveSubscription) {
                                    _this.$interval.cancel(statusChecker_1);
                                    _this.refreshToken().then(function (result) {
                                        _this.$state.go("root.company.dashboard");
                                    });
                                }
                                else {
                                    if (timesChecked && timesChecked >= 10) {
                                        _this.$interval.cancel(statusChecker_1);
                                        _this.refreshToken().then(function (result) {
                                            _this.$state.go("root.company.dashboard");
                                        });
                                    }
                                    timesChecked++;
                                }
                            }, function (error) {
                                _this.$interval.cancel(statusChecker_1);
                                _this.refreshToken().then(function (result) {
                                    _this.$state.go("root.company.dashboard");
                                });
                                Rollbar.error(error);
                            });
                        }, 1000);
                    }
                    else {
                        _this.ready = false;
                        _this.failed = true;
                        var response = result.data.response;
                        for (var key in response) {
                            if (Company.BraintreeErrors.paymentErrorCodes[key]) {
                                var errorCode = key;
                                var errorMessage = Company.BraintreeErrors.paymentErrorCodes[errorCode].implications
                                    + "(Error Code: "
                                    + errorCode
                                    + ")";
                                _this.errorViewModels.push({
                                    errorHeading: Company.BraintreeErrors.paymentErrorCodes[errorCode].text,
                                    errorMessage: errorMessage,
                                    hardDecline: Company.BraintreeErrors.paymentErrorCodes[errorCode].type === "Hard"
                                });
                                Rollbar.error("Payment failed." + errorMessage);
                            }
                            else {
                                // For errors which do not exist in the dictionary
                                _this.errorViewModels.push({
                                    errorHeading: key,
                                    errorMessage: response[key] || "Please contact us",
                                    hardDecline: false
                                });
                            }
                        }
                        _this.updateDom();
                    }
                }, function (error) {
                    Rollbar.error(error);
                    _this.ready = false;
                    _this.failed = true;
                    _this.errorViewModels = [{
                            errorHeading: error.error || "Error",
                            errorMessage: error.message || JSON.stringify(error),
                            hardDecline: false
                        }];
                    _this.updateDom();
                });
            };
            BraintreeController.prototype.checkSubscriptionStatus = function () {
                return this.$http.get("/company/subscriptions/check-status");
            };
            BraintreeController.prototype.tryAgain = function () {
                this.$state.go("root.company.braintree", { plan: this.plan }, {
                    reload: true
                });
            };
            BraintreeController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            BraintreeController.prototype.refreshToken = function () {
                var _this = this;
                var promise = this.$http.get("/me/refresh-token");
                promise.then(function (result) {
                    _this.SessionService.setToken(result.headers("Authorization"));
                }, function (error) {
                    Rollbar.error(JSON.stringify(error));
                });
                return promise;
            };
            BraintreeController.prototype.getColor = function (name) {
                switch (name) {
                    case "Basic":
                        return "{'color': 'report-accent-500-1.0'}";
                    case "Standard":
                        return "{'color': 'report-warn-500-1.0'}";
                    case "Unlimited":
                        return "{'color': 'report-background-500-1.0'}";
                    default:
                        return "{'color': 'report-warn-500-1.0'}";
                }
            };
            BraintreeController.$inject = ["$http", "SessionService", "$stateParams", "$state", "$scope", "$interval"];
            return BraintreeController;
        }());
        app.controller("company.BraintreeController", BraintreeController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var PlanManagerController = /** @class */ (function () {
            function PlanManagerController($http, SessionService, $state, $mdDialog, $scope) {
                var _this = this;
                this.$http = $http;
                this.SessionService = SessionService;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$scope = $scope;
                this.$onInit = function () { };
                this.monthlyPlans = [];
                this.yearlyPlans = [];
                this.checkStatus().then(function (result) {
                    _this.companySubscriptionStatus = result.data;
                    _this.updateDom();
                    if (_this.companySubscriptionStatus.hasActiveSubscription) {
                        _this.fetchCurrent().then(function (result) {
                            _this.companySubscription = result.data;
                            if (_this.companySubscription.planName === 'Pro Trial' && !_this.companySubscription.trialPeriod) {
                                _this.planName = 'Pro';
                            }
                            else if (_this.companySubscription.isBespoke) {
                                _this.planName = 'BeSpoke';
                            }
                            else {
                                _this.planName = _this.companySubscription.planName;
                            }
                        }, function (error) {
                            Rollbar.error(error);
                        });
                    }
                    else {
                        _this.getPlans().then(function (result) {
                            angular.forEach(result.data, function (v, k) {
                                if (v.planExpiryMonths === 12) {
                                    _this.yearlyPlans.push(v);
                                }
                                else {
                                    _this.monthlyPlans.push(v);
                                }
                            });
                        }, function (error) {
                            Rollbar.error(error);
                        });
                    }
                }, function (error) {
                    Rollbar.error(error);
                });
            }
            PlanManagerController.prototype.checkStatus = function () {
                return this.$http.get("/company/subscriptions/check-status");
            };
            PlanManagerController.prototype.cancelTrial = function () {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure you wish to cancel?")
                    .htmlContent("<p>If you proceed to upgrade your current trial plan will get cancelled")
                    .ok("Ok")
                    .cancel("Go Back")
                    .theme("confirmdialog");
                var confirm = this.$mdDialog.confirm()
                    .title("Trial Cancelled")
                    .textContent("Your trial plan has been cancelled please choose a new plan")
                    .ok("Ok")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/company/subscriptions/cancel-trial", {}).then(function (result) {
                        _this.refreshToken().then(function (result) {
                            _this.$mdDialog.show(confirm).then(function () {
                                _this.$state.go("root.company.plan-manager", {}, {
                                    reload: true
                                });
                            }, function () {
                            });
                        });
                    });
                }, function () { });
            };
            PlanManagerController.prototype.getPlans = function () {
                return this.$http.get("/company/subscriptions/plans");
            };
            PlanManagerController.prototype.refreshToken = function () {
                var _this = this;
                var promise = this.$http.get("/me/refresh-token");
                promise.then(function (result) {
                    _this.SessionService.setToken(result.headers("Authorization"));
                }, function (error) {
                    Rollbar.error(JSON.stringify(error));
                });
                return promise;
            };
            PlanManagerController.prototype.fetchCurrent = function () {
                return this.$http.get("/company/subscriptions/fetch-current");
            };
            PlanManagerController.prototype.cancel = function (braintreeSubscriptionId) {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure you wish to cancel?")
                    .htmlContent("<p>If you proceed to cancel, your video recordings will be lost at the end of your plan. Please read the Cancellation Policy in <a class=\"md-accent\" href=\"https://5qlive.com/employers-terms/\" target=\"_blank\">Terms & Conditions</a> for further details.</p>")
                    .ok("Cancel Subscription")
                    .cancel("Go Back")
                    .theme("confirmdialog");
                var confirm = this.$mdDialog.confirm()
                    .title("Cancellation Successful")
                    .textContent("Your Plan has been cancelled. You will not be charged again")
                    .ok("Ok")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/company/subscriptions/cancel-subscription/" + braintreeSubscriptionId, {}).then(function (request) {
                        _this.$mdDialog.show(confirm).then(function () {
                            _this.$state.go("root.company.plan-manager", {}, {
                                reload: true
                            });
                        }, function () { });
                    }, function (error) {
                        Rollbar.error(error);
                    });
                }, function () { });
            };
            PlanManagerController.prototype.subscribe = function (plan) {
                if (this.SessionService.isCompany()) {
                    this.$state.go("root.company.braintree", { plan: plan });
                }
                else {
                    this.$state.go("root.company.signup", { plan: plan });
                }
            };
            PlanManagerController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            PlanManagerController.prototype.getColor = function (index) {
                var i = index % 4;
                switch (i) {
                    case 0:
                        return "{'color': 'report-accent-500-1.0'}";
                    case 1:
                        return "{'color': 'report-warn-500-1.0'}";
                    case 2:
                        return "{'color': 'report-background-500-1.0'}";
                    case 3:
                        return "{'color': 'report-warn-500-1.0'}";
                }
            };
            PlanManagerController.$inject = ["$http", "SessionService", "$state", "$mdDialog", "$scope"];
            return PlanManagerController;
        }());
        app.controller("company.PlanManagerController", PlanManagerController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    "use strict";
    var app = Qna.getModule();
    var TipsDialogController = /** @class */ (function () {
        function TipsDialogController($scope, $mdDialog, $state, session) {
            this.$scope = $scope;
            this.$mdDialog = $mdDialog;
            this.$state = $state;
            this.session = session;
            this.$onInit = function () { };
        }
        TipsDialogController.prototype.hideTipsDialog = function () {
            this.$mdDialog.hide();
        };
        TipsDialogController.$inject = ["$scope", "$mdDialog", "$state", "SessionService"];
        return TipsDialogController;
    }());
    app.controller("TipsDialogController", TipsDialogController);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    "use strict";
    var app = Qna.getModule();
    /*
    * This controller simply redirects you to the correct place if you arrive at /#/
    * */
    var TipsTestController = /** @class */ (function () {
        function TipsTestController($mdDialog, $state, $q) {
            this.$mdDialog = $mdDialog;
            this.$state = $state;
            this.$q = $q;
            this.$onInit = function () { };
            this.results = [];
            var paths = this.$state.get()
                .filter(function (s) { return !s.abstract && s.data && s.data.info; })
                .map(function (s) { return s.data.info; });
            this.showAllTips(paths);
        }
        TipsTestController.prototype.showAllTips = function (paths) {
            var _this = this;
            return paths.reduce(function (promise, item) {
                return promise
                    .then(function (result) {
                    console.log("tips " + item);
                    return _this.showTipsDialog(item).then(function (result) { return _this.results.push(result); });
                })
                    .catch(function () { });
            }, this.$q.resolve());
        };
        TipsTestController.prototype.showTipsDialog = function (path) {
            return this.$mdDialog.show({
                templateUrl: path,
                controller: "TipsDialogController",
                controllerAs: "tips",
                parent: angular.element(document.body),
                locals: {},
                clickOutsideToClose: true,
                escapeToClose: true,
                bindToController: false
            });
        };
        TipsTestController.$inject = ["$mdDialog", "$state", "$q"];
        return TipsTestController;
    }());
    app.controller("TipsTestController", TipsTestController);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    "use strict";
    var app = Qna.getModule();
    /*
    * This controller simply redirects you to the correct place if you arrive at /#/
    * */
    var HomeController = /** @class */ (function () {
        function HomeController($http, session, $state, $window) {
            this.$http = $http;
            this.session = session;
            this.$state = $state;
            this.$window = $window;
            this.$onInit = function () { };
            this.goHome();
        }
        HomeController.prototype.goHome = function () {
            if (this.session.isAuthenticated()) {
                if (this.session.isCandidate()) {
                    this.$state.go("root.candidate.dashboard");
                }
                else if (this.session.isCompany()) {
                    this.$state.go("root.company.dashboard");
                }
                else {
                    this.$state.go("root.candidate.home");
                }
            }
            else {
                this.$state.go("root.candidate.dashboard");
                //this.$window.location.assign("https://www.ntu.edu.sg");
            }
        };
        HomeController.$inject = ["$http", "SessionService", "$state", "$window"];
        return HomeController;
    }());
    app.controller("HomeController", HomeController);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    "use strict";
    var app = Qna.getModule();
    var RootController = /** @class */ (function () {
        function RootController($http, $mdToast, $mdDialog, $state, session, $scope, $window, $location, $mdSidenav) {
            var _this = this;
            this.$http = $http;
            this.$mdToast = $mdToast;
            this.$mdDialog = $mdDialog;
            this.$state = $state;
            this.session = session;
            this.$scope = $scope;
            this.$window = $window;
            this.$location = $location;
            this.$mdSidenav = $mdSidenav;
            this.activeNav = "root.company.dashboard";
            this.whiteLabel = {
                id: "000000000000000000",
                systemTitle: "Default Theme",
                faviconImage: "/img/favicon-16x16.png",
                logoImage: "/img/ggh-logo.png",
                logoMobile: "/img/logo.png",
                backgroundImage: "/img/background.png",
                headerBackgroundColor: "",
                headerTextColor: "",
                bannerBackgroundColor: "",
                bannerTextColor: "",
                circleButtonActiveBg: "",
                circleButtonActiveColor: "",
                circleButtonInactiveBg: "",
                circleButtonInactiveColor: "",
                actionButtonBg: "",
                actionButtonColor: "",
                sidebarMenuColor: "",
                status: "default"
            };
            this.systemModules = {};
            this.menu = [
                { url: 'https://5qlive.com/5qlive-one-way-video-interviewing-platform-2/how-it-works/', name: 'how', label: 'How It Works' },
                { url: 'https://5qlive.com/#why', name: 'about', label: 'About' },
                { url: 'https://5qlive.com/for-companies/', name: 'for-companies', label: 'For Companies' },
                { url: 'https://5qlive.com/video-profiles/', name: 'for-companies-and-candidates', label: 'For Candidates' },
                { url: this.$state.href('root.company.plans', {}, { absolute: true }), name: 'pricing', label: 'Pricing' },
                { url: 'https://5qlive.com/demo/', name: 'contact-us', label: 'Contact Us' }
            ];
            this.moduleTitles = {
                appId: "Applicant ID",
                bank: "Competency Bank",
                flow: "Flow Interview",
                types: "Interview Types",
                slate: "Third Party Integration - Slate By Technolutions"
            };
            this.isSidebarAllowed = function () { return true; };
            this.showSidebar = function () { return _this.$mdSidenav("right").open(); };
            this.closeSidebar = function () { return _this.$mdSidenav("right").close(); };
            this.$onInit = function () { };
            var nowAt = window.location.href;
            var isHome = nowAt.includes('/home');
            var isLogin = nowAt.includes('/login');
            //console.log("Now At: " + nowAt);
            if (!sessionStorage.getItem("whitelabel") || !sessionStorage.getItem("system_modules") || this.whiteLabel.id == "000000000000000000" && (isHome || isLogin)) {
                this.$http.get("/system/whitelabel/active")
                    .then(function (result) {
                    _this.whiteLabel = result.data;
                    sessionStorage.setItem("whitelabel", JSON.stringify(_this.whiteLabel));
                }, function (error) {
                    console.log("Error Loading Active White Labelling");
                });
                this.$http.get("/system/modules/active")
                    .then(function (result) {
                    var systemModules = result.data;
                    systemModules.forEach(function (smod) {
                        _this.systemModules[smod.name] = smod.status;
                    });
                    sessionStorage.setItem("system_modules", JSON.stringify(_this.systemModules));
                }, function (error) {
                    console.log("Error Loading Active White Labelling");
                });
            }
            else {
                this.whiteLabel = JSON.parse(sessionStorage.getItem("whitelabel"));
                this.systemModules = JSON.parse(sessionStorage.getItem("system_modules"));
            }
            if (this.session.isAuthenticated()) {
                this.isAuthenticated = this.session.isAuthenticated();
                this.$http.get("/me/where-can-i-go").then(function (result) { return _this.navigationLinks = result.data; }, function (error) { return _this.navigationLinks = []; });
            }
            else {
                console.debug("The session is not authenticated");
            }
        }
        RootController.prototype.showTipsDialog = function () {
            this.$mdDialog.show({
                templateUrl: this.$state.current.data.info,
                controller: "TipsDialogController",
                controllerAs: "tips",
                parent: angular.element(document.body),
                locals: {},
                clickOutsideToClose: true,
                escapeToClose: true,
                bindToController: false
            }).then(function () {
                console.debug("You clicked the button to close the bottom sheet");
            }).catch(function () {
                console.debug('You hit escape or clicked the backdrop to close.');
            });
        };
        RootController.prototype.hideTipsDialog = function () {
            console.debug("You clicked the button to close the bottom sheet");
            this.$mdDialog.hide();
        };
        RootController.prototype.goToReviewerDashboard = function () {
            this.$state.go('root.company.reviewerdashboard', {}, {
                reload: true
            });
        };
        RootController.prototype.goHome = function () {
            if (this.session.isAuthenticated()) {
                if (this.session.isCandidate()) {
                    this.$state.go("root.candidate.dashboard");
                }
                else if (this.session.isCompany()) {
                    this.$state.go("root.company.dashboard");
                }
                else {
                    this.$state.go("root.candidate.home");
                }
            }
            else {
                this.$window.location.assign("https://www.5qlive.com");
            }
        };
        RootController.prototype.goState = function (state, params) {
            this.$state.go(state, params);
            this.$mdSidenav("right").close();
        };
        RootController.prototype.isActiveNav = function (myState) {
            //alert(this.$state.current.name.toString());
            return this.$state.current.name.toString().indexOf(myState) != -1;
        };
        RootController.prototype.getWhiteLabelTheme = function () {
            return this.whiteLabel;
        };
        RootController.prototype.getSystemModulesMap = function () {
            return this.systemModules;
        };
        RootController.$inject = ["$http", "$mdToast", "$mdDialog", "$state", "SessionService", "$scope", "$window", "$location", "$mdSidenav"];
        return RootController;
    }());
    app.controller("RootController", RootController);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    app.config([
        "$locationProvider",
        function ($locationProvider) {
            $locationProvider.hashPrefix("");
        }
    ]);
    app.config([
        "$httpProvider",
        "RollbarProvider",
        function ($httpProvider, RollbarProvider) {
            $httpProvider.interceptors.push("JWTInterceptor");
            RollbarProvider.init({
                accessToken: "e68a60bed2704233982ddb78169b7d46",
                captureUncaught: true,
                payload: {
                    environment: window.location.host
                }
            });
        }
    ]);
    app.config(['$mdDateLocaleProvider', function ($mdDateLocaleProvider) {
            $mdDateLocaleProvider.formatDate = function (date) {
                return date ? moment(date).format('DD/MM/YYYY') : '';
            };
            $mdDateLocaleProvider.parseDate = function (dateString) {
                var m = moment(dateString, 'DD/MM/YYYY', true);
                return m.isValid() ? m.toDate() : new Date(NaN);
            };
        }]);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    'use strict';
    var app = Qna.getModule();
    var practiseQuestions = [
        {
            guid: '0000000-00001-0001-0001-000001',
            question: 'What are your greatest strengths?',
            questionVideoURL: 'https://d282njny5922wn.cloudfront.net/DefaultPractice/VA+QUESTION+1.mp4',
            competencyName: 'Motivation',
            responseType: 'VIDEO',
            readingTime: 20,
            timeallowed: 1
        },
        {
            guid: '0000000-00002-0002-0002-000002',
            question: 'Describe a time when you made a mistake and how you dealt with it?',
            questionVideoURL: 'https://d282njny5922wn.cloudfront.net/DefaultPractice/VA+QUESTION+2.mp4',
            responseType: 'TEXT',
            competencyName: 'Communication Skills',
            readingTime: 15,
            timeallowed: 1
        },
        {
            guid: '0000000-00003-0003-0003-000003',
            question: 'In your opinion, what is the most important quality in a leader?',
            questionVideoURL: 'https://d282njny5922wn.cloudfront.net/DefaultPractice/VA+QUESTION+3.mp4',
            responseType: 'MCQS',
            competencyName: 'Communication Skills',
            readingTime: 15,
            timeallowed: 1,
            canChooseMultiple: false,
            canAnswerShort: true,
            choices: [{
                    choiceLabel: '1',
                    choiceText: 'Vision'
                },
                {
                    choiceLabel: '2',
                    choiceText: 'Inspiration'
                },
                {
                    choiceLabel: '3',
                    choiceText: 'Strategic & Critical Thinking'
                },
                {
                    choiceLabel: '4',
                    choiceText: 'Interpersonal Communication'
                },
                {
                    choiceLabel: '5',
                    choiceText: 'Authenticity & Self-Awareness'
                },
                {
                    choiceLabel: '6',
                    choiceText: 'Open-Mindedness & Creativity'
                },
                {
                    choiceLabel: '7',
                    choiceText: 'Responsibility & Dependability'
                },
                {
                    choiceLabel: '8',
                    choiceText: 'Other'
                }]
        }
    ];
    app.constant('practiseQuestions', { questions: practiseQuestions });
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    'use strict';
    var app = Qna.getModule();
    ;
    var names;
    (function (names) {
        names["SUPER_ADMIN"] = "Super Admin";
        names["ADMIN"] = "Admin";
        names["REVIEWER"] = "Reviewer";
    })(names || (names = {}));
    ;
    var identifiers;
    (function (identifiers) {
        identifiers["SUPER_ADMIN"] = "SUPER_ADMIN";
        identifiers["ADMIN"] = "ADMIN";
        identifiers["REVIEWER"] = "REVIEWER";
    })(identifiers || (identifiers = {}));
    ;
    app.constant("roleConstants", { names: names, identifiers: identifiers });
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var BillingController = /** @class */ (function () {
            function BillingController($http, $mdToast, $stateParams, $state, SessionService, $mdDialog, $timeout, hopscotchService, $mdMenu, CSVDownloadService) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.$mdMenu = $mdMenu;
                this.CSVDownloadService = CSVDownloadService;
                this.listHeader = ['invoiceNo', 'start', 'end', 'status', 'createdAt'];
                this.$onInit = function () { };
                this.list();
            }
            BillingController.prototype.list = function () {
                var _this = this;
                this.$http.get("/admin/billing-cycle/").then(function (result) {
                    _this.billings = result.data;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            BillingController.prototype.downloadList = function (list) {
                if (list) {
                    this.CSVDownloadService.downloadFile(list, 'BillingHistory', this.listHeader);
                }
            };
            BillingController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "$state",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "HopscotchService",
                "$mdMenu",
                "company.CSVService"
            ];
            return BillingController;
        }());
        app.controller("admin.BillingController", BillingController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var CandidatesController = /** @class */ (function () {
            function CandidatesController($http, $mdToast, $stateParams, SessionService, $mdDialog, $timeout, hopscotchService, $mdMenu, $window) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.$mdMenu = $mdMenu;
                this.$window = $window;
                this.search = "";
                this.orderVariable = "-creationDate";
                this.$onInit = function () { };
                this.statuses = [];
                this.statuses.push({ name: "Interview Recorded", selected: true }, { name: "Incomplete Recording Attempt", selected: true }, { name: "Pending Recording", selected: true });
                this.interviewId = $stateParams.interviewId;
                this.showInviteCandidate = false;
                this.list();
            }
            CandidatesController.prototype.toggleOption = function (item) {
                if (item.selected) {
                    item.selected = false;
                    this.filterByStatus();
                }
                else {
                    item.selected = true;
                    this.filterByStatus();
                }
            };
            CandidatesController.prototype.filterByStatus = function () {
                var _this = this;
                this.invitations = _.filter(this.allInvitations, function (obj) {
                    for (var _i = 0, _a = _this.statuses; _i < _a.length; _i++) {
                        var status_2 = _a[_i];
                        if (status_2.selected) {
                            if (status_2.name === obj.status) {
                                return true;
                            }
                        }
                    }
                    return false;
                });
            };
            CandidatesController.prototype.filter = function () {
                var _this = this;
                if (this.search != "") {
                    this.invitations = _.filter(this.allInvitations, function (obj) {
                        return (obj.candidatename
                            .toLowerCase()
                            .indexOf(_this.search.toLowerCase()) !== -1);
                    });
                }
                else {
                    this.invitations = this.allInvitations;
                }
            };
            CandidatesController.prototype.sortResultsAscending = function () {
                this.orderVariable = "creationDate";
            };
            CandidatesController.prototype.sortResultsDescending = function () {
                this.orderVariable = "-creationDate";
            };
            CandidatesController.prototype.showOpenInviteLink = function () {
                this.linkDialog = this.$mdDialog
                    .show({
                    controller: CandidatesController,
                    controllerAs: "candidates",
                    bindToController: true,
                    templateUrl: "views/company/dialogs/share-link.html",
                    parent: angular.element(document.body),
                    locals: { openInviteLink: this.openInviteLink },
                    clickOutsideToClose: true,
                    escapeToClose: true
                    // Only for -xs, -sm breakpoints.
                })
                    .then(function () {
                    console.debug("You clicked the button to close the bottom sheet");
                })
                    .catch(function () {
                    console.debug("You clicked cancel button");
                });
            };
            CandidatesController.prototype.copyToClipBoard = function () {
                var element = document.getElementById("unique-link");
                element.select();
                document.execCommand("Copy");
                this.$mdToast.show(this.$mdToast
                    .simple()
                    .textContent("Copied to Clipboard")
                    .hideDelay(10000)
                    .position("top left")
                    .theme("toasttheme"));
            };
            CandidatesController.prototype.showCopyToast = function () {
                this.$mdToast.show(this.$mdToast
                    .simple()
                    .textContent("Copied to Clipboard")
                    .hideDelay(10000)
                    .position("top left")
                    .theme("toasttheme"));
            };
            CandidatesController.prototype.cancel = function () {
                this.$mdDialog.hide();
            };
            CandidatesController.prototype.toggleInviteCandidate = function () {
                this.showInviteCandidate = !this.showInviteCandidate;
            };
            CandidatesController.prototype.openMenu = function ($mdMenu, ev) {
                $mdMenu.open(ev);
            };
            CandidatesController.prototype.list = function () {
                var _this = this;
                this.$http.get("/admin/companies/invitations/" + this.interviewId).then(function (result) {
                    _this.allInvitations = result.data;
                    for (var _i = 0, _a = _this.allInvitations; _i < _a.length; _i++) {
                        var inv = _a[_i];
                        if (inv.hasrecording) {
                            inv.status = "Interview Recorded";
                        }
                        else if (inv.hasAttemptedButNotCompletedRecording) {
                            inv.status = "Incomplete Recording Attempt";
                        }
                        else {
                            inv.status = "Pending Recording";
                        }
                    }
                    _this.invitations = _this.allInvitations;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidatesController.prototype.reinvite = function (invitationId) {
                var _this = this;
                this.$http.put("/company/invitations/reinvite/" + invitationId, {}).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Invitation Sent Again")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidatesController.prototype.uninvite = function (invitation) {
                var _this = this;
                var request = this.$mdDialog
                    .confirm()
                    .title("Are you sure?")
                    .textContent("The invitation will be deleted and the candidate won't be able to record the interview")
                    .ok("UNINVITE")
                    .cancel("CANCEL")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.delete("/company/invitations/" + invitation.guid, {}).then(function (result) {
                        var i = _this.invitations.indexOf(invitation);
                        _this.invitations.splice(i, 1);
                        _this.$mdToast.show(_this.$mdToast
                            .simple()
                            .textContent("Invitation Deleted")
                            .hideDelay(10000)
                            .position("top left")
                            .theme("toasttheme"));
                    }, function (error) {
                        _this.$mdToast.show(_this.$mdToast
                            .simple()
                            .textContent(error.data.message)
                            .hideDelay(10000)
                            .position("top left")
                            .theme("toasttheme"));
                        Rollbar.error(error);
                    });
                }, function () { });
            };
            CandidatesController.prototype.edit = function (invitation) {
                var _this = this;
                this.$http
                    .put("/company/invitations/", {
                    guid: invitation.guid,
                    candidatename: invitation.candidatename,
                    candidateemail: invitation.candidateemail
                })
                    .then(function (result) {
                    invitation.isEdit = false;
                    invitation.invitationcode = result.data.invitationcode;
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Invitation Edited Successfully")
                        .hideDelay(10000)
                        .position("top left")
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(error.data.message)
                        .hideDelay(10000)
                        .position("top left")
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            CandidatesController.prototype.cancelEdit = function (invitation) {
                invitation.isEdit = false;
            };
            CandidatesController.prototype.showEdit = function (invitation) {
                invitation.isEdit = true;
            };
            CandidatesController.prototype.create = function (name, email) {
                var _this = this;
                this.$http
                    .post("/company/invitations/" + this.interviewId, {
                    candidatename: name,
                    candidateemail: email
                })
                    .then(function (result) {
                    if (_this.invitations) {
                        _this.invitations.push(result.data);
                        _this.name = "";
                        _this.email = "";
                    }
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Invitation Sent")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.showInviteCandidate = false;
                }, function (error) {
                    _this.name = "";
                    _this.email = "";
                    _this.showInviteCandidate = false;
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(error.data.message)
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            CandidatesController.prototype.isSelfInvitation = function (email) {
                return this.$http.post("/company/invitations/is-self-invitation/", { email: email });
            };
            CandidatesController.prototype.isSameDomainInvitation = function (email) {
                return this.$http.post("/company/invitations/is-same-domain-invitation/", { email: email });
            };
            CandidatesController.prototype.isAnotherCompanyInvitation = function (email) {
                return this.$http.post("/company/invitations/is-another-company-invitation/", { email: email });
            };
            CandidatesController.prototype.goBackToPreviousPage = function () {
                this.$window.history.back();
            };
            CandidatesController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "HopscotchService",
                "$mdMenu",
                "$window"
            ];
            return CandidatesController;
        }());
        app.controller("admin.CandidatesController", CandidatesController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var CompanyDetailsController = /** @class */ (function () {
            function CompanyDetailsController($http, $mdToast, $stateParams, $state, SessionService, $timeout, hopscotchService, $window, $scope) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.$window = $window;
                this.$scope = $scope;
                this.$onInit = function () { };
                this.fileElement = document.getElementById("file");
                this.fileReader = new FileReader();
                this.fileElement.onchange = function (ev) {
                    _this.file = _this.fileElement.files[0];
                    _this.fileReader.readAsDataURL(_this.file);
                };
                this.fileReader.onloadend = function (ev) {
                    _this.updateDom();
                };
                this.companyid = $stateParams.companyid;
                this.$http
                    .get("/admin/companies/company-details/" + this.companyid)
                    .then(function (result) {
                    _this.company = result.data;
                });
            }
            CompanyDetailsController.prototype.save = function () {
                var _this = this;
                if (this.file != null) {
                    this.formData = new FormData();
                    this.formData.append('file', this.file);
                    this.$http.post("/admin/companies/upload-logo/" + this.company.id, this.formData, {
                        transformRequest: angular.identity,
                        headers: {
                            'Content-Type': undefined
                        }
                    }).then(function (result) {
                        _this.$http.put("/admin/companies/update/" + _this.company.id, _this.company).then(function (result) {
                            _this.company.logo = result.data.logoURL;
                            _this.goBack();
                        });
                    });
                }
                else {
                    this.$http.put("/admin/companies/update/" + this.company.id, this.company).then(function (result) {
                        _this.goBack();
                    });
                }
            };
            CompanyDetailsController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            CompanyDetailsController.prototype.goBack = function () {
                this.$window.history.back();
            };
            CompanyDetailsController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "$state",
                "SessionService",
                "$timeout",
                "HopscotchService",
                "$window",
                "$scope"
            ];
            return CompanyDetailsController;
        }());
        app.controller("admin.CompanyDetailsController", CompanyDetailsController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var CycleDetailsController = /** @class */ (function () {
            function CycleDetailsController($http, $mdToast, $stateParams, $state, SessionService, $timeout, hopscotchService, $window, $scope) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.$window = $window;
                this.$scope = $scope;
                this.$onInit = function () { };
                this.cycleid = $stateParams.cycleid;
                this.$http.get("/admin/companies/company-details/billing/" + this.cycleid)
                    .then(function (result) {
                    _this.company = result.data.company;
                    _this.billingCycle = result.data.billingCycle;
                    _this.monthlyInvitations = result.data.billingCycle.monthlyInvitationBreakdown;
                    _this.monthlyRecordings = result.data.billingCycle.monthlyRecordingBreakdown;
                    _this.monthlyInterviews = result.data.billingCycle.monthlyInterviewBreakdown;
                    _this.activeCompany = result.data;
                });
            }
            CycleDetailsController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            CycleDetailsController.prototype.goBack = function () {
                this.$window.history.back();
            };
            CycleDetailsController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "$state",
                "SessionService",
                "$timeout",
                "HopscotchService",
                "$window",
                "$scope"
            ];
            return CycleDetailsController;
        }());
        app.controller("admin.CycleDetailsController", CycleDetailsController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var DashboardController = /** @class */ (function () {
            function DashboardController($http, $mdToast, $stateParams, $state, SessionService, $mdDialog, $timeout, $mdMenu, $window) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.$mdMenu = $mdMenu;
                this.$window = $window;
                this.startBillingCycle = false;
                this.nowDate = new Date();
                this.$onInit = function () { };
                this.list();
            }
            DashboardController.prototype.startCycle = function () {
                var _this = this;
                var newCycle = {
                    start: this.cycleStartDate,
                    end: this.cycleEndDate,
                    status: "Active"
                };
                this.$http.post("/admin/billing-cycle/", newCycle).then(function (result) {
                    _this.$mdToast.showSimple("New billing cycle started.");
                    _this.$window.location.reload();
                });
            };
            DashboardController.prototype.block = function (company) {
                var _this = this;
                var request = this.$mdDialog
                    .confirm()
                    .title("Are you sure?")
                    .textContent("All team members of this company will lose access to the platform")
                    .ok("Block")
                    .cancel("Go Back")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/admin/companies/block-company/" + company.id, {}).then(function () {
                        company.blocked = true;
                    });
                }, function () { });
            };
            DashboardController.prototype.spam = function (company) {
                var _this = this;
                var request = this.$mdDialog
                    .confirm()
                    .title("Are you sure?")
                    .textContent("You won't be able to undo this action.All team members of this company will lose access to the platform")
                    .ok("Mark as Spam")
                    .cancel("Go Back")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/admin/companies/mark-spam/" + company.id, {}).then(function () {
                        company.blocked = true;
                        company.spam = true;
                    });
                }, function () { });
            };
            DashboardController.prototype.forceUpgradeToggled = function (company) {
                var _this = this;
                if (!company.forceUpgrade) {
                    var request = this.$mdDialog
                        .confirm()
                        .title("Are you sure?")
                        .textContent("Are you sure you want to force to company to buy a plan")
                        .ok("Yes")
                        .cancel("Go Back")
                        .theme("confirmdialog");
                    this.$mdDialog.show(request).then(function () {
                        _this.$http.put("/admin/companies/force-upgrade/" + company.id, {}).then(function () {
                            company.forceUpgrade = true;
                        });
                    }, function () {
                        company.forceUpgrade = false;
                    });
                }
                else {
                    var request = this.$mdDialog
                        .confirm()
                        .title("Are you sure?")
                        .textContent("Are you sure you want to remove the force upgrade?")
                        .ok("Yes")
                        .cancel("Go Back")
                        .theme("confirmdialog");
                    this.$mdDialog.show(request).then(function () {
                        _this.$http.put("/admin/companies/remove-force-upgrade/" + company.id, {}).then(function () {
                            company.forceUpgrade = false;
                        });
                    }, function () {
                        company.forceUpgrade = true;
                    });
                }
            };
            DashboardController.prototype.unBlock = function (company) {
                var _this = this;
                var request = this.$mdDialog
                    .confirm()
                    .title("Are you sure?")
                    .textContent("All team members of this company will gain access to the platform")
                    .ok("Unblock")
                    .cancel("Go Back")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/admin/companies/unblock-company/" + company.id, {}).then(function () {
                        company.blocked = false;
                    });
                }, function () { });
            };
            DashboardController.prototype.addBespokePlan = function (company) {
                var _this = this;
                var request = this.$mdDialog
                    .confirm()
                    .title("Are you sure?")
                    .textContent("The Company will get unlimited credits without any payment prompt")
                    .ok("Ok")
                    .cancel("Go Back")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/admin/companies/give-bespoke-plan/" + company.id, {}).then(function () {
                        _this.list();
                    });
                }, function () { });
            };
            DashboardController.prototype.cancelAnySubscription = function (company) {
                var _this = this;
                var request = this.$mdDialog
                    .confirm()
                    .title("Are you sure?")
                    .textContent("The company will lose all its credits")
                    .ok("Cancel")
                    .cancel("Go Back")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/admin/companies/cancel-any-subscription/" + company.id, {}).then(function () {
                        _this.list();
                    });
                }, function () { });
            };
            DashboardController.prototype.cancelPaidSubscription = function (company) {
                var _this = this;
                var request = this.$mdDialog
                    .confirm()
                    .title("Are you sure?")
                    .textContent("The company's credits will be forfeited and the payments will stop")
                    .ok("Cancel")
                    .cancel("Go Back")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/admin/companies/cancel-braintree-subscription/" + company.id, {}).then(function () {
                        _this.list();
                    });
                }, function () { });
            };
            DashboardController.prototype.cancel = function () {
                this.$mdDialog.hide();
            };
            DashboardController.prototype.toggleStartBillingCycle = function () {
                this.startBillingCycle = !this.startBillingCycle;
            };
            DashboardController.prototype.openMenu = function ($mdMenu, ev) {
                $mdMenu.open(ev);
            };
            DashboardController.prototype.list = function () {
                var _this = this;
                this.$http.get("/admin/companies/company-details/active", {}).then(function (result) {
                    _this.company = result.data.company;
                    _this.billingCycle = result.data.billingCycle;
                    _this.activeCompany = result.data;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            DashboardController.prototype.downloadReport = function () {
                var _this = this;
                var url = null;
                this.$http.get("/admin/companies/report").then(function (result) {
                    url = result.data.reportURL;
                    var a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    // the filename you want
                    a.download = 'Report.csv';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            DashboardController.prototype.openBillingReports = function (billingStart, billingEnd, report) {
                console.log(report + " on " + billingStart + " -- " + billingEnd);
                this.$state.go("root.company.dynamic-report", {
                    reportOrigin: true,
                    startDate: this.formatDate(new Date(billingStart)),
                    endDate: this.formatDate(new Date(billingEnd)),
                    reportType: report
                });
            };
            DashboardController.prototype.formatDate = function (dateObj) {
                var dd = dateObj.getDate().toString();
                var mm = (dateObj.getMonth() + 1).toString();
                var yyyy = dateObj.getFullYear();
                if (Number(dd) < 10) {
                    dd = '0' + dd;
                }
                if (Number(mm) < 10) {
                    mm = '0' + mm;
                }
                return yyyy + '-' + mm + '-' + dd;
            };
            DashboardController.prototype.reinvite = function (invitationId) {
                var _this = this;
                this.$http.put("/company/invitations/reinvite/" + invitationId, {}).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Invitation Sent Again")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            DashboardController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "$state",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "HopscotchService",
                "$mdMenu",
                "$window"
            ];
            return DashboardController;
        }());
        app.controller("admin.DashboardController", DashboardController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var EmployeesController = /** @class */ (function () {
            function EmployeesController($http, $mdToast, $stateParams, SessionService, $mdDialog, $window) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$window = $window;
                this.$onInit = function () { };
                this.companyId = this.$stateParams.companyId;
                this.showInviteTeamMember = false;
                this.list();
            }
            EmployeesController.prototype.toggleInvite = function () {
                this.showInviteTeamMember = !this.showInviteTeamMember;
            };
            EmployeesController.prototype.goBackToPreviousPage = function () {
                this.$window.history.back();
            };
            EmployeesController.prototype.list = function () {
                var _this = this;
                this.$http.get("/admin/companies/employees/" + this.companyId)
                    .then(function (result) {
                    _this.employeeList = result.data;
                });
            };
            EmployeesController.prototype.reinvite = function (employeeid) {
                var _this = this;
                this.$http.get("/company/employees/reinvite/" + employeeid)
                    .then(function (result) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Invitation Sent Again to the Registered email id")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            EmployeesController.prototype.uninvite = function (employee) {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure?")
                    .textContent("The team member will be removed and won't be able to login.This is an irreversible action")
                    .ok("REMOVE")
                    .cancel("CANCEL")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.delete("/company/employees/delete/" + employee.id, {})
                        .then(function (result) {
                        var i = _this.employeeList.indexOf(employee);
                        _this.employeeList.splice(i, 1);
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Team Member Removed")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    }, function (error) {
                        _this.$mdToast.showSimple("Some error has happened. See console for details");
                        Rollbar.error(error);
                    });
                }, function () { });
            };
            EmployeesController.$inject = ["$http", "$mdToast", "$stateParams", "SessionService", "$mdDialog", "$window"];
            return EmployeesController;
        }());
        app.controller("admin.EmployeesController", EmployeesController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var EssayAnswersController = /** @class */ (function () {
            function EssayAnswersController($http, $mdToast, $stateParams, $state, SessionService, $timeout, hopscotchService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.$onInit = function () { };
                this.invitationid = $stateParams.invitationid;
                this.$http
                    .get("/admin/companies/essay-answers/" + this.invitationid)
                    .then(function (result) {
                    _this.candidateAnswer = result.data;
                });
            }
            EssayAnswersController.prototype.goBack = function () {
                window.history.back();
            };
            EssayAnswersController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "$state",
                "SessionService",
                "$timeout",
                "HopscotchService"
            ];
            return EssayAnswersController;
        }());
        app.controller("admin.EssayAnswersController", EssayAnswersController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var EssayQuestionsController = /** @class */ (function () {
            function EssayQuestionsController($http, $mdToast, $stateParams, $state, SessionService, $timeout, hopscotchService, $window) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.$window = $window;
                this.$onInit = function () { };
                this.interviewId = $stateParams.interviewId;
                this.plan = SessionService.getPlan();
                this.$http
                    .get("/company/questions/essay/" + this.interviewId)
                    .then(function (result) {
                    if (result.data.length > 0) {
                        _this.questions = result.data;
                        _this.originalNumberOfQuestions = _this.questions.length;
                        angular.forEach(_this.questions, function (q, i) {
                            q.timeallowedinmins = q.timeallowed / 60;
                        });
                    }
                    else {
                        for (var i = 1; i <= 1; i++) {
                            if (!_this.questions) {
                                _this.questions = [];
                            }
                            _this.questions.push({
                                order: i,
                                questionvalue: "",
                                timeallowed: 1
                            });
                        }
                    }
                    _this.updateTotal();
                    $("md-content").css("overflow", "visible");
                });
                this.$http
                    .get("/company/details-by-interview/" + this.interviewId)
                    .then(function (result) {
                    _this.roleCompany = result.data;
                });
            }
            EssayQuestionsController.prototype.goBackToPreviousPage = function () {
                this.$window.history.back();
            };
            EssayQuestionsController.prototype.loadIndustries = function () {
                var _this = this;
                this.$http.get("/candidate/video-cv/get-industries").then(function (result) {
                    _this.industries = result.data;
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            EssayQuestionsController.prototype.addQuestion = function (index) {
                var question = this.industryQuestions.questions[index];
                for (var i = 0; i < this.questions.length; i++) {
                    var value = this.questions[i];
                    if (!value || !value.questionvalue || !value.questionvalue.trim()) {
                        value.questionvalue = question;
                        this.industryQuestions.questions.splice(index, 1);
                        break;
                    }
                }
            };
            EssayQuestionsController.prototype.loadQuestions = function (industryId) {
                var _this = this;
                this.$http.get("/candidate/video-cv/get-question/" + industryId).then(function (result) {
                    _this.industryQuestions = result.data;
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            EssayQuestionsController.prototype.industryChanged = function () {
                var guid = this.chosenIndustry.guid;
                this.loadQuestions(guid);
            };
            EssayQuestionsController.prototype.addAdditionalQuestion = function () {
                if (this.questions[0].frozen) {
                    this.$mdToast.showSimple("Questions are frozen");
                }
                else {
                    if (this.questions.length < 10) {
                        this.questions.push({
                            order: this.questions.length + 1,
                            questionvalue: "",
                            timeallowed: 1,
                            newQuestion: true
                        });
                    }
                    else {
                        this.$mdToast.showSimple("Maximum questions limit reached");
                    }
                }
            };
            EssayQuestionsController.prototype.submitQuestions = function () {
                var _this = this;
                angular.forEach(this.questions, function (q, i) {
                    q.timeallowed = q.timeallowedinmins * 60;
                    q.timeallowedinmins = undefined;
                });
                this.$http
                    .post("/company/questions/essay/" + this.interviewId, this.questions)
                    .then(function (value) {
                }, function (error) {
                    _this.$mdToast.showSimple(error.name + " " + error.message);
                });
            };
            EssayQuestionsController.prototype.updateTotal = function () {
                var sum = 0;
                angular.forEach(this.questions, function (q, i) {
                    sum += q.timeallowedinmins || 0;
                });
                this.total = sum;
            };
            EssayQuestionsController.prototype.deleteQuestion = function (index) {
                this.questions.splice(index, 1);
                angular.forEach(this.questions, function (q, i) {
                    q.order = i + 1;
                });
            };
            EssayQuestionsController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "$state",
                "SessionService",
                "$timeout",
                "HopscotchService",
                "$window"
            ];
            return EssayQuestionsController;
        }());
        app.controller("admin.EssayQuestionsController", EssayQuestionsController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var moment;
        var InterviewsController = /** @class */ (function () {
            function InterviewsController($http, $mdToast, $scope, SessionService, $state, redirectIfNotLoggedIn, $timeout, hopscotchService, $mdDialog, $stateParams, $window) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$state = $state;
                this.redirectIfNotLoggedIn = redirectIfNotLoggedIn;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.$mdDialog = $mdDialog;
                this.$stateParams = $stateParams;
                this.$window = $window;
                this.showOnlyOneWayInterviews = false;
                this.multiPartInterviewArchiveList = [];
                this.multiPartyInterviews = [];
                this.allowOpenInvites = "No";
                this.liveInterview = false;
                this.jobDescription = "";
                this.responseDeadline = 180;
                this.allowedAttempts = 1;
                this.showSelect = false;
                this.archiveList = [];
                this.orderVariable = "-createdAt";
                this.multipartyOrderVariable = "daysToStart";
                this.search = "";
                this.$onInit = function () { };
                this.companyId = this.$stateParams.companyId;
                this.$http.get("/admin/companies/interviews/" + this.companyId).then(function (result) {
                    _this.interviews = result.data;
                    _this.allInterviews = result.data;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
                this.showCreateInterview = false;
            }
            InterviewsController.prototype.goBackToPreviousPage = function () {
                this.$window.history.back();
            };
            InterviewsController.prototype.toggleSelect = function (interview) {
                if (interview.checkedForArchive) {
                    this.archiveList.push(interview);
                }
                else {
                    var index = this.archiveList.indexOf(interview);
                    this.archiveList.splice(index, 1);
                }
            };
            InterviewsController.prototype.toggleSelectMultiparty = function (interview) {
                if (interview.checkedForArchive) {
                    this.multiPartInterviewArchiveList.push(interview);
                }
                else {
                    var index = this.multiPartInterviewArchiveList.indexOf(interview);
                    this.multiPartInterviewArchiveList.splice(index, 1);
                }
            };
            InterviewsController.prototype.cancelEdit = function (interview) {
                interview.isEdit = false;
            };
            InterviewsController.prototype.clickArchive = function () {
                this.showSelect = true;
            };
            InterviewsController.prototype.clickCancel = function () {
                this.showSelect = false;
                this.interviews.map(function (interview) {
                    delete interview.checkedForArchive;
                });
                this.multiPartyInterviews.map(function (interview) {
                    delete interview.checkedForArchive;
                });
            };
            InterviewsController.prototype.cancelInterview = function (interview) {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure?")
                    .textContent("Are you sure you wish to cancel this interview? You will not be able to undo this action")
                    .ok("Confirm")
                    .cancel("Back")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/company/multiparty/cancel-event/" + interview.id, {})
                        .then(function (result) {
                        interview.cancelled = true;
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Interview Cancelled")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    }, function (error) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Request failed. Please try again")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    });
                }, function () { });
            };
            InterviewsController.prototype.clickArchiveSelected = function () {
                var _this = this;
                this.showSelect = false;
                this.$http.put("/company/multiparty/archive-interviews", this.multiPartInterviewArchiveList).then((function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(_this.multiPartInterviewArchiveList.length + " Multiparty Interviews Archived Sucessfully...")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.showSelect = false;
                    _this.list();
                    _this.multiPartInterviewArchiveList = [];
                }));
                this.$http.put("/company/interviews/archive-jobs", this.archiveList).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(_this.archiveList.length + " Jobs Archived Sucessfully...")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.showSelect = false;
                    _this.list();
                    _this.archiveList = [];
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(error.data.message)
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                });
            };
            InterviewsController.prototype.checkSubscriptionStatus = function () {
                return this.$http.get("/company/subscriptions/check-status");
            };
            InterviewsController.prototype.toggleCreateInterview = function () {
                this.showCreateInterview = !this.showCreateInterview;
            };
            InterviewsController.prototype.edit = function (interview) {
                interview.isEdit = true;
            };
            InterviewsController.prototype.sortResultsAscending = function () {
                this.orderVariable = "creationDate";
            };
            InterviewsController.prototype.sortResultsDescending = function () {
                this.orderVariable = "-creationDate";
            };
            InterviewsController.prototype.isCreateInterviewFormValid = function () {
                if (this.allowOpenInvites === "Yes") {
                    if (angular.isDefined(this.job_role)) {
                        if (this.job_role.length > 0 && this.jobDescription.length > 0) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                    else {
                        return true;
                    }
                }
                else {
                    if (angular.isDefined(this.job_role)) {
                        if (this.job_role.length > 0) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    }
                    else {
                        return true;
                    }
                }
            };
            InterviewsController.prototype.update = function (interview) {
                var _this = this;
                interview.isEdit = false;
                var editInterview = {
                    role: interview.role,
                    guid: interview.guid,
                    jobDescription: interview.jobDescription,
                    responseDeadlineDays: interview.responseDeadlineDays,
                    attemptsAllowed: interview.attemptsAllowed
                };
                this.$http.put("/company/interviews/", editInterview).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Interview Edited Sucessfully...")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(error.data.message)
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                });
            };
            InterviewsController.prototype.activateJoinInterview = function (interview) {
                var today = new Date();
                var diffMs = interview.fromUTCDateTime - today.getTime(); // milliseconds between now & Christmas
                var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);
                var endTimeinMS = interview.fromUTCDateTime + ((interview.duration + 20) * 60 * 1000);
                var differenceInEndTimeAndNow = endTimeinMS - today.getTime();
                var fromDate = new Date(interview.fromUTCDateTime);
                if (fromDate.getFullYear() == today.getFullYear() && fromDate.getMonth() == today.getMonth() && fromDate.getDate() == today.getDate()) {
                    if (diffMins <= 15 && differenceInEndTimeAndNow >= 0) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                else {
                    return false;
                }
            };
            InterviewsController.prototype.disableCancelAndReschedule = function (interview) {
                var today = new Date();
                var diffMs = interview.fromUTCDateTime - today.getTime(); // milliseconds between now & Christmas
                var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);
                var endTimeinMS = interview.fromUTCDateTime + ((interview.duration + 20) * 60 * 1000);
                if (diffMins <= 15) {
                    return true;
                }
                else {
                    return false;
                }
            };
            InterviewsController.prototype.filter = function () {
                var _this = this;
                if (this.search != "") {
                    this.interviews = _.filter(this.allInterviews, function (obj) {
                        return (obj.role.toLowerCase().indexOf(_this.search.toLowerCase()) !== -1);
                    });
                    this.multiPartyInterviews = _.filter(this.allMultipartyInterviews, function (obj) {
                        return (obj.interviewName.toLowerCase().indexOf(_this.search.toLowerCase()) !== -1);
                    });
                }
                else {
                    this.interviews = this.allInterviews;
                    this.multiPartyInterviews = this.allMultipartyInterviews;
                }
            };
            InterviewsController.prototype.updateMultipartyEvent = function (interview) {
                var _this = this;
                interview.fromUTCDateTime = interview.newFromUTCDateTime;
                this.$http.put("/company/multiparty/reschedule-interview", interview).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Interview Rescheduled...")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    interview.isEdit = false;
                });
            };
            InterviewsController.prototype.list = function () {
                var _this = this;
                this.$http.get("/company/interviews/").then(function (result) {
                    _this.interviews = result.data;
                    _this.allInterviews = result.data;
                    _this.$timeout(function () {
                    }, 30);
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            InterviewsController.prototype.createMultipartyInterview = function () {
                var _this = this;
                this.$http.post("/company/multiparty/create-interview", this.newMultipartyInterview).then(function (result) {
                    _this.list();
                    _this.newMultipartyInterview.id = null;
                    _this.newMultipartyInterview.interviewName = null;
                    _this.newMultipartyInterview.jobDescription = null;
                    _this.showCreateInterview = false;
                });
            };
            InterviewsController.prototype.showReschedule = function (multipartyInterview) {
                multipartyInterview.isEdit = true;
            };
            InterviewsController.prototype.create = function () {
                var _this = this;
                var allowOpeninvite = this.allowOpenInvites === "Yes" ? true : false;
                this.$http
                    .post("/company/interviews/", {
                    role: this.job_role,
                    deadline: this.responseDeadline,
                    allowOpenInvites: allowOpeninvite,
                    jobDescription: this.jobDescription,
                    allowedAttempts: this.allowedAttempts
                })
                    .then(function (result) {
                    if (_this.interviews) {
                        _this.interviews.push(result.data);
                    }
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Interview created,now add questions")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.showCreateInterview = false;
                    _this.job_role = "";
                    _this.allowedAttempts = 1;
                    _this.responseDeadline = 180;
                    _this.jobDescription = "";
                    _this.allowOpenInvites = "No";
                }, function (error) {
                    _this.showCreateInterview = false;
                    _this.job_role = "";
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(error.data.message)
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            InterviewsController.$inject = [
                "$http",
                "$mdToast",
                "$scope",
                "SessionService",
                "$state",
                "redirectIfNotLoggedIn",
                "$timeout",
                "HopscotchService",
                "$mdDialog",
                "$stateParams",
                "$window"
            ];
            return InterviewsController;
        }());
        app.controller("admin.InterviewsController", InterviewsController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var LoginController = /** @class */ (function () {
            function LoginController($http, $mdToast, session, $state, $mdDialog, hopscotchService, $stateParams) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.hopscotchService = hopscotchService;
                this.$stateParams = $stateParams;
                this.password = '';
                this.otpSent = false;
                this.otpValidated = false;
                this.$onInit = function () { };
                Rollbar.info("User is on the admin login page");
            }
            LoginController.prototype.sendResetLink = function () {
                var _this = this;
                var frDTO = { userNameOrEmail: this.userNameOrEmail.toLowerCase() };
                this.$http.post("/company/password/forgot-password", frDTO).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("A link has been sent your email")
                        .hideDelay(10000)
                        .position('top left')
                        .theme("toasttheme"));
                    _this.$mdDialog.hide();
                    _this.userNameOrEmail = "";
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Request failed. Please try again")
                        .hideDelay(10000)
                        .position('top left')
                        .theme("toasttheme"));
                    _this.userNameOrEmail = "";
                    //this.$mdDialog.hide();
                });
            };
            LoginController.prototype.requestOtp = function (code) {
                var _this = this;
                this.$http.put("/admin/otp/", { email: code, otp: null }).then(function (result) {
                    _this.otpSent = true;
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent(error.data.message)
                        .hideDelay(10000)
                        .position('top left')
                        .theme("toasttheme"));
                    //this.$mdDialog.hide();
                });
            };
            LoginController.prototype.validateOtp = function (code, otp) {
                var _this = this;
                this.$http.put("/admin/otp/validate", { email: code, otp: otp }).then(function (result) {
                    _this.otpValidated = true;
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent(error.data.message)
                        .hideDelay(10000)
                        .position('top left')
                        .theme("toasttheme"));
                    //this.$mdDialog.hide();
                });
            };
            LoginController.prototype.forgotPassword = function () {
                this.passwordDialog = this.$mdDialog.show({
                    controller: LoginController,
                    controllerAs: "home",
                    bindToController: true,
                    templateUrl: 'views/company/dialogs/forgot-password.html',
                    parent: angular.element(document.body),
                    // locals: { openInviteLink: this.openInviteLink },
                    clickOutsideToClose: true,
                    escapeToClose: true
                    // Only for -xs, -sm breakpoints.
                }).then(function () {
                    console.debug("You clicked the button to close the bottom sheet");
                })
                    .catch(function () {
                    console.debug("You clicked cancel button");
                });
            };
            LoginController.prototype.login = function (code, password) {
                var _this = this;
                if (code.indexOf('@') != -1) {
                    code = code.toLowerCase();
                }
                var dto = {
                    username: code,
                    password: password
                };
                this.$http.post("/login", dto).then(function (result) {
                    _this.session.setToken(result.headers("Authorization"));
                    //this.hopscotchService.getPastTours();
                    if (_this.session.isAdmin()) {
                        _this.$state.go("root.admin.dashboard", {}, {
                            reload: true
                        });
                    }
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Login Failed")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            LoginController.prototype.checkSubscriptionStatus = function () {
                return this.$http.get("/company/subscriptions/check-status");
            };
            LoginController.$inject = ["$http", "$mdToast", "SessionService", "$state", "$mdDialog", "HopscotchService", "$stateParams"];
            return LoginController;
        }());
        app.controller("admin.LoginController", LoginController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var SystemModuleController = /** @class */ (function () {
            function SystemModuleController($http, $mdToast, $stateParams, SessionService, $mdDialog, $window) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$window = $window;
                this.sort = 'name';
                this.resetEditSysteModuleData = function () {
                    //Reset
                    _this.showEditSystemModule = false;
                };
                this.update = function (moduleData) { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        try {
                            this.$http.put("/system/modules/", moduleData)
                                .then(function (result) {
                                _this.showToastMessage('Theme updated successfully!');
                                _this.list();
                            }, function (error) {
                                _this.$mdToast.showSimple("Some error has happened. See console for details");
                                Rollbar.error(error);
                            });
                            this.resetEditSysteModuleData();
                        }
                        catch (error) {
                            this.showEditSystemModule = false;
                            this.showToastMessage(error.data.message);
                            Rollbar.error(error);
                        }
                        return [2 /*return*/];
                    });
                }); };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position("top left")
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.$onInit = function () { };
                this.showEditSystemModule = false;
                this.list();
            }
            SystemModuleController.prototype.toggleEditModule = function (module) {
                this.editableModule = module;
                this.showEditSystemModule = !this.showEditSystemModule;
            };
            SystemModuleController.prototype.goBackToPreviousPage = function () {
                this.$window.history.back();
            };
            SystemModuleController.prototype.list = function () {
                var _this = this;
                this.$http.get("/system/modules/")
                    .then(function (result) {
                    _this.systemModuleList = result.data;
                });
            };
            SystemModuleController.prototype.updateSystemModuleStatus = function (module, status) {
                module.status = status;
                this.update(module);
            };
            SystemModuleController.$inject = ["$http", "$mdToast", "$stateParams", "SessionService", "$mdDialog", "$window"];
            return SystemModuleController;
        }());
        app.controller("admin.SystemModuleController", SystemModuleController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var PlayerController = /** @class */ (function () {
            function PlayerController($http, $mdToast, $window, $scope, $state, $stateParams, $location, $anchorScroll, $mdDialog) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$window = $window;
                this.$scope = $scope;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$location = $location;
                this.$anchorScroll = $anchorScroll;
                this.$mdDialog = $mdDialog;
                this.duration = 0;
                this.currentTime = 0;
                this.currentRecordingIndex = 0;
                this.showProgress = true;
                this.handleLoadedData = function (event) {
                    _this.showProgress = false;
                    _this.updateDom();
                };
                this.handleSeekingEvent = function (event) {
                    _this.showProgress = true;
                    _this.updateDom();
                };
                this.handleMetaData = function (event) {
                    _this.duration = event.target.duration;
                };
                this.handleTimeUpdateEvent = function (event) {
                    _this.currentVideoPercentage =
                        100.0 * event.target.currentTime / _this.duration;
                    _this.currentTime = event.target.currentTime;
                    _this.updateDom();
                    if (angular.isDefined(_this.currentAnswer) && angular.isDefined(_this.currentAnswer.endtime)) {
                        if (_this.currentTime >= _this.currentAnswer.endtime) {
                            _this.currentAnswer = _this.answers[_this.currentAnswer.indexNumber + 1];
                            _this.updateDom();
                        }
                    }
                };
                this.handleSeekEvent = function (event) {
                    _this.showProgress = false;
                    _this.updateDom();
                    _this.currentVideoPercentage =
                        100.0 * _this.videoElement.currentTime / _this.duration;
                    _this.currentTime = _this.videoElement.currentTime;
                    for (var i = 0; i < _this.answers.length; i++) {
                        if (_this.currentTime >= _this.answers[i].starttime && _this.currentTime < _this.answers[i].endtime) {
                            _this.currentAnswer = _this.answers[i];
                        }
                    }
                };
                this.$onInit = function () { };
                var query = Modernizr.mq('(max-width: 600px)');
                if (query) {
                    this.$location.hash("player-next-button");
                    this.$anchorScroll();
                }
                else {
                    $("#player-view").height($window.innerHeight - 96);
                    $window.addEventListener("resize", function () {
                        $("#player-view").height($window.innerHeight - 96);
                    });
                }
                this.recording = $stateParams.recording;
                this.recordings = $stateParams.recordings;
                if (angular.isUndefined(this.recording.videoURL)) {
                    this.$state.go("root.company.dashboard");
                }
                if (this.recording.videoURL.search(".*webm$") == -1) {
                    this.videoType = "video/mp4";
                }
                else {
                    this.videoType = "video/webm";
                }
                this.interviewId = $stateParams.interviewId;
                this.$http.get("/admin/companies/answers/" + this.recording.recordingId)
                    .then(function (result) {
                    _this.answers = result.data;
                    for (var i = 0; i < _this.answers.length; i++) {
                        _this.answers[i].indexNumber = i;
                    }
                    _this.currentRecordingIndex = _this.recordings.indexOf(_this.recording);
                    _this.currentAnswer = _this.answers[0];
                    _this.duration = _this.answers[_this.answers.length - 1].endtime;
                });
                this.videoElement = document.getElementById("player");
                if (is.ios() && is.safari()) {
                    this.showProgress = false;
                    this.updateDom();
                    this.videoElement.addEventListener("loadeddata", this.handleLoadedData, true);
                }
                else {
                    this.videoElement.addEventListener("loadeddata", this.handleLoadedData, true);
                }
            }
            ;
            PlayerController.prototype.goBackToPreviousPage = function () {
                this.$window.history.back();
            };
            PlayerController.prototype.jumpToAnswer = function (index) {
                this.currentAnswer = this.answers[index];
                this.videoElement.currentTime = this.currentAnswer.starttime;
                this.currentTime = this.currentAnswer.starttime;
                this.currentVideoPercentage =
                    100.0 * this.videoElement.currentTime / this.duration;
                this.updateDom();
            };
            PlayerController.prototype.jumpToCandidate = function (recordingIndex) {
                var _this = this;
                this.recording = this.recordings[recordingIndex];
                if (this.recording.videoURL.search(".*webm$") === -1) {
                    this.videoType = "video/mp4";
                }
                else {
                    this.videoType = "video/webm";
                }
                this.videoElement.removeEventListener("timeupdate", this.handleTimeUpdateEvent, true);
                this.videoElement.removeEventListener("loadedmetadata", this.handleMetaData, true);
                this.videoElement.removeEventListener("seeked", this.handleSeekEvent, true);
                this.videoElement.removeEventListener("seeking", this.handleSeekingEvent, true);
                this.currentRecordingIndex = recordingIndex;
                this.videoElement.pause();
                if (this.recording.vzaarURL === null || this.recording.vzaarURL == "" || this.recording.vzaarURL == null) {
                    this.videoElement.src = this.recording.videoURL;
                }
                else {
                    this.videoElement.src = this.recording.vzaarURL;
                }
                this.$http.get("/admin/companies/answers/" + this.recording.recordingId)
                    .then(function (result) {
                    _this.answers = result.data;
                    for (var i = 0; i < _this.answers.length; i++) {
                        _this.answers[i].indexNumber = i;
                    }
                    _this.currentAnswer = _this.answers[_this.currentAnswer.indexNumber];
                    _this.videoElement.currentTime = _this.currentAnswer.starttime;
                    _this.currentTime = _this.currentAnswer.starttime;
                    var duration = _this.answers[_this.answers.length - 1].endtime;
                    _this.duration = duration;
                    _this.currentVideoPercentage =
                        100.0 * _this.currentTime / duration;
                    _this.updateDom();
                });
            };
            PlayerController.prototype.cancel = function () {
                this.$mdDialog.hide();
            };
            PlayerController.prototype.ratedOne = function (rating, recording) {
                rating.value = 1;
            };
            PlayerController.prototype.ratedZero = function (rating, recording) {
                rating.value = 0;
            };
            PlayerController.prototype.ratedTwo = function (rating, recording) {
                rating.value = 2;
            };
            PlayerController.prototype.ratedThree = function (rating, recording) {
                rating.value = 3;
            };
            PlayerController.prototype.ratedFour = function (rating, recording) {
                rating.value = 4;
            };
            PlayerController.prototype.ratedFive = function (rating, recording) {
                rating.value = 5;
            };
            PlayerController.prototype.seek = function () {
                var newTime = Math.floor(this.currentVideoPercentage * this.duration / 100);
                if (!isNaN(newTime)) {
                    this.videoElement.currentTime = newTime || 0;
                }
            };
            PlayerController.prototype.play = function () {
                if (this.videoElement.paused) {
                    this.videoElement.play();
                    this.videoElement.addEventListener("timeupdate", this.handleTimeUpdateEvent, true);
                    this.videoElement.addEventListener("loadedmetadata", this.handleMetaData, true);
                    this.videoElement.addEventListener("seeking", this.handleSeekingEvent, true);
                    this.videoElement.addEventListener("seeked", this.handleSeekEvent, true);
                }
                else {
                    this.videoElement.pause();
                }
            };
            PlayerController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            PlayerController.prototype.mute = function () {
                if (this.videoElement.muted) {
                    this.videoElement.muted = false;
                }
                else {
                    this.videoElement.muted = true;
                }
            };
            PlayerController.prototype.secondsToMMSS = function (t) {
                if (isNaN(t)) {
                    return "00:00";
                }
                var minutes = Math.floor(t / 60.0);
                var seconds = Math.floor(t % 60);
                return ((minutes < 10 ? "0" : "") +
                    minutes +
                    ":" +
                    (seconds < 10 ? "0" : "") +
                    seconds);
            };
            PlayerController.prototype.goBack = function () {
            };
            PlayerController.prototype.getNumber = function (num) {
                return new Array(num);
            };
            PlayerController.prototype.getIcon = function (rating, index) {
                if (angular.isUndefined(rating.value) || rating.value < index + 1) {
                    return "star_border";
                }
                else if (rating.value >= index + 1) {
                    return "star";
                }
            };
            PlayerController.prototype.rated = function (rating, value) {
                rating.value = value;
            };
            PlayerController.$inject = [
                "$http",
                "$mdToast",
                "$window",
                "$scope",
                "$state",
                "$stateParams",
                "$location",
                "$anchorScroll",
                "$mdDialog"
            ];
            return PlayerController;
        }());
        app.controller("admin.PlayerController", PlayerController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var QuestionsController = /** @class */ (function () {
            function QuestionsController($http, $mdToast, $stateParams, $state, SessionService, $timeout, hopscotchService, $window) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.$window = $window;
                this.$onInit = function () { };
                this.interviewId = $stateParams.interviewId;
                this.plan = SessionService.getPlan();
                this.$http
                    .get("/company/questions/" + this.interviewId)
                    .then(function (result) {
                    if (result.data.length > 0) {
                        _this.questions = result.data;
                        _this.originalNumberOfQuestions = _this.questions.length;
                        angular.forEach(_this.questions, function (q, i) {
                            q.timeallowedinmins = q.timeallowed / 60;
                        });
                    }
                    else {
                        for (var i = 1; i <= 5; i++) {
                            if (!_this.questions) {
                                _this.questions = [];
                            }
                            _this.questions.push({
                                order: i,
                                questionvalue: "",
                                timeallowed: 1
                            });
                        }
                    }
                    _this.updateTotal();
                    $("md-content").css("overflow", "visible");
                });
                this.$http
                    .get("/company/details-by-interview/" + this.interviewId)
                    .then(function (result) {
                    _this.roleCompany = result.data;
                });
            }
            QuestionsController.prototype.loadIndustries = function () {
                var _this = this;
                this.$http.get("/candidate/video-cv/get-industries").then(function (result) {
                    _this.industries = result.data;
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            QuestionsController.prototype.addQuestion = function (index) {
                var question = this.industryQuestions.questions[index];
                for (var i = 0; i < this.questions.length; i++) {
                    var value = this.questions[i];
                    if (!value || !value.questionvalue || !value.questionvalue.trim()) {
                        value.questionvalue = question;
                        this.industryQuestions.questions.splice(index, 1);
                        break;
                    }
                }
            };
            QuestionsController.prototype.loadQuestions = function (industryId) {
                var _this = this;
                this.$http.get("/candidate/video-cv/get-question/" + industryId).then(function (result) {
                    _this.industryQuestions = result.data;
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            QuestionsController.prototype.industryChanged = function () {
                var guid = this.chosenIndustry.guid;
                this.loadQuestions(guid);
            };
            QuestionsController.prototype.goBackToPreviousPage = function () {
                this.$window.history.back();
            };
            QuestionsController.prototype.addAdditionalQuestion = function () {
                if (this.questions[0].frozen) {
                    this.$mdToast.showSimple("Questions are frozen");
                }
                else {
                    if (this.questions.length < 10) {
                        this.questions.push({
                            order: this.questions.length + 1,
                            questionvalue: "",
                            timeallowed: 1,
                            newQuestion: true
                        });
                    }
                    else {
                        this.$mdToast.showSimple("Maximum questions limit reached");
                    }
                }
            };
            QuestionsController.prototype.submitQuestions = function () {
                var _this = this;
                angular.forEach(this.questions, function (q, i) {
                    q.timeallowed = q.timeallowedinmins * 60;
                    q.timeallowedinmins = undefined;
                });
                if (this.questions.every(function (v, i) {
                    if (v.guid || v.newQuestion) {
                        return true;
                    }
                    else {
                        return false;
                    }
                })) {
                    this.$http.put("/company/questions/", this.questions).then(function (value) {
                    }, function (error) {
                        _this.$mdToast.showSimple(error.name + " " + error.message);
                    });
                }
                else {
                    this.$http
                        .post("/company/questions/" + this.interviewId, this.questions)
                        .then(function (value) {
                    }, function (error) {
                        _this.$mdToast.showSimple(error.name + " " + error.message);
                    });
                }
            };
            QuestionsController.prototype.updateTotal = function () {
                var sum = 0;
                angular.forEach(this.questions, function (q, i) {
                    sum += q.timeallowedinmins || 0;
                });
                this.total = sum;
            };
            QuestionsController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "$state",
                "SessionService",
                "$timeout",
                "HopscotchService",
                "$window"
            ];
            return QuestionsController;
        }());
        app.controller("admin.QuestionsController", QuestionsController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var RecordingsController = /** @class */ (function () {
            function RecordingsController($http, $mdToast, $state, $stateParams, SessionService, $mdDialog, $timeout, hopscotchService, $scope, $window) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.$scope = $scope;
                this.$window = $window;
                this.search = "";
                this.orderVariable = "-recordingDate";
                this.$onInit = function () { };
                this.interviewId = $stateParams.interviewId;
                this.list();
            }
            RecordingsController.prototype.ratedOne = function (rating, recording) {
                rating.value = 1;
            };
            RecordingsController.prototype.ratedZero = function (rating, recording) {
                rating.value = 0;
            };
            RecordingsController.prototype.ratedTwo = function (rating, recording) {
                rating.value = 2;
            };
            RecordingsController.prototype.ratedThree = function (rating, recording) {
                rating.value = 3;
            };
            RecordingsController.prototype.ratedFour = function (rating, recording) {
                rating.value = 4;
            };
            RecordingsController.prototype.ratedFive = function (rating, recording) {
                rating.value = 5;
            };
            RecordingsController.prototype.getNumber = function (num) {
                return new Array(num);
            };
            RecordingsController.prototype.goBackToPreviousPage = function () {
                this.$window.history.back();
            };
            RecordingsController.prototype.getIcon = function (rating, index) {
                if (angular.isUndefined(rating.value) || rating.value < index + 1) {
                    return "star_border";
                }
                else if (rating.value >= index + 1) {
                    return "star";
                }
            };
            RecordingsController.prototype.rated = function (rating, value) {
                rating.value = value;
            };
            RecordingsController.prototype.showCandidateFeedback = function (recording) {
                this.linkDialog = this.$mdDialog
                    .show({
                    controller: RecordingsController,
                    controllerAs: "recordings",
                    bindToController: true,
                    templateUrl: "views/company/dialogs/candidate-feedback.html",
                    parent: angular.element(document.body),
                    locals: { feedback: recording.candidateFeedback },
                    clickOutsideToClose: true,
                    escapeToClose: true
                    // Only for -xs, -sm breakpoints.
                })
                    .then(function () {
                    console.debug("You clicked the button to close the bottom sheet");
                })
                    .catch(function () {
                    console.debug("You clicked cancel button");
                });
            };
            RecordingsController.prototype.showRatingsDialog = function (recording) {
                var _this = this;
                if (recording.interviewVersion === 1) {
                    this.ratingsDialog = this.$mdDialog
                        .show({
                        controller: RecordingsController,
                        controllerAs: "recordings",
                        bindToController: true,
                        templateUrl: "views/company/dialogs/rating.html",
                        parent: angular.element(document.body),
                        locals: { currentRecording: recording },
                        clickOutsideToClose: true,
                        escapeToClose: true
                        // Only for -xs, -sm breakpoints.
                    })
                        .then(function () {
                        console.debug("You clicked the button to close the bottom sheet");
                    })
                        .catch(function () {
                        console.debug("You clicked cancel button");
                    });
                }
                else {
                    this.$http
                        .get("/company/ratings/rating-dimensions/" + recording.interviewId)
                        .then(function (result) {
                        _this.ratingDimensions = result.data;
                        if (result.data.length < 1) {
                            _this.hasDimensionsSet = false;
                        }
                        else {
                            _this.hasDimensionsSet = true;
                        }
                        if (_this.hasDimensionsSet) {
                            _this.ratingsDialog = _this.$mdDialog
                                .show({
                                controller: RecordingsController,
                                controllerAs: "recording",
                                bindToController: true,
                                templateUrl: "views/company/dialogs/oneway-recordings-rating.html",
                                parent: angular.element(document.body),
                                locals: {
                                    ratings: _this.ratingDimensions,
                                    recording: recording
                                },
                                clickOutsideToClose: true,
                                escapeToClose: true
                                // Only for -xs, -sm breakpoints.
                            })
                                .then(function () {
                                console.debug("You clicked the button to close the bottom sheet");
                            })
                                .catch(function () {
                                console.debug("You clicked cancel button");
                            });
                        }
                        else {
                            _this.$mdToast.showSimple("Please set the rating dimensions in the settings for this interview");
                        }
                    });
                }
            };
            RecordingsController.prototype.saveRating = function (recording) {
                var _this = this;
                var comments;
                if (angular.isUndefined(this.comment)) {
                    comments = " ";
                }
                else {
                    comments = this.comment;
                }
                for (var _i = 0, _a = this.ratings; _i < _a.length; _i++) {
                    var rating = _a[_i];
                    if (rating.value == null) {
                        rating.value = 0;
                    }
                }
                var userRating = {
                    comment: comments,
                    ratingDimensionDTOList: this.ratings
                };
                this.$http.post("/company/ratings/rate/" + recording.recordingId, userRating).then(function () {
                    recording.hasRated = true;
                    _this.list();
                    _this.$http
                        .get("/company/ratings/get-rating-by-user/" + recording.recordingId)
                        .then(function (result) {
                        recording.userRatings = result.data;
                    });
                    _this.$mdDialog.hide();
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            RecordingsController.prototype.rate = function () {
                var _this = this;
                this.rating = {
                    comment: this.currentRecording.comment,
                    ratings: this.currentRecording.userRatings
                };
                this.$http
                    .post("/company/recordings/rate/" + this.currentRecording.recordingId, this.rating)
                    .then(function () {
                    _this.currentRecording.userComment = _this.currentRecording.comment;
                    _this.currentRecording.hasRated = true;
                    var ratings = _this.currentRecording.averageRatings;
                    if (_this.currentRecording.hasRatings) {
                        for (var i = 0; i < _this.currentRecording.averageRatings.length; i++) {
                            ratings[i].dimensionName = _this.currentRecording.averageRatings[i].dimensionName;
                            ratings[i].ratingTypeId = _this.currentRecording.averageRatings[i].ratingTypeId;
                            ratings[i].value =
                                _this.currentRecording.averageRatings[i].value *
                                    _this.currentRecording.reviewersCount;
                        }
                        var sumOfAverage = 0;
                        for (var i = 0; i < _this.currentRecording.userRatings.length; i++) {
                            for (var j = 0; j < ratings.length; j++)
                                if (ratings[j].ratingTypeId ===
                                    _this.currentRecording.userRatings[i].ratingTypeId) {
                                    var newAverage = (ratings[j].value +
                                        _this.currentRecording.userRatings[i].value) /
                                        (_this.currentRecording.reviewersCount + 1);
                                    ratings[j].value = newAverage;
                                    sumOfAverage += newAverage;
                                }
                        }
                        _this.currentRecording.averageRatings = ratings;
                        _this.currentRecording.sumOfAverageRatings = sumOfAverage;
                    }
                    else {
                        if (_this.currentRecording.reviewersCount == 0) {
                            _this.currentRecording.reviewersCount = 1;
                            _this.currentRecording.averageRatings = _this.currentRecording.userRatings;
                            _this.currentRecording.hasRatings = true;
                            for (var i = 0; i < _this.currentRecording.userRatings.length; i++) {
                                _this.currentRecording.sumOfAverageRatings += _this.currentRecording.userRatings[i].value;
                            }
                        }
                    }
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Ratings Submitted")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.$mdDialog.hide();
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            RecordingsController.prototype.cancel = function () {
                this.$mdDialog.hide();
            };
            RecordingsController.prototype.filter = function () {
                var _this = this;
                if (this.search != "") {
                    this.recordingsList = _.filter(this.allRecordingsList, function (obj) {
                        return (obj.candidateName
                            .toLowerCase()
                            .indexOf(_this.search.toLowerCase()) !== -1);
                    });
                }
                else {
                    this.recordingsList = this.allRecordingsList;
                }
            };
            RecordingsController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            RecordingsController.prototype.list = function () {
                var _this = this;
                this.$http
                    .get("/admin/companies/recordings", {
                    params: { interviewid: this.interviewId }
                })
                    .then(function (result) {
                    _this.recordingsList = result.data;
                    _this.allRecordingsList = result.data;
                    _this.updateDom();
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            RecordingsController.prototype.milliSecondsToMMSS = function (t) {
                if (isNaN(t)) {
                    return "00:00";
                }
                t = Math.floor(t / 1000);
                var minutes = Math.floor(t / 60.0);
                var seconds = Math.floor(t % 60);
                return ((minutes < 10 ? "0" : "") +
                    minutes +
                    ":" +
                    (seconds < 10 ? "0" : "") +
                    seconds);
            };
            RecordingsController.prototype.isBlank = function (s) {
                if (s) {
                    // To appease Typescript, while converting value to truthy value.
                    return false;
                }
                else {
                    return true;
                }
            };
            RecordingsController.$inject = [
                "$http",
                "$mdToast",
                "$state",
                "$stateParams",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "HopscotchService",
                "$scope",
                "$window"
            ];
            return RecordingsController;
        }());
        app.controller("admin.RecordingsController", RecordingsController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var ReportsController = /** @class */ (function () {
            function ReportsController($http, $mdToast, $stateParams, $state, SessionService, $mdDialog, $timeout, hopscotchService, $mdMenu) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.$mdMenu = $mdMenu;
                this.maxDate = new Date();
                this.$onInit = function () { };
                this.showGenerateReport = true;
            }
            ReportsController.prototype.toggleGenerateReport = function () {
                this.showGenerateReport = !this.showGenerateReport;
            };
            ReportsController.prototype.downloadReport = function () {
                var _this = this;
                var url = null;
                this.$http.get("/admin/companies/report").then(function (result) {
                    url = result.data.reportURL;
                    var a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    // the filename you want
                    a.download = 'Report.csv';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReportsController.prototype.generate = function () {
                var _this = this;
                var url = null;
                this.$http.post("/admin/reports", { from: this.fromDate, to: this.toDate }).then(function (result) {
                    url = result.data.reportURL;
                    var a = document.createElement('a');
                    a.style.display = 'none';
                    a.href = url;
                    // the filename you want
                    a.download = 'Report.csv';
                    document.body.appendChild(a);
                    a.click();
                    window.URL.revokeObjectURL(url);
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReportsController.prototype.generateReports = function () {
                this.$state.go("root.company.dynamic-report", {
                    reportOrigin: true,
                    startDate: this.formatDate(this.fromDate),
                    endDate: this.formatDate(this.toDate),
                    reportType: "All"
                });
            };
            ReportsController.prototype.formatDate = function (dateObj) {
                var dd = dateObj.getDate().toString();
                var mm = (dateObj.getMonth() + 1).toString();
                var yyyy = dateObj.getFullYear();
                if (Number(dd) < 10) {
                    dd = '0' + dd;
                }
                if (Number(mm) < 10) {
                    mm = '0' + mm;
                }
                return yyyy + '-' + mm + '-' + dd;
            };
            ReportsController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "$state",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "HopscotchService",
                "$mdMenu"
            ];
            return ReportsController;
        }());
        app.controller("admin.ReportsController", ReportsController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var SystemSettingsController = /** @class */ (function () {
            function SystemSettingsController($http, $mdToast, $stateParams, SessionService, $mdDialog, $window) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$window = $window;
                this.sort = 'description';
                this.resetEditSysteSettingData = function () {
                    //Reset
                    _this.showEditSystemSetting = false;
                };
                this.update = function (settingData) { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        try {
                            this.$http.put("/system/settings/" + settingData.id, settingData)
                                .then(function (result) {
                                _this.showToastMessage('Settings updated successfully!');
                                _this.list();
                            }, function (error) {
                                _this.$mdToast.showSimple("Some error has happened. See console for details");
                                Rollbar.error(error);
                            });
                            this.resetEditSysteSettingData();
                        }
                        catch (error) {
                            this.showEditSystemSetting = false;
                            this.showToastMessage(error.data.message);
                            Rollbar.error(error);
                        }
                        return [2 /*return*/];
                    });
                }); };
                /*public updateSystemModuleStatus(module: ISystemModule, status: string): void {
                  module.status = status;
                  this.update(module);
                }*/
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position("top left")
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.$onInit = function () { };
                this.settingGroup = "slate";
                if ($stateParams.group) {
                    this.settingGroup = $stateParams.group;
                }
                else {
                    this.$window.history.back();
                }
                this.showEditSystemSetting = false;
                this.list();
            }
            SystemSettingsController.prototype.toggleEditSetting = function (setting) {
                this.editableSetting = setting;
                this.showEditSystemSetting = !this.showEditSystemSetting;
            };
            SystemSettingsController.prototype.goBackToPreviousPage = function () {
                this.$window.history.back();
            };
            SystemSettingsController.prototype.list = function () {
                var _this = this;
                this.$http.get("/system/settings/" + this.settingGroup)
                    .then(function (result) {
                    _this.systemSettingsList = result.data;
                });
            };
            SystemSettingsController.$inject = ["$http", "$mdToast", "$stateParams", "SessionService", "$mdDialog", "$window"];
            return SystemSettingsController;
        }());
        app.controller("admin.SystemSettingsController", SystemSettingsController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var WhiteLabelController = /** @class */ (function () {
            function WhiteLabelController($http, $mdToast, $stateParams, SessionService, $mdDialog, $window) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$window = $window;
                this.sort = '-createdAt';
                this.resetNewWhiteLabelData = function () {
                    //Reset
                    _this.showAddWhiteLabel = false;
                };
                this.resetEditWhiteLabelData = function () {
                    //Reset
                    _this.showEditWhiteLabel = false;
                };
                this.create = function (themeData) { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        try {
                            this.$http.post("/system/whitelabel/", themeData)
                                .then(function (result) {
                                _this.showToastMessage('Theme created successfully!');
                                _this.list();
                            }, function (error) {
                                _this.$mdToast.showSimple("Some error has happened. See console for details");
                                Rollbar.error(error);
                            });
                            this.resetNewWhiteLabelData();
                        }
                        catch (error) {
                            this.showAddWhiteLabel = false;
                            this.showToastMessage(error.data.message);
                            Rollbar.error(error);
                        }
                        return [2 /*return*/];
                    });
                }); };
                this.update = function (themeData) { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        try {
                            this.$http.put("/system/whitelabel/", themeData)
                                .then(function (result) {
                                _this.showToastMessage('Theme updated successfully!');
                                _this.list();
                            }, function (error) {
                                _this.$mdToast.showSimple("Some error has happened. See console for details");
                                Rollbar.error(error);
                            });
                            this.resetEditWhiteLabelData();
                        }
                        catch (error) {
                            this.showEditWhiteLabel = false;
                            this.showToastMessage(error.data.message);
                            Rollbar.error(error);
                        }
                        return [2 /*return*/];
                    });
                }); };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position("top left")
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.$onInit = function () { };
                this.showAddWhiteLabel = false;
                this.list();
            }
            WhiteLabelController.prototype.toggleAddWhiteLabel = function () {
                this.showAddWhiteLabel = !this.showAddWhiteLabel;
            };
            WhiteLabelController.prototype.toggleEditWhiteLabel = function (theme) {
                this.editableTheme = theme;
                this.showEditWhiteLabel = !this.showEditWhiteLabel;
            };
            WhiteLabelController.prototype.updateWhiteLabelThemeStatus = function (theme, status) {
                theme.status = status;
                this.update(theme);
            };
            WhiteLabelController.prototype.goBackToPreviousPage = function () {
                this.$window.history.back();
            };
            WhiteLabelController.prototype.list = function () {
                var _this = this;
                this.$http.get("/system/whitelabel/")
                    .then(function (result) {
                    _this.whiteLabelThemeList = result.data;
                });
            };
            WhiteLabelController.prototype.delete = function (theme) {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure?")
                    .textContent("The White Label theme will be deleted.This is an irreversible action")
                    .ok("REMOVE")
                    .cancel("CANCEL")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.delete("/system/whitelabel/delete/" + theme.id, {})
                        .then(function (result) {
                        var i = _this.whiteLabelThemeList.indexOf(theme);
                        _this.whiteLabelThemeList.splice(i, 1);
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Team Member Removed")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    }, function (error) {
                        _this.$mdToast.showSimple("Some error has happened. See console for details");
                        Rollbar.error(error);
                    });
                }, function () { });
            };
            WhiteLabelController.$inject = ["$http", "$mdToast", "$stateParams", "SessionService", "$mdDialog", "$window"];
            return WhiteLabelController;
        }());
        app.controller("admin.WhiteLabelController", WhiteLabelController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var BandwidthController = /** @class */ (function () {
            function BandwidthController($http, $mdToast, $scope, $q, $window, $state, $stateParams, $interval) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.$q = $q;
                this.$window = $window;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$interval = $interval;
                this.$onInit = function () { };
                this.interviewGuid = $stateParams.interviewid;
            }
            BandwidthController.prototype.proceedToSetup = function () {
                this.$state.go("root.candidate.setup", { interviewid: this.interviewGuid });
            };
            BandwidthController.prototype.restartTest = function () {
                this.$window.location.reload();
            };
            BandwidthController.$inject = ["$http", "$mdToast", "$scope", "$q", "$window", "$state", "$stateParams", "$interval"];
            return BandwidthController;
        }());
        app.controller("candidate.BandwidthController", BandwidthController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var CandidateDocumentsController = /** @class */ (function () {
            function CandidateDocumentsController($http, $mdToast, $state, $mdDialog, $window, $stateParams, VideoService, $scope) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$window = $window;
                this.$stateParams = $stateParams;
                this.VideoService = VideoService;
                this.$scope = $scope;
                this.SUPPORTED_FORMATS = 'application/pdf, image/jpeg, application/msword, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.wordprocessingml.document, application/vnd.ms-powerpoint, application/vnd.openxmlformats-officedocument.presentationml.slideshow, application/vnd.openxmlformats-officedocument.presentationml.presentation, .doc, .docx, .ppt, .pptx';
                this.FILE_MAX_SIZE = 104857600;
                this.progress = 0;
                this.amazon = true;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/];
                    });
                }); };
                this.interviewid = $stateParams.interviewid;
                this.list();
                this.fileElement = document.getElementById("file");
                this.uploadReady = false;
                this.maxSizeExceeded = false;
                this.updateDom();
                this.fileElement.onchange = function (ev) {
                    _this.file = _this.fileElement.files[0];
                    _this.fileReader.readAsText(_this.file);
                };
                this.fileReader = new FileReader();
                this.fileReader.onloadend = function (ev) {
                    if (_this.file.size > _this.FILE_MAX_SIZE) {
                        _this.maxSizeExceeded = true;
                        _this.uploadReady = false;
                    }
                    else {
                        _this.maxSizeExceeded = false;
                        _this.uploadReady = true;
                    }
                    _this.updateDom();
                };
            }
            CandidateDocumentsController.prototype.list = function () {
                var _this = this;
                this.$http
                    .get("/candidates/invitation/get-documents/" + this.interviewid)
                    .then(function (result) {
                    _this.documents = result.data;
                });
            };
            CandidateDocumentsController.prototype.delete = function (document) {
                var _this = this;
                this.$http.delete("/candidates/invitation/delete-document/" + document.id).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("File deleted successfully")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.list();
                });
            };
            CandidateDocumentsController.prototype.upload = function () {
                var _this = this;
                this.formData = new FormData();
                this.formData.append("file", this.file);
                var filedto = { fileName: this.name, dateUploaded: null, url: null, id: null };
                var userBlob = new Blob([JSON.stringify(filedto)], { type: "application/json" });
                this.formData.append("filedto", userBlob);
                this.$http
                    .post("/candidates/invitation/upload-document/" + this.interviewid, this.formData, {
                    transformRequest: angular.identity,
                    headers: {
                        "Content-Type": undefined
                    }
                })
                    .then(function (result) {
                    _this.fileElement.value = null;
                    _this.file = null;
                    _this.list();
                    _this.name = "";
                    _this.updateDom();
                    _this.toggleUpload();
                    _this.uploadReady = false;
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("File uploaded successfully")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(error.data.message)
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                });
            };
            CandidateDocumentsController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            CandidateDocumentsController.prototype.toggleUpload = function () {
                if (this.showUpload) {
                    this.showUpload = false;
                }
                else {
                    this.showUpload = true;
                }
            };
            CandidateDocumentsController.prototype.goBack = function () {
                window.history.back();
            };
            CandidateDocumentsController.$inject = [
                "$http",
                "$mdToast",
                "$state",
                "$mdDialog",
                "$window",
                "$stateParams",
                "VideoService",
                "$scope"
            ];
            return CandidateDocumentsController;
        }());
        app.controller("candidate.CandidateDocumentsController", CandidateDocumentsController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var YT = {
            PlayerState: {
                ENDED: 0,
                PAUSED: 2,
            },
        };
        var CompanyIntroController = /** @class */ (function () {
            function CompanyIntroController($stateParams, $state, $scope, $mdToast, $mdDialog, candidateInvitationsService) {
                var _this = this;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.$scope = $scope;
                this.$mdToast = $mdToast;
                this.$mdDialog = $mdDialog;
                this.candidateInvitationsService = candidateInvitationsService;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b, hasWatchedVideo, introVideoURL, closingVideoURL, interviewVideos;
                    var _this = this;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _a = this;
                                return [4 /*yield*/, this.getInterview()];
                            case 1:
                                _a.interview = _c.sent();
                                _b = this.interview, hasWatchedVideo = _b.hasWatchedVideo, introVideoURL = _b.introVideoURL, closingVideoURL = _b.closingVideoURL;
                                interviewVideos = [
                                    {
                                        url: "https://res.cloudinary.com/dy6mmwhuq/video/upload/v1631678149/GGH%20Video%20Admission%20Platform/Instructional%20Videos/VA_Instructional_Video_GGH_jqx8kn.mp4",
                                        finishedWatching: hasWatchedVideo,
                                        displayOn: "intro"
                                    },
                                    introVideoURL && introVideoURL != null && {
                                        url: introVideoURL,
                                        finishedWatching: hasWatchedVideo,
                                        displayOn: "intro"
                                    },
                                    closingVideoURL && closingVideoURL != null && {
                                        url: closingVideoURL,
                                        finishedWatching: hasWatchedVideo,
                                        displayOn: "closing"
                                    },
                                ];
                                this.availableVideos = interviewVideos.filter(function (d) { return d != null && d.displayOn == _this.videoType; });
                                this.$scope.$watch(function () { return document.getElementById("intro-video") && _this.showingVideo.url; }, function (video) {
                                    if (video) {
                                        _this.player = new window.Plyr("#intro-video", {
                                            controls: ['play-large', 'play', 'progress', 'current-time', 'volume', 'captions', 'duration'],
                                            keyboard: { focused: false, global: false },
                                            fullscreen: { enabled: false }
                                        });
                                        var player_1 = _this.player;
                                        /*player.on(
                                          "pause",
                                          () => !player.isYouTube && !player.ended && player.play()
                                        );*/
                                        player_1.on("statechange", function (_a) {
                                            var code = _a.detail.code;
                                            return code !== YT.PlayerState.ENDED && player_1.play();
                                        });
                                        player_1.on("ended", function () { return _this.onVideoStateChanged({ data: 0 }); });
                                    }
                                });
                                this.$scope.$watch(function () { return _this.player && _this.showingVideo.url; }, function (video) {
                                    if (!video)
                                        return;
                                    var isYoutubeVideo = _this.showingVideo.url.includes("youtube.com");
                                    var player = _this.player;
                                    player.source = {
                                        type: "video",
                                        sources: [
                                            {
                                                type: isYoutubeVideo ? "video/youtube" : "video/mp4",
                                                provider: isYoutubeVideo ? "youtube" : undefined,
                                                src: _this.showingVideo.url,
                                            },
                                        ],
                                    };
                                    if (_this.hasClickedPlay)
                                        player.play();
                                });
                                this.showingVideo = this.availableVideos[0];
                                this.$scope.$on("$destroy", function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.player.destroy()];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                }); }); });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.changeShowingVideo = function (video) {
                    _this.showingVideo = video;
                    _this.updateDom();
                };
                this.onVideoStateChanged = function (_a) {
                    var data = _a.data;
                    return __awaiter(_this, void 0, void 0, function () {
                        var currentVideo, nextNotFinishedVideo, error_21;
                        var _this = this;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    currentVideo = this.availableVideos.find(function (video) { return video.url === _this.showingVideo.url; });
                                    if (currentVideo)
                                        currentVideo.finishedWatching = true;
                                    nextNotFinishedVideo = this.availableVideos.find(function (video) { return !video.finishedWatching; });
                                    this.hasClickedPlay = true; // user clicked, permission granted
                                    if (nextNotFinishedVideo)
                                        this.changeShowingVideo(nextNotFinishedVideo);
                                    if (!!nextNotFinishedVideo) return [3 /*break*/, 5];
                                    _b.label = 1;
                                case 1:
                                    _b.trys.push([1, 4, , 5]);
                                    if (!!this.interview.hasWatchedVideo) return [3 /*break*/, 3];
                                    return [4 /*yield*/, this.candidateInvitationsService.setFinishedWatchingInvitationVideos(this.interviewId)];
                                case 2:
                                    _b.sent();
                                    this.showToastMessage("Successfully finished watching video");
                                    _b.label = 3;
                                case 3:
                                    //Go To Dashboard
                                    if (this.videoType == "intro") {
                                        this.$state.go("root.candidate.dashboard");
                                    }
                                    else {
                                        setTimeout(function () { return _this.$state.go('root.candidate.goodbye', { invitationId: _this.interviewId }, { reload: true }); }, 1000);
                                    }
                                    return [3 /*break*/, 5];
                                case 4:
                                    error_21 = _b.sent();
                                    Rollbar.error(error_21);
                                    this.showToastMessage("There was an issue setting the introduction videos watch status");
                                    return [3 /*break*/, 5];
                                case 5:
                                    this.updateDom();
                                    return [2 /*return*/];
                            }
                        });
                    });
                };
                this.skipWatchingIntroVideo = function () { return __awaiter(_this, void 0, void 0, function () {
                    var videoTitle, dialog;
                    var _this = this;
                    return __generator(this, function (_a) {
                        videoTitle = this.videoType == "intro" ? "Introduction video" : "Closing video";
                        dialog = this.$mdDialog
                            .confirm()
                            .title("Are you sure?")
                            .textContent("")
                            .ok("I've Seen It, Skip")
                            .cancel("Continue Watching")
                            .theme("confirmdialog");
                        this.$mdDialog.show(dialog).then(function () { return __awaiter(_this, void 0, void 0, function () {
                            var error_22;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 3]);
                                        return [4 /*yield*/, this.candidateInvitationsService.setFinishedWatchingInvitationVideos(this.interviewId)];
                                    case 1:
                                        _a.sent();
                                        this.showToastMessage("Successfully skipped " + videoTitle);
                                        if (this.videoType == "intro") {
                                            this.$state.go("root.candidate.dashboard");
                                        }
                                        else {
                                            this.$state.go('root.candidate.goodbye', { invitationId: this.interviewId });
                                        }
                                        return [3 /*break*/, 3];
                                    case 2:
                                        error_22 = _a.sent();
                                        Rollbar.error(error_22);
                                        this.showToastMessage("There was an issue skipping " + videoTitle);
                                        return [3 /*break*/, 3];
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); });
                        return [2 /*return*/];
                    });
                }); };
                this.getInterview = function () { return __awaiter(_this, void 0, void 0, function () {
                    var error_23;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (this.$stateParams.interview != null)
                                    return [2 /*return*/, this.$stateParams.interview];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.candidateInvitationsService.getInvitation(this.interviewId)];
                            case 2: return [2 /*return*/, (_a.sent())];
                            case 3:
                                error_23 = _a.sent();
                                Rollbar.error(error_23);
                                this.showToastMessage("There was an issue retrieving the invitation");
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); };
                this.updateDom = function () {
                    if (!_this.$scope.$$phase)
                        _this.$scope.$apply();
                };
                this.showToastMessage = function (message) {
                    return _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position("top left")
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.interviewId = this.$stateParams.interviewId;
                this.videoType = this.$stateParams.video;
                this.hasClickedPlay = false;
            }
            CompanyIntroController.$inject = [
                "$stateParams",
                "$state",
                "$scope",
                "$mdToast",
                "$mdDialog",
                "candidate.invitationsService",
            ];
            return CompanyIntroController;
        }());
        app.controller("candidate.CompanyIntroController", CompanyIntroController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var CompleteCandidateProfileController = /** @class */ (function () {
            function CompleteCandidateProfileController($http, $mdToast, $state, $stateParams, $scope, SessionService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$onInit = function () { };
                this.fileElement = document.getElementById("file");
                this.fileReader = new FileReader();
                this.fileElement.onchange = function (ev) {
                    _this.file = _this.fileElement.files[0];
                    _this.fileReader.readAsDataURL(_this.file);
                };
                this.fileReader.onloadend = function (ev) {
                    _this.updateDom();
                };
            }
            CompleteCandidateProfileController.prototype.industryChanged = function () {
                var guid = this.chosenIndustry.guid;
            };
            CompleteCandidateProfileController.prototype.loadIndustries = function () {
                var _this = this;
                this.$http.get("/candidate/video-cv/get-industries").then(function (result) {
                    _this.industries = result.data;
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            CompleteCandidateProfileController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            CompleteCandidateProfileController.prototype.refreshToken = function () {
                var _this = this;
                var promise = this.$http.get("/me/refresh-token");
                promise.then(function (result) {
                    _this.SessionService.setToken(result.headers("Authorization"));
                }, function (error) {
                    Rollbar.error(JSON.stringify(error));
                });
                return promise;
            };
            CompleteCandidateProfileController.prototype.extractDomainFromEmail = function (email) {
                return email.split("@")[1];
            };
            CompleteCandidateProfileController.prototype.update = function () {
                var _this = this;
                this.$http.post("/candidate/profile/", this.updateCandidateProfile).then(function (result) {
                    _this.candidateProfileGuid = result.data.guid;
                    if (_this.file != null) {
                        _this.formData = new FormData();
                        _this.formData.append('file', _this.file);
                        _this.$http.post("/candidate/profile/upload-cv/" + _this.candidateProfileGuid, _this.formData, {
                            transformRequest: angular.identity,
                            headers: {
                                'Content-Type': undefined
                            }
                        }).then(function (result) {
                            _this.$state.go("root.candidate.dashboard");
                        });
                    }
                    else {
                        _this.$state.go("root.candidate.dashboard");
                    }
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Details Update Failed")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            CompleteCandidateProfileController.$inject = ["$http", "$mdToast", "$state", "$stateParams", "$scope", "SessionService"];
            return CompleteCandidateProfileController;
        }());
        app.controller("candidate.CompleteCandidateProfileController", CompleteCandidateProfileController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var EssayGoodbyeController = /** @class */ (function () {
            function EssayGoodbyeController($http, $mdToast, $stateParams, $state, SessionService, $mdDialog, $location, $window) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$location = $location;
                this.$window = $window;
                this.$onInit = function () { };
                this.interviewid = this.$stateParams.interviewid;
            }
            EssayGoodbyeController.prototype.ok = function () {
                var _this = this;
                var request = this.$mdDialog
                    .confirm()
                    .title("Would you like to take part in our survey?")
                    .textContent("Please take part in our short survey")
                    .ok("Yes")
                    .cancel("No")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    if (angular.isDefined(_this.feedback)) {
                        if (_this.feedback != '') {
                            var feedbackDTO = { feedbackText: _this.feedback };
                            _this.$http.post("/candidates/recording/essay-feedback/" + _this.interviewid, feedbackDTO).then(function (response) {
                                _this.$window.open("https://5qlive.com/5qlive-candidate-survey/", "_blank");
                                _this.$state.go("root.candidate.dashboard", {}, {
                                    reload: true
                                });
                            });
                        }
                    }
                    else {
                        _this.$state.go("root.candidate.dashboard", {}, {
                            reload: true
                        });
                    }
                }, function () {
                    if (angular.isDefined(_this.feedback)) {
                        if (_this.feedback != '') {
                            var feedbackDTO = { feedbackText: _this.feedback };
                            _this.$http.post("/candidates/recording/essay-feedback/" + _this.interviewid, feedbackDTO).then(function (response) {
                                _this.$state.go("root.candidate.dashboard", {}, {
                                    reload: true
                                });
                            });
                        }
                    }
                    else {
                        _this.$state.go("root.candidate.dashboard", {}, {
                            reload: true
                        });
                    }
                });
            };
            EssayGoodbyeController.$inject = ["$http", "$mdToast", "$stateParams", "$state", "SessionService", "$mdDialog", "$location", "$window"];
            return EssayGoodbyeController;
        }());
        app.controller("candidate.EssayGoodbyeController", EssayGoodbyeController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var InterviewEssayController = /** @class */ (function () {
            function InterviewEssayController($http, $mdToast, $scope, $q, $window, $state, $stateParams, $interval, isAttemptAllowed, $mdDialog, VideoService) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.$q = $q;
                this.$window = $window;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$interval = $interval;
                this.isAttemptAllowed = isAttemptAllowed;
                this.$mdDialog = $mdDialog;
                this.VideoService = VideoService;
                this.essayAnswers = [];
                this.$onInit = function () { };
                this.disableNextButton = true;
                this.updateDom();
                var query = Modernizr.mq('(max-width: 600px)');
                if (query) {
                    $("#root-bar").hide();
                    $("#interview-container").height(window.innerHeight);
                }
                else {
                    $("#interview-container").height(window.innerHeight - 96);
                }
                this.timerTheme = 'default';
                this.styleCountdownDisplay();
                this.invitationGuid = $stateParams.invitationGuid;
                this.answers = [];
                this.startTime = undefined;
                this.nextButtonText = "Next Question";
                this.currentQuestion = 0;
                this.isPublisherInitialized = $q.defer();
                this.canUserPublish = $q.defer();
                this.recordingStarted = $q.defer();
                this.successCallback();
            }
            InterviewEssayController.prototype.processVideo = function (audioVideoWebMURL) {
                this.disableNextButton = true;
                this.updateDom();
                if (this.timer)
                    this.$interval.cancel(this.timer);
                var recordRTC = this.recordRTC;
                var recordedBlob = recordRTC.getBlob();
                var stream = this.stream;
                stream.getAudioTracks().forEach(function (track) { return track.stop(); });
                stream.getVideoTracks().forEach(function (track) { return track.stop(); });
                recordRTC.getDataURL(function (dataURL) { });
                var blob = this.recordRTC.getBlob();
                var file = new File([blob], this.recordingGuid + '.webm', {
                    type: 'video/webm'
                });
                this.VideoService.storeVideo(file);
                $("#root-bar").show();
                this.$state.go("root.candidate.uploading", { recordingGuid: this.recordingGuid, answers: this.answers });
            };
            InterviewEssayController.prototype.nextQuestion = function () {
                var currentTime = new Date();
                var timeDiff = currentTime.valueOf() - this.startTime.valueOf();
                this.$http.post("/candidates/recording/essay-answer/" + this.invitationGuid, this.essayAnswers[this.currentQuestion]);
                if (this.currentQuestion === this.questions.length - 1) {
                    this.disableNextButton = true;
                    this.updateDom();
                    if (this.timer)
                        this.$interval.cancel(this.timer);
                    this.nextButtonText = "Please wait..";
                    this.answers[this.currentQuestion].end = timeDiff;
                    this.$state.go("root.candidate.essaygoodbye", { interviewid: this.invitationGuid }, {
                        reload: true
                    });
                }
                if (this.currentQuestion < this.questions.length - 1) {
                    this.disableNextButton = true;
                    this.updateDom();
                    if (this.timer)
                        this.$interval.cancel(this.timer);
                    if (this.currentQuestion === this.questions.length - 2) {
                        this.nextButtonText = "End Interview";
                    }
                    this.answers[this.currentQuestion].end = timeDiff;
                    this.currentQuestion += 1;
                    this.answers.push({
                        questionGuid: this.questions[this.currentQuestion].guid,
                        start: timeDiff,
                        end: timeDiff + 10000 //placeholder value
                    });
                    this.startTimer(currentTime, this.questions[this.currentQuestion].timeallowed, this.currentQuestion);
                }
            };
            InterviewEssayController.prototype.startTimer = function (startTime, limit, questionNumber) {
                var _this = this;
                if (limit === void 0) { limit = 30; }
                this.timerTheme = "default";
                //  this.bingClientTTS.synthesize(this.questions[this.currentQuestion].question);
                if (this.timer) {
                    this.percentageLeft = 0;
                    this.secondsLeftToAnswer = 0;
                    this.$interval.cancel(this.timer);
                }
                this.timer = this.$interval(function () {
                    var currentTime = new Date();
                    var timeSinceStart = ((currentTime.valueOf() - startTime.valueOf()) / 1000.0);
                    var timeRemaining = InterviewEssayController.QUESTION_READING_TIME + limit - timeSinceStart;
                    var timeToAnswer = limit - timeSinceStart + InterviewEssayController.QUESTION_READING_TIME;
                    if (timeRemaining <= 0) {
                        _this.$interval.cancel(_this.timer);
                        //  this.recordRTC.pauseRecording();
                        _this.nextQuestion();
                    }
                    else if (timeRemaining >= 0 && timeSinceStart > InterviewEssayController.QUESTION_READING_TIME) {
                        _this.secondsLeftToAnswer = timeToAnswer;
                        _this.percentageLeft = 100 - Math.round(100.0 * (timeToAnswer / limit));
                    }
                    if (timeRemaining >= 0 && timeSinceStart <= InterviewEssayController.QUESTION_READING_TIME) {
                        _this.timerTheme = "default";
                        _this.disableNextButton = true;
                        _this.updateDom();
                        _this.showCountdown = true;
                        _this.countdownValue = Math.round(InterviewEssayController.QUESTION_READING_TIME - timeSinceStart);
                    }
                    else {
                        _this.disableNextButton = false;
                        _this.updateDom();
                        _this.showCountdown = false;
                        _this.countdownValue = 0;
                    }
                    if (timeRemaining === InterviewEssayController.QUESTION_READING_TIME) {
                        if (questionNumber === 0) { }
                        else {
                            //   this.recordRTC.resumeRecording();
                        }
                    }
                    if (_this.secondsLeftToAnswer <= InterviewEssayController.TIMEOUT_WARNING_TIME) {
                        _this.timerTheme = "timer";
                    }
                    else {
                        _this.timerTheme = "default";
                    }
                }, 1000);
            };
            InterviewEssayController.prototype.styleCountdownDisplay = function () {
                $("#countdown").text(99);
                var widest = $("#countdown").height() > $("#countdown").width() ? $("#countdown").height() : $("#countdown").width();
                widest = widest * 1.1;
                $("#countdown").width(widest);
                $("#countdown").height(widest);
                $("#countdown").css("border-radius", widest / 2.0);
                $("#countdown").css("-moz-border-radius", widest / 2.0);
                $("#countdown").css("-webkit-border-radius", widest / 2.0);
                $("#countdown").css("line-height", 1.2);
                $("#countdown").text("");
                this.widest = widest;
            };
            InterviewEssayController.prototype.successCallback = function () {
                var _this = this;
                this.setCountdownCoordinates();
                this.startTime = new Date();
                this.$http.get("/candidates/recording/all-essay-questions/" + this.invitationGuid).then(function (result) {
                    _this.questions = result.data;
                    angular.forEach(_this.questions, function (q, i) {
                        q.question = q.question + " (You have " + _this.secondsToWords(q.timeallowed) + " to answer)";
                        var essayAnswer = { question: q.question, questionId: q.guid, answer: null };
                        _this.essayAnswers.push(essayAnswer);
                    });
                    _this.currentQuestion = 0;
                    _this.answers = [{
                            questionGuid: _this.questions[0].guid,
                            start: 0,
                            end: _this.startTime.valueOf() + 2000 //placeholder value
                        }];
                    _this.startTimer(_this.startTime, _this.questions[0].timeallowed, _this.currentQuestion);
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            InterviewEssayController.prototype.errorCallback = function (error) {
                //handle error here
                Rollbar.error(error);
            };
            InterviewEssayController.prototype.setCountdownCoordinates = function () {
                var publisherHeight = $("#video").height();
                var publisherWidth = $("#video").width();
                $("#countdown").css("top", (publisherHeight - this.widest) / 2.0);
                $("#countdown").css("left", (publisherWidth - this.widest) / 2.0);
            };
            InterviewEssayController.prototype.secondsToWords = function (seconds) {
                var returnVal = '';
                if (seconds < 60) {
                    returnVal = seconds + " seconds";
                }
                else if (seconds == 60) {
                    returnVal = "1 minute";
                }
                else if (seconds % 60 == 0) {
                    return (seconds / 60) + " minutes";
                }
                else {
                    var minutes = Math.floor(seconds / 60);
                    var secondsRemainder = seconds % 60;
                    if (minutes == 1) {
                        returnVal = "1 minute " + secondsRemainder + " seconds";
                    }
                    else {
                        returnVal = minutes + " minutes " + secondsRemainder + " seconds";
                    }
                }
                return returnVal;
            };
            InterviewEssayController.prototype.secondsToMMSS = function (t) {
                if (isNaN(t)) {
                    return "00:00";
                }
                var minutes = Math.floor(t / 60.0);
                var seconds = Math.floor(t % 60);
                return ((minutes < 10 ? "0" : "") +
                    minutes +
                    ":" +
                    (seconds < 10 ? "0" : "") +
                    seconds);
            };
            InterviewEssayController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            InterviewEssayController.QUESTION_READING_TIME = 6; //inorder to show all countdown values we increment the  number andrew requested
            InterviewEssayController.TIMEOUT_WARNING_TIME = 10;
            InterviewEssayController.$inject = ["$http", "$mdToast", "$scope", "$q", "$window", "$state", "$stateParams", "$interval",
                "isAttemptAllowed",
                "$mdDialog", "VideoService"];
            return InterviewEssayController;
        }());
        app.controller("candidate.InterviewEssayController", InterviewEssayController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var MultipartyInterviewController = /** @class */ (function () {
            function MultipartyInterviewController($http, $mdToast, $stateParams, SessionService, $mdDialog, $state) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$state = $state;
                this.subscribedStreams = new Array();
                this.$onInit = function () { };
                this.muted = false;
                this.sessionData = { participantEmail: null, participantName: null, participantyType: null };
                this.videoOn = true;
                var navbar = document.getElementById("navbar");
                navbar.remove();
                this.eventid = $stateParams.eventid;
                this.$http
                    .get("/candidate/multiparty/get-create-session/" + this.eventid)
                    .then(function (result) {
                    _this.apiKey = result.data.apiKey;
                    _this.sessionId = result.data.openTokSessionId;
                    _this.token = result.data.openTokToken;
                    var height = window.innerHeight;
                    _this.sessionData.participantyType = 'Candidate';
                    _this.sessionData.participantName = _this.SessionService.getFullName();
                    _this.sessionData.participantEmail = _this.SessionService.getEmail();
                    var publisherProperties = {
                        publishAudio: true,
                        publishVideo: true,
                        height: height * 0.20,
                        width: height * 0.20,
                        name: JSON.stringify(_this.sessionData),
                        style: {
                            archiveStatusDisplayMode: "off",
                            nameDisplayMode: "off"
                        }
                    };
                    _this.publisher = OT.initPublisher("publisher", publisherProperties, function (error) {
                        if (error) {
                            _this.$mdToast.show(_this.$mdToast
                                .simple()
                                .textContent(error.name + " " + error.message)
                                .hideDelay(10000)
                                .theme("toasttheme"));
                        }
                        else {
                            // $mdToast.showSimple("Publisher initialized");
                        }
                    });
                    document.getElementById("employeescontainer").style.height =
                        document.documentElement.clientHeight - 198 + "px";
                    document.getElementById("employeescontainer").style.width =
                        document.documentElement.clientWidth + "px";
                    var videoElement = (document.getElementById("employeescontainer"));
                    videoElement.style.height = window.innerHeight + "px";
                    videoElement.style.width = window.innerWidth + "px";
                    _this.layout = initLayoutContainer(document.getElementById("employeescontainer"), {
                        bigFixedRatio: false
                    }).layout;
                    _this.publisher.on({
                        accessAllowed: function (event) {
                            // $mdToast.showSimple('Thank you for allowing access to your camera and microphone.');
                            Rollbar.log("Thank you for allowing access to your camera and microphone.");
                        },
                        accessDenied: function (event) {
                            _this.$mdToast.show(_this.$mdToast
                                .simple()
                                .textContent("Please allow us access to your camera and microphone before the recording begins")
                                .hideDelay(10000)
                                .theme("toasttheme"));
                            Rollbar.log("Please allow us access to your camera and microphone before the recording begins.");
                        },
                        accessDialogOpened: function (event) {
                            _this.$mdToast.show(_this.$mdToast
                                .simple()
                                .textContent("Use your browser's popup to grant us access to your camera and microphone")
                                .hideDelay(10000)
                                .theme("toasttheme"));
                            Rollbar.log("Use your browser's popup to grant us access to your camera and microphone");
                        },
                        videoElementCreated: function (event) {
                            //   var videoElement: HTMLVideoElement = event.element;
                            //   $("#publisher").append(videoElement);
                            //   var height=window.innerHeight;
                            //   var wi=window.innerWidth;
                            //   videoElement.style.width=wi*0.10+"px";
                            //   videoElement.style.height=height*0.20+"px";
                            //  document.getElementById("publisher").style.width=wi*0.10+"px";
                            //  document.getElementById("publisher").style.height=height*0.20+"px";
                        }
                    });
                    _this.session = OT.initSession(_this.apiKey, _this.sessionId);
                    var __this = _this;
                    _this.session.connect(_this.token, function (error) {
                        _this.session.on("streamCreated", function (event) {
                            var subscribers = _this.session.getSubscribersForStream(event.stream);
                            var alreadySubscribed = false;
                            for (var _i = 0, subscribers_1 = subscribers; _i < subscribers_1.length; _i++) {
                                var sub = subscribers_1[_i];
                                if (sub.stream.connection.connectionId === event.stream.connection.connectionId) {
                                    alreadySubscribed = true;
                                }
                            }
                            var stream = event.stream;
                            var sessionData = JSON.parse(stream.name);
                            if (!alreadySubscribed) {
                                if (__this.subscribedStreams.indexOf(sessionData.participantEmail) == -1) {
                                    __this.subscribedStreams.push(sessionData.participantEmail);
                                    var subscriber = _this.session.subscribe(event.stream, document.getElementById("employeescontainer"), {
                                        insertMode: "append",
                                        width: "100%",
                                        height: "100%",
                                        style: { nameDisplayMode: "off" }
                                    });
                                    var element = subscriber.element;
                                    element.getElementsByTagName("h1")[0].style.textAlign = "center";
                                    var sessionData = JSON.parse(stream.name);
                                    element.getElementsByTagName("h1")[0].textContent = sessionData.participantName;
                                    _this.layout();
                                }
                            }
                        });
                        _this.session.on("streamDestroyed", function (event) {
                            var sessionData = JSON.parse(event.stream.name);
                            var index = __this.subscribedStreams.indexOf(sessionData.participantEmail);
                            __this.subscribedStreams.splice(index, 1);
                            event.preventDefault();
                            _this.session
                                .getSubscribersForStream(event.stream)
                                .forEach(function (subscriber) {
                                subscriber.element.classList.remove("ot-layout");
                                setTimeout(function () {
                                    subscriber.destroy();
                                    _this.layout();
                                }, 200);
                            });
                        });
                        _this.session.publish(_this.publisher, function () { });
                    });
                });
            }
            MultipartyInterviewController.prototype.mute = function () {
                if (this.muted) {
                    this.publisher.publishAudio(true);
                    this.muted = false;
                }
                else {
                    this.publisher.publishAudio(false);
                    this.muted = true;
                }
            };
            MultipartyInterviewController.prototype.disconnect = function () {
                this.session.unpublish(this.publisher);
                this.session.disconnect();
                this.publisher.destroy();
                this.$state.go("root.candidate.dashboard", {}, { reload: true });
            };
            MultipartyInterviewController.prototype.turnOffVideo = function () {
                if (this.videoOn) {
                    this.videoOn = false;
                    this.publisher.publishVideo(false);
                }
                else {
                    this.videoOn = true;
                    this.publisher.publishVideo(true);
                }
            };
            MultipartyInterviewController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "SessionService",
                "$mdDialog",
                "$state"
            ];
            return MultipartyInterviewController;
        }());
        app.controller("candidate.MultipartyInterviewController", MultipartyInterviewController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var MultipartySetupController = /** @class */ (function () {
            function MultipartySetupController($http, $mdToast, $scope, $q, $window, $state, $stateParams, $interval) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.$q = $q;
                this.$window = $window;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$interval = $interval;
                this.movingAvg = null;
                this.$onInit = function () { };
                $("#interview-container").height(window.innerHeight - 96);
                $("#volume").width(window.innerHeight - 387); // we set the width to height because it is rotated
                var right = Math.floor(-0.4 * (window.innerHeight - 387));
                $("#volume").css("right", right);
                this.timerTheme = "default";
                this.styleCountdownDisplay();
                this.interviewGuid = $stateParams.interviewGuid;
                this.answers = [];
                this.startTime = undefined;
                this.nextButtonText = "Next";
                this.currentQuestion = 0;
                $window.addEventListener("resize", function () {
                    if (_this.publisher) {
                        // this.publisher.element.style.height = (window.innerHeight - 96) + "";
                        _this.publisher.element.style.width = "100%";
                    }
                    $("#volume").width(window.innerHeight - 387); // we set the width to height because it is rotated
                    var right = Math.floor(-0.4 * (window.innerHeight - 387));
                    $("#volume").css("right", right);
                    _this.styleCountdownDisplay();
                });
                this.isPublisherInitialized = $q.defer();
                this.canUserPublish = $q.defer();
                this.recordingStarted = $q.defer();
                $http.post("/candidate/multiparty/setup", {}).then(function (result) {
                    _this.recordingGuid = result.data.recordingGuid;
                    if (OT.checkSystemRequirements() == 1) {
                        _this.publisher = OT.initPublisher(null, { width: '100%', height: 0, insertMode: 'append', insertDefaultUI: false }, function (error) {
                            if (error) {
                                _this.$mdToast.show(_this.$mdToast.simple()
                                    .textContent(error.name + " " + error.message)
                                    .hideDelay(10000)
                                    .theme("toasttheme"));
                                Rollbar.log("Error connecting: ", error.name, error.message);
                                _this.isPublisherInitialized.reject();
                            }
                            else {
                                // $mdToast.showSimple("Publisher initialized");
                                Rollbar.log("Publisher initialized");
                                _this.isPublisherInitialized.resolve();
                            }
                        });
                        _this.publisher.on({
                            accessAllowed: function (event) {
                                // $mdToast.showSimple('Thank you for allowing access to your camera and microphone.');
                                Rollbar.log('Thank you for allowing access to your camera and microphone.');
                            },
                            accessDenied: function (event) {
                                _this.$mdToast.show(_this.$mdToast.simple()
                                    .textContent('Please allow us access to your camera and microphone before the recording begins')
                                    .hideDelay(10000)
                                    .theme("toasttheme"));
                            },
                            accessDialogOpened: function (event) {
                                _this.$mdToast.show(_this.$mdToast.simple()
                                    .textContent("Use your browser's popup to grant us access to your camera and microphone")
                                    .hideDelay(10000)
                                    .theme("toasttheme"));
                                Rollbar.log("Use your browser's popup to grant us access to your camera and microphone");
                            },
                            audioLevelUpdated: function (event) {
                                if (_this.movingAvg === null || _this.movingAvg <= event.audioLevel) {
                                    _this.movingAvg = event.audioLevel;
                                }
                                else {
                                    _this.movingAvg = 0.7 * _this.movingAvg + 0.3 * event.audioLevel;
                                }
                                // 1.5 scaling to map the -30 - 0 dBm range to [0,1]
                                var _logLevel = (Math.log(_this.movingAvg) / Math.LN10) / 1.5 + 1;
                                _this.logLevel = (Math.min(Math.max(_logLevel, 0), 1) * 100.0);
                            },
                            videoElementCreated: function (event) {
                                var videoElement = event.element;
                                $("#publisher-element").append(videoElement);
                            }
                        });
                        _this.session = OT.initSession(result.data.apiKey, result.data.sessionId);
                        if (_this.session) {
                            // $mdToast.showSimple("Session Initialized. Token acquired.");
                            Rollbar.log("Session Initialized. Token acquired.");
                            _this.session.on({
                                sessionReconnecting: function (event) {
                                    if (event.connection.connectionId != _this.session.connection.connectionId) {
                                        $mdToast.showSimple('Another client connected.');
                                        Rollbar.log('Another client connected.');
                                    }
                                    else {
                                        $mdToast.showSimple('Reconnecting to session.');
                                        Rollbar.log('Reconnecting to session.');
                                    }
                                },
                                sessionReconnected: function (event) {
                                    $mdToast.showSimple('Reconnected to session.');
                                    Rollbar.log('Reconnected to session.');
                                },
                                sessionDisconnected: function (event) {
                                    $mdToast.showSimple('Setup completed. Feel free to run setup again');
                                    Rollbar.log('A client disconnected.');
                                },
                                connectionCreated: function (event) {
                                    // $mdToast.showSimple('Connection created.');
                                    Rollbar.log('Connection created.');
                                },
                                connectionDestroyed: function (event) {
                                    $mdToast.showSimple('Connection destroyed.');
                                    Rollbar.log('Connection destroyed.');
                                }
                            });
                            _this.session.connect(result.data.token, function (error) {
                                if (error) {
                                    $mdToast.showSimple(error.name + " " + error.message);
                                    Rollbar.log("Error connecting: ", error.name, error.message);
                                }
                                else {
                                    // $mdToast.showSimple("Connected to the session");
                                    Rollbar.log("Connected to the session");
                                    if (_this.session.capabilities.publish === 1) {
                                        // $mdToast.showSimple("User can publish.");
                                        Rollbar.log("User can publish");
                                        _this.canUserPublish.resolve();
                                    }
                                    else {
                                        $mdToast.showSimple("User cannot publish.");
                                        Rollbar.log("User cannot publish");
                                        _this.canUserPublish.reject();
                                    }
                                }
                            });
                        }
                    }
                    else {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("This system does not satisfy the system requirements")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                        Rollbar.error("This system does not satisfy the system requirements");
                    }
                }, function (error) {
                    $mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
                $scope.$on("$destroy", function (event) {
                    if (_this.session)
                        _this.session.disconnect();
                    // this.session.unpublish(this.publisher);
                    if (_this.publisher)
                        _this.publisher.destroy();
                    _this.canUserPublish.reject();
                    _this.isPublisherInitialized.reject();
                    _this.session = undefined;
                    _this.publisher = undefined;
                });
                this.isPublisherInitialized.promise.then(function (_a) {
                    _this.canUserPublish.promise.then(function (_a) {
                        _this.session.publish(_this.publisher, function (error) {
                            if (error) {
                                $mdToast.showSimple("Stream cannot be published. See console for details.");
                                Rollbar.log(error);
                                _this.recordingStarted.reject();
                            }
                            else {
                                // $mdToast.showSimple("You are in a practice session!");
                                Rollbar.log("You are practice session!");
                                _this.setCountdownCoordinates();
                                _this.startTime = new Date();
                                _this.startTimer(_this.startTime, 30);
                                _this.recordingStarted.resolve();
                            }
                        });
                    }, function (error) {
                        $mdToast.showSimple("Some error has happened. See console for details");
                        Rollbar.error(error);
                    });
                }, function (error) {
                    $mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
                this.recordingStarted.promise.then(function (_a) {
                    // this.questions = result.data;
                    _this.questions = [
                        { guid: "00000000-0000-0000-0000-000000000000", question: "Please check your front facing camera. Are you able to see yourself below?", timeallowed: 30 },
                        { guid: "00000000-0000-0000-0000-000000000001", question: "Please see the volume bar on the right of the screen, and check if it moves when you speak", timeallowed: 30 },
                        { guid: "00000000-0000-0000-0000-000000000002", question: "Please check you stand against a favorable background", timeallowed: 30 },
                        { guid: "00000000-0000-0000-0000-000000000003", question: "Press the end button to end the practice session. You can take this session any number of times.", timeallowed: 30 }
                    ];
                    _this.currentQuestion = 0;
                    _this.answers = [{
                            questionGuid: _this.questions[0].guid,
                            start: 0,
                            end: _this.startTime.valueOf() + 2000 //placeholder value
                        }];
                }, function (error) {
                    $mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            }
            MultipartySetupController.prototype.nextQuestion = function () {
                var currentTime = new Date();
                var timeDiff = currentTime.valueOf() - this.startTime.valueOf();
                if (this.currentQuestion === this.questions.length - 2) {
                    this.nextButtonText = "End Practice";
                }
                if (this.currentQuestion === this.questions.length - 1) {
                    this.answers[this.currentQuestion].end = timeDiff;
                    this.session.disconnect();
                    this.session.unpublish(this.publisher);
                    this.publisher.destroy();
                    this.$state.go("root.candidate.dashboard");
                }
                if (this.currentQuestion < this.questions.length - 1) {
                    this.answers[this.currentQuestion].end = timeDiff;
                    this.currentQuestion += 1;
                    this.answers.push({
                        questionGuid: this.questions[this.currentQuestion].guid,
                        start: timeDiff,
                        end: timeDiff + 10000 //placeholder value
                    });
                    this.startTimer(currentTime, 30);
                }
            };
            MultipartySetupController.prototype.startTimer = function (startTime, limit) {
                var _this = this;
                if (limit === void 0) { limit = 30; }
                this.timerTheme = "default";
                if (this.timer) {
                    this.percentageLeft = 0;
                    this.secondsLeftToAnswer = 0;
                    this.$interval.cancel(this.timer);
                }
                this.timer = this.$interval(function () {
                    var currentTime = new Date();
                    var timeSinceStart = ((currentTime.valueOf() - startTime.valueOf()) / 1000.0);
                    var timeRemaining = MultipartySetupController.QUESTION_READING_TIME + limit - timeSinceStart;
                    var timeToAnswer = limit - timeSinceStart + MultipartySetupController.QUESTION_READING_TIME;
                    if (timeRemaining <= 0) {
                        _this.$interval.cancel(_this.timer);
                        _this.nextQuestion();
                    }
                    else if (timeRemaining >= 0 && timeSinceStart > MultipartySetupController.QUESTION_READING_TIME) {
                        _this.secondsLeftToAnswer = timeToAnswer;
                        _this.percentageLeft = 100 - Math.round(100.0 * (timeToAnswer / limit));
                    }
                    if (timeRemaining >= 0 && timeSinceStart <= MultipartySetupController.QUESTION_READING_TIME) {
                        _this.timerTheme = "default";
                        _this.showCountdown = true;
                        _this.countdownValue = Math.round(MultipartySetupController.QUESTION_READING_TIME - timeSinceStart);
                    }
                    else {
                        _this.showCountdown = false;
                        _this.countdownValue = 0;
                    }
                    if (_this.secondsLeftToAnswer <= MultipartySetupController.TIMEOUT_WARNING_TIME) {
                        _this.timerTheme = "timer";
                    }
                    else {
                        _this.timerTheme = "default";
                    }
                }, 1000);
            };
            MultipartySetupController.prototype.styleCountdownDisplay = function () {
                $("#countdown").text(99);
                var widest = $("#countdown").height() > $("#countdown").width() ? $("#countdown").height() : $("#countdown").width();
                widest = widest * 1.1;
                // $("#countdown").attr("style", "width: " + widest + "px !important; height: " + widest + "px !important;");
                $("#countdown").width(widest);
                $("#countdown").height(widest);
                $("#countdown").css("border-radius", widest / 2.0);
                $("#countdown").css("-moz-border-radius", widest / 2.0);
                $("#countdown").css("-webkit-border-radius", widest / 2.0);
                $("#countdown").css("line-height", 1.2);
                $("#countdown").text("");
                this.widest = widest;
            };
            MultipartySetupController.prototype.setCountdownCoordinates = function () {
                var _this = this;
                this.isPublisherInitialized.promise.then(function () {
                    var publisherHeight = $("#publisher-element").height();
                    var publisherWidth = $("#publisher-element").width();
                    $("#countdown").css("top", (publisherHeight - _this.widest) / 2.0);
                    $("#countdown").css("left", (publisherWidth - _this.widest) / 2.0);
                });
            };
            MultipartySetupController.QUESTION_READING_TIME = 6; //inorder to show all countdown values we increment the  number andrew requested
            MultipartySetupController.TIMEOUT_WARNING_TIME = 10;
            MultipartySetupController.$inject = ["$http", "$mdToast", "$scope", "$q", "$window", "$state", "$stateParams", "$interval"];
            return MultipartySetupController;
        }());
        app.controller("candidate.MultipartySetupController", MultipartySetupController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var OpenInviteController = /** @class */ (function () {
            function OpenInviteController($http, $mdToast, session, $state, $stateParams, $mdDialog, $sce) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$mdDialog = $mdDialog;
                this.$sce = $sce;
                this.$onInit = function () { };
                this.interviewId = $stateParams.interviewid;
                this.code = "";
                this.$http.get("/candidates/open-invitation/" + this.interviewId)
                    .then(function (result) {
                    _this.interview = result.data;
                    _this.interview.description = _this.interview.description.replace(new RegExp('\n', 'g'), "<br />");
                    _this.jobDescription = _this.$sce.trustAsHtml(_this.interview.description);
                }, function (error) {
                    _this.$state.go("root.candidate.home", {}, {
                        reload: true
                    });
                });
            }
            OpenInviteController.prototype.login = function (code) {
                var _this = this;
                var dto = {
                    username: code,
                    password: "password"
                };
                this.$http.post("/login", dto).then(function (result) {
                    _this.session.setToken(result.headers("Authorization"));
                    if (_this.session.isCandidate()) {
                        _this.$state.go("root.candidate.dashboard", {}, {
                            reload: true
                        });
                    }
                    else if (_this.session.isCompany()) {
                        _this.$state.go("root.company.dashboard", {}, {
                            reload: true
                        });
                    }
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Login Failed")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            OpenInviteController.prototype.signup = function () {
                var _this = this;
                var sDTO = {
                    fullName: this.name,
                    email: this.email
                };
                this.$http.post("/candidates/open-invitation/signup/" + this.interviewId, sDTO).then(function (result) {
                    _this.$mdDialog.show(_this.$mdDialog.alert()
                        .title('Sign Up Successful')
                        .textContent('Please check your email for the login code and come back to this page to login and register...')
                        .ok('Ok'));
                    _this.name = '';
                    _this.email = '';
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent(error.data.message)
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            OpenInviteController.$inject = ["$http", "$mdToast", "SessionService", "$state", "$stateParams", "$mdDialog", "$sce"];
            return OpenInviteController;
        }());
        app.controller("candidate.OpenInviteController", OpenInviteController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        'use strict';
        var app = Qna.getModule();
        var YT = {
            PlayerState: {
                ENDED: 0,
                PAUSED: 2,
            },
        };
        var PractiseController = /** @class */ (function () {
            function PractiseController($mdToast, $scope, $rootScope, $state, $stateParams, $interval, invitationsService, recordingsService, mediaRecordingService, opentokService) {
                var _this = this;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.$rootScope = $rootScope;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$interval = $interval;
                this.invitationsService = invitationsService;
                this.recordingsService = recordingsService;
                this.mediaRecordingService = mediaRecordingService;
                this.opentokService = opentokService;
                this.WARNING_TIME_SECS = 5;
                this.IDLE = 'IDLE';
                this.VIDEO_PLAYING = 'VIDEO_PLAYING';
                this.READ_WAIT = 'READ_WAIT';
                this.READ_ING = 'READ_ING';
                this.QUESTION_WAIT = 'QUESTION_WAIT';
                this.QUESTION_ING = 'QUESTION_ING';
                this.otherChoiceText = 'Other';
                this.mcqsAnswerType = {
                    CHOOSE: 'CHOOSE',
                    SHORT: 'SHORT'
                };
                this.secondsEllapsed = 0;
                this.record = false;
                this.finished = false;
                this.uploading = false;
                this.countDown = 5;
                this.allowedTime = 0;
                this.nextQuestionText = 'Next Question';
                this.hasPlayedVideo = false;
                this.playbackPractise = false;
                this.playbackPractiseStarted = false;
                this.shortAnswer = false;
                this.shortAnswerButton = 'Enable Short';
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var isMediaAccessGranted, error_24, _a, _b;
                    var _this = this;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0: return [4 /*yield*/, (this.isMediaRecorderSupported
                                    ? this.mediaRecordingService.ensureMediaAccess()
                                    : this.opentokService.ensureMediaAccess())];
                            case 1:
                                isMediaAccessGranted = _c.sent();
                                if (!isMediaAccessGranted) {
                                    this.showToastMessage('Please allow us access to your camera and microphone before the recording begins.');
                                    this.destroy();
                                    return [2 /*return*/, this.$state.go('root.candidate.dashboard')];
                                }
                                if (!this.record) return [3 /*break*/, 5];
                                _c.label = 2;
                            case 2:
                                _c.trys.push([2, 4, , 5]);
                                return [4 /*yield*/, this.recordingsService.isAttemptAllowed(this.interviewId)];
                            case 3:
                                _c.sent();
                                return [3 /*break*/, 5];
                            case 4:
                                error_24 = _c.sent();
                                this.destroy();
                                return [2 /*return*/, this.$state.go('root.candidate.dashboard')];
                            case 5:
                                _a = this;
                                return [4 /*yield*/, this.invitationsService.getInvitation(this.interviewId)];
                            case 6:
                                _a.interview = _c.sent();
                                _b = this;
                                return [4 /*yield*/, this.getCurrentQuestions()];
                            case 7:
                                _b.allQuestions = _c.sent();
                                if (!this.record) return [3 /*break*/, 9];
                                return [4 /*yield*/, this.recordingsService.registerAttempt(this.interviewId)];
                            case 8:
                                _c.sent();
                                _c.label = 9;
                            case 9:
                                this.$scope.$watch(function () {
                                    return document.getElementById("video-question") &&
                                        _this.currentQuestion.isVideoQuestion;
                                }, function (isVideoQuestion) {
                                    if (isVideoQuestion) {
                                        _this.player = new window.Plyr("#video-question", {
                                            controls: ["play-large"],
                                            keyboard: { focused: false, global: false },
                                            fullscreen: { enabled: false },
                                        });
                                        var player_2 = _this.player;
                                        player_2.on("play", function () {
                                            _this.state = _this.VIDEO_PLAYING;
                                            _this.hasPlayedVideo = true;
                                            _this.updateDom();
                                        });
                                        player_2.on("pause", function () { return !player_2.isYouTube && !player_2.ended && player_2.play(); });
                                        player_2.on("statechange", function (_a) {
                                            var code = _a.detail.code;
                                            return code !== YT.PlayerState.ENDED && player_2.play();
                                        });
                                        player_2.on("ended", function () { return _this.startReadWait(); });
                                    }
                                });
                                this.$scope.$watch(function () { return _this.player && _this.currentQuestion.questionVideoURL; }, function (isVideoQuestion) {
                                    if (!isVideoQuestion)
                                        return;
                                    var isYoutubeVideo = _this.currentQuestion.questionVideoURL.includes("youtube.com");
                                    _this.hasPlayedVideo = false;
                                    var player = _this.player;
                                    player.source = {
                                        type: "video",
                                        sources: [
                                            {
                                                type: isYoutubeVideo ? "video/youtube" : "video/mp4",
                                                provider: isYoutubeVideo ? "youtube" : undefined,
                                                src: _this.currentQuestion.questionVideoURL
                                            },
                                        ],
                                    };
                                });
                                this.startQuestion(this.allQuestions[0]);
                                this.$scope.$on('$destroy', function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.destroy()];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                }); }); });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.destroy = function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this.isMediaRecorderSupported) return [3 /*break*/, 1];
                                this.mediaRecordingService.stopAudioVideoTracks();
                                return [3 /*break*/, 3];
                            case 1: return [4 /*yield*/, this.opentokService.closeSession()];
                            case 2:
                                _a.sent();
                                _a.label = 3;
                            case 3:
                                this.resetCountdownTimer();
                                this.resetProgressTimer();
                                window.onbeforeunload = function () { return null; };
                                this.finished = true;
                                this.record = false;
                                if (this.player)
                                    this.player.destroy();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.getInterview = function () { return __awaiter(_this, void 0, void 0, function () {
                    var error_25;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.invitationsService.getInvitations()];
                            case 1: return [2 /*return*/, (_a.sent()).find(function (invitation) { return invitation.guid === _this.interviewId; })];
                            case 2:
                                error_25 = _a.sent();
                                Rollbar.error(error_25);
                                this.showToastMessage("There was an issue retrieving the invitation");
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.getCurrentQuestions = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, record, interviewId, isMediaRecorderSupported, getPractiseQuestions, _b, getInterviewQuestions, getInterviewQuestionsOpenTok, currentQuestions;
                    var _this = this;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _a = this, record = _a.record, interviewId = _a.interviewId, isMediaRecorderSupported = _a.isMediaRecorderSupported, getPractiseQuestions = _a.invitationsService.getPractiseQuestions, _b = _a.recordingsService, getInterviewQuestions = _b.getInterviewQuestions, getInterviewQuestionsOpenTok = _b.getInterviewQuestionsOpenTok;
                                return [4 /*yield*/, (!record
                                        ? getPractiseQuestions()
                                        : (isMediaRecorderSupported &&
                                            getInterviewQuestions(interviewId)) ||
                                            getInterviewQuestionsOpenTok(interviewId))];
                            case 1:
                                currentQuestions = _c.sent();
                                return [2 /*return*/, currentQuestions
                                        .map(function (question) {
                                        question.isVideoQuestion = question.questionVideoURL != null;
                                        question.isVideoResponse = question.responseType === 'VIDEO';
                                        question.isYoutubeVideoQuestion = question.isVideoQuestion && _this.isYoutubeVideo(question.questionVideoURL);
                                        if (!question.isVideoResponse)
                                            question.writtenResponseModel = null;
                                        return question;
                                    })
                                        .sort(function (q1, q2) { return (q1.isVideoResponse === q2.isVideoResponse) ? 0 : q1.isVideoResponse ? -1 : 1; })];
                        }
                    });
                }); };
                this.startQuestion = function (question) {
                    _this.state = _this.IDLE;
                    _this.currentQuestion = question;
                    setTimeout(function () { return _this.updateDom(); }, 1500);
                    //For text answer start read wait, for video clicking play will do this.
                    if (!_this.currentQuestion.isVideoQuestion) {
                        _this.startReadWait();
                    }
                };
                this.startReadWait = function () {
                    _this.state = _this.READ_WAIT;
                    _this.allowedTime = _this.currentQuestion.readingTime;
                    _this.countdownTimer = _this.$interval(function () {
                        if (_this.countDown > 0)
                            _this.countDown -= 1;
                        if (_this.countDown === 0) {
                            _this.$interval.cancel(_this.countdownTimer);
                            _this.startReading();
                        }
                    }, 1000);
                };
                this.startReading = function () {
                    _this.state = _this.READ_ING;
                    _this.resetProgressTimer();
                    _this.secondsEllapsed = 0;
                    _this.$interval.cancel(_this.timer);
                    _this.timer = _this.$interval(function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.secondsEllapsed += 1;
                                    if (!(this.getEllapsedPercentage() >= 100)) return [3 /*break*/, 2];
                                    this.$interval.cancel(this.timer);
                                    return [4 /*yield*/, this.startQuestionWait()];
                                case 1:
                                    _a.sent();
                                    _a.label = 2;
                                case 2: return [2 /*return*/];
                            }
                        });
                    }); }, 1000);
                };
                this.startQuestionWait = function () { return __awaiter(_this, void 0, void 0, function () {
                    var videoElement, _a, _i, _b, choice;
                    var _this = this;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                this.state = this.QUESTION_WAIT;
                                this.resetCountdownTimer();
                                this.resetProgressTimer();
                                this.allowedTime = this.currentQuestion.timeallowed * 60;
                                if (!this.currentQuestion.isVideoResponse) return [3 /*break*/, 5];
                                if (!this.isMediaRecorderSupported) return [3 /*break*/, 2];
                                videoElement = ($("#media-recorder-element")[0]);
                                _a = videoElement;
                                return [4 /*yield*/, this.mediaRecordingService.getStream()];
                            case 1:
                                _a.srcObject = _c.sent();
                                if (!videoElement.srcObject)
                                    this.$state.go("root.candidate.dashboard");
                                //if (this.record) 
                                this.mediaRecordingService.startRecord();
                                return [3 /*break*/, 4];
                            case 2: return [4 /*yield*/, this.opentokService.startSession(this.interviewId, "publisher-element", this.currentQuestion.sessionAndToken)];
                            case 3:
                                _c.sent();
                                _c.label = 4;
                            case 4: return [3 /*break*/, 6];
                            case 5:
                                //document.getElementById("writtenAnswerBox").innerHTML = "";
                                if (this.currentQuestion.responseType === 'TEXT') {
                                    //Reset Question in case applicant typing past
                                    if (this.currentQuestion.hasOwnProperty('writtenResponseModel')) {
                                        this.currentQuestion.writtenResponseModel = null;
                                    }
                                    document.getElementById("writtenAnswerBox").value = "";
                                }
                                else if (this.currentQuestion.responseType === 'MCQS') {
                                    if (this.currentQuestion.canChooseMultiple) {
                                        for (_i = 0, _b = this.currentQuestion.choices; _i < _b.length; _i++) {
                                            choice = _b[_i];
                                            choice.answer = null;
                                        }
                                    }
                                    else {
                                        this.currentQuestion.mcqsAnswer = null;
                                    }
                                    if (this.currentQuestion.canAnswerShort) {
                                        this.currentQuestion.writtenResponseModel = null;
                                    }
                                }
                                _c.label = 6;
                            case 6:
                                this.countdownTimer = this.$interval(function () { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        if (this.countDown > 0)
                                            this.countDown -= 1;
                                        if (this.countDown === 0) {
                                            this.$interval.cancel(this.countdownTimer);
                                            this.startQuestioning();
                                        }
                                        return [2 /*return*/];
                                    });
                                }); }, 1000);
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.skipPreparation = function () {
                    _this.$interval.cancel(_this.countdownTimer);
                    _this.startQuestionWait();
                };
                this.startQuestioning = function () {
                    _this.state = _this.QUESTION_ING;
                    _this.resetProgressTimer();
                    _this.timer = _this.$interval(function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.secondsEllapsed += 1;
                                    if (!(this.getEllapsedPercentage() >= 100)) return [3 /*break*/, 4];
                                    this.$interval.cancel(this.timer);
                                    if (!!this.finished) return [3 /*break*/, 4];
                                    if (!this.isLastQuestion()) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this.finish()];
                                case 1:
                                    _a.sent();
                                    return [3 /*break*/, 4];
                                case 2: return [4 /*yield*/, this.nextQuestion()];
                                case 3:
                                    _a.sent();
                                    _a.label = 4;
                                case 4: return [2 /*return*/];
                            }
                        });
                    }); }, 1000);
                };
                this.isYoutubeVideo = function (url) { return url.search('youtube') !== -1; };
                this.resetCountdownTimer = function () {
                    _this.countDown = 5;
                    _this.$interval.cancel(_this.countdownTimer);
                };
                this.resetProgressTimer = function () {
                    _this.secondsEllapsed = 0;
                    _this.$interval.cancel(_this.timer);
                };
                this.getEllapsedPercentage = function () {
                    var threshold = _this.secondsEllapsed > 0 ? 0 : _this.secondsEllapsed / _this.allowedTime;
                    return 100 * _this.secondsEllapsed / _this.allowedTime - threshold;
                };
                this.isWarningTimer = function () { return _this.allowedTime - _this.secondsEllapsed <= _this.WARNING_TIME_SECS; };
                this.getTimerBasedColor = function () { return _this.isWarningTimer() ? 'warn' : 'primary'; };
                this.getCurrentTimeEllapsed = function () { return _this.userFriendlyTime(_this.secondsEllapsed); };
                this.getCurrentTimeRemaining = function () { return _this.userFriendlyTime(_this.allowedTime - _this.secondsEllapsed); };
                this.getCurrentQuestionIndex = function () { return _this.allQuestions.indexOf(_this.currentQuestion) + 1; };
                this.isLastQuestion = function () { return _this.getCurrentQuestionIndex() === _this.allQuestions.length; };
                this.getNextButtonText = function () { return _this.isLastQuestion() ? 'Finish Practice' : 'Next'; };
                this.getMcqsResponse = function () {
                    var response = '';
                    var answerType = '';
                    var shortAnswerText = '';
                    if (_this.currentQuestion.canChooseMultiple) {
                        for (var _i = 0, _a = _this.currentQuestion.choices; _i < _a.length; _i++) {
                            var choice = _a[_i];
                            if (choice.answer !== null && choice.answer !== '') {
                                if (response === '') {
                                    if (_this.currentQuestion.canAnswerShort && _this.shortAnswer && choice.choiceText === _this.otherChoiceText) {
                                        shortAnswerText = _this.currentQuestion.writtenResponseModel;
                                    }
                                    response = choice.choiceLabel;
                                }
                                else {
                                    if (_this.currentQuestion.canAnswerShort && _this.shortAnswer && choice.choiceText === _this.otherChoiceText) {
                                        shortAnswerText = _this.currentQuestion.writtenResponseModel;
                                    }
                                    response = response + "|" + choice.choiceLabel;
                                }
                            }
                        }
                    }
                    else {
                        var index = _this.currentQuestion.choices.findIndex(function (c) { return c.choiceLabel === _this.currentQuestion.mcqsAnswer; });
                        var choice = _this.currentQuestion.choices[index];
                        if (_this.currentQuestion.canAnswerShort && _this.shortAnswer && choice.choiceText === _this.otherChoiceText) {
                            shortAnswerText = _this.currentQuestion.writtenResponseModel;
                        }
                        response = _this.currentQuestion.mcqsAnswer;
                    }
                    if (_this.shortAnswer) {
                        answerType = _this.mcqsAnswerType.SHORT;
                    }
                    else {
                        answerType = _this.mcqsAnswerType.CHOOSE;
                    }
                    if (response === '' || response === null) {
                        response = '-1';
                    }
                    return {
                        response: response,
                        answerType: answerType,
                        shortAnswerText: shortAnswerText
                    };
                };
                this.nextQuestion = function () { return __awaiter(_this, void 0, void 0, function () {
                    var response, answerType, shortAnswerText, mcqsResponse, nextQuestionIndex;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this.record) return [3 /*break*/, 9];
                                if (!this.currentQuestion.isVideoResponse) return [3 /*break*/, 6];
                                if (!this.isMediaRecorderSupported) return [3 /*break*/, 2];
                                return [4 /*yield*/, this.closeMediaRecording()];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 5];
                            case 2: return [4 /*yield*/, this.opentokService.closeSession()];
                            case 3:
                                _a.sent();
                                return [4 /*yield*/, this.recordingsService.markQuestionAsDone(this.currentQuestion.answerId)];
                            case 4:
                                _a.sent();
                                _a.label = 5;
                            case 5: return [3 /*break*/, 8];
                            case 6:
                                response = '';
                                answerType = null;
                                shortAnswerText = null;
                                if (this.currentQuestion.responseType === 'TEXT') {
                                    response = this.currentQuestion.writtenResponseModel;
                                }
                                else if (this.currentQuestion.responseType === 'MCQS') {
                                    mcqsResponse = this.getMcqsResponse();
                                    response = mcqsResponse.response;
                                    answerType = mcqsResponse.answerType;
                                    shortAnswerText = mcqsResponse.shortAnswerText;
                                }
                                return [4 /*yield*/, this.recordingsService.saveTextResponse(this.currentQuestion.answerId, {
                                        answerText: response,
                                        shortAnswer: shortAnswerText,
                                        answerType: answerType
                                    })];
                            case 7:
                                _a.sent();
                                this.currentQuestion.writtenResponseModel = null;
                                this.currentQuestion.mcqsAnswer = null;
                                this.shortAnswer = false;
                                this.shortAnswerButton = 'Enable Short';
                                _a.label = 8;
                            case 8: return [3 /*break*/, 13];
                            case 9:
                                if (!this.currentQuestion.isVideoResponse) return [3 /*break*/, 13];
                                if (!this.isMediaRecorderSupported) return [3 /*break*/, 11];
                                return [4 /*yield*/, this.closeMediaRecording()];
                            case 10:
                                _a.sent();
                                return [3 /*break*/, 13];
                            case 11: return [4 /*yield*/, this.opentokService.closeSession()];
                            case 12:
                                _a.sent();
                                _a.label = 13;
                            case 13:
                                this.resetProgressTimer();
                                this.resetCountdownTimer();
                                if (!this.isLastQuestion()) {
                                    nextQuestionIndex = this.allQuestions.indexOf(this.currentQuestion) + 1;
                                    this.startQuestion(this.allQuestions[nextQuestionIndex]);
                                }
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.finish = function () { return __awaiter(_this, void 0, void 0, function () {
                    var practiceRecording, playbackPlayer, response, answerType, shortAnswerText, mcqsResponse;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this.currentQuestion.isVideoResponse) return [3 /*break*/, 5];
                                if (!this.isMediaRecorderSupported) return [3 /*break*/, 2];
                                return [4 /*yield*/, this.closeMediaRecording()];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 5];
                            case 2: return [4 /*yield*/, this.opentokService.closeSession()];
                            case 3:
                                _a.sent();
                                return [4 /*yield*/, this.recordingsService.markQuestionAsDone(this.currentQuestion.answerId)];
                            case 4:
                                _a.sent();
                                _a.label = 5;
                            case 5:
                                if (!!this.record) return [3 /*break*/, 7];
                                return [4 /*yield*/, this.mediaRecordingService.getCurrentRecording()];
                            case 6:
                                practiceRecording = _a.sent();
                                console.info("Playback Source:" + practiceRecording);
                                this.playbackPractise = true;
                                playbackPlayer = new window.Plyr("#practise-playback", {
                                    controls: ['play-large', 'play', 'progress', 'current-time', 'volume', 'captions', 'duration'],
                                    keyboard: { focused: false, global: false },
                                    fullscreen: { enabled: false },
                                });
                                playbackPlayer.source = {
                                    type: "video",
                                    sources: [
                                        {
                                            src: practiceRecording,
                                            provider: undefined,
                                            type: "video/webm",
                                        },
                                    ],
                                };
                                playbackPlayer.on("canplay", function () {
                                    console.log("Playing Playback");
                                    _this.playbackPractiseStarted = true;
                                    _this.updateDom();
                                });
                                return [3 /*break*/, 10];
                            case 7:
                                if (!!this.finished) return [3 /*break*/, 10];
                                this.uploading = true;
                                if (!!this.currentQuestion.isVideoResponse) return [3 /*break*/, 9];
                                response = '';
                                answerType = null;
                                shortAnswerText = null;
                                if (this.currentQuestion.responseType === 'TEXT') {
                                    response = this.currentQuestion.writtenResponseModel;
                                }
                                else if (this.currentQuestion.responseType === 'MCQS') {
                                    mcqsResponse = this.getMcqsResponse();
                                    response = mcqsResponse.response;
                                    answerType = mcqsResponse.answerType;
                                    shortAnswerText = mcqsResponse.shortAnswerText;
                                }
                                return [4 /*yield*/, this.recordingsService.saveTextResponse(this.currentQuestion.answerId, {
                                        answerText: response,
                                        shortAnswer: shortAnswerText,
                                        answerType: answerType
                                    })];
                            case 8:
                                _a.sent();
                                _a.label = 9;
                            case 9:
                                this.goToGoodbyePage();
                                _a.label = 10;
                            case 10: return [2 /*return*/];
                        }
                    });
                }); };
                this.endPractise = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.invitationsService.setFinishedPractise(this.interviewId)];
                            case 1:
                                _a.sent();
                                return [4 /*yield*/, this.destroy()];
                            case 2:
                                _a.sent();
                                setTimeout(function () { return _this.$state.go('root.candidate.dashboard', { invitationId: _this.interviewId }); }, 1000);
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.goToGoodbyePage = function () { return __awaiter(_this, void 0, void 0, function () {
                    var isRecordingDone;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                isRecordingDone = this.isMediaRecorderSupported ? !this.mediaRecordingService.isRecording : this.opentokService.hasFinished();
                                if (!isRecordingDone) return [3 /*break*/, 2];
                                return [4 /*yield*/, this.recordingsService.markInterviewAsDone(this.interviewId)];
                            case 1:
                                _a.sent();
                                window.onbeforeunload = function () { return null; };
                                this.finished = true;
                                if (this.interview.hasClosingVideo) {
                                    setTimeout(function () { return _this.$state.go('root.candidate.company-intro', { interviewId: _this.interviewId, interview: _this.interview, video: "closing" }, { reload: true }); }, 2000);
                                }
                                else {
                                    setTimeout(function () { return _this.$state.go('root.candidate.goodbye', { invitationId: _this.interviewId }, { reload: true }); }, 2000);
                                }
                                return [3 /*break*/, 3];
                            case 2:
                                setTimeout(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.goToGoodbyePage()];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                }); }); }, 1500);
                                _a.label = 3;
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.closeMediaRecording = function () { return __awaiter(_this, void 0, void 0, function () {
                    var error_26, error_27;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this.currentQuestion.isVideoResponse) return [3 /*break*/, 9];
                                if (!this.record) return [3 /*break*/, 5];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.mediaRecordingService.stopRecord(this.currentQuestion.answerId, this.currentQuestion.presignedURL)];
                            case 2:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 3:
                                error_26 = _a.sent();
                                this.showToastMessage('Interview couldn\'t be saved');
                                return [3 /*break*/, 4];
                            case 4: return [3 /*break*/, 8];
                            case 5:
                                _a.trys.push([5, 7, , 8]);
                                return [4 /*yield*/, this.mediaRecordingService.stopPractiseRecord()];
                            case 6:
                                _a.sent();
                                return [3 /*break*/, 8];
                            case 7:
                                error_27 = _a.sent();
                                return [3 /*break*/, 8];
                            case 8:
                                this.mediaRecordingService.stopAudioVideoTracks();
                                _a.label = 9;
                            case 9: return [2 /*return*/];
                        }
                    });
                }); };
                this.showToastMessage = function (message) { return _this.$mdToast.show(_this.$mdToast
                    .simple()
                    .position("top left")
                    .textContent(message)
                    .theme("toasttheme")); };
                this.userFriendlyTime = function (timeInSeconds) {
                    if (isNaN(timeInSeconds))
                        return '00:00';
                    var minutes = Math.floor(timeInSeconds / 60.0);
                    var seconds = Math.floor(timeInSeconds % 60);
                    return (minutes < 10 ? "0" + minutes : minutes) + ":" + (seconds < 10 ? "0" + seconds : seconds);
                };
                this.toggleShortAnswer = function () {
                    _this.shortAnswer = !_this.shortAnswer;
                    if (_this.shortAnswer) {
                        _this.shortAnswerButton = 'Enable Choice';
                    }
                    else {
                        _this.shortAnswerButton = 'Enable Short';
                    }
                };
                this.onChoiceSelected = function (choiceLabel, type) {
                    if (_this.currentQuestion.canAnswerShort) {
                        var choice = _this.currentQuestion.choices.find(function (c) { return c.choiceLabel == choiceLabel; });
                        if (choice && type === 'radio' && choice.choiceText === _this.otherChoiceText) {
                            _this.shortAnswer = true;
                        }
                        else if (choice && choice.answer && choice.choiceText === _this.otherChoiceText) {
                            _this.shortAnswer = true;
                        }
                        else {
                            _this.shortAnswer = false;
                        }
                    }
                };
                this.isMediaRecorderSupported = !!window['MediaRecorder'];
                this.state = this.IDLE;
                this.record = this.$state.current.name === 'root.candidate.interview';
                if (this.record && Rollbar) {
                    Rollbar.info(this.isMediaRecorderSupported
                        ? "Candidate has started interview"
                        : "Candidate has started open tok interview");
                }
                this.interviewId = this.$stateParams.interviewId;
                this.finishText = this.record ? 'Finish Interview' : 'Finish Practice';
                if (this.record)
                    window.onbeforeunload = function () { return ''; };
            }
            PractiseController.prototype.updateDom = function () {
                if (!this.$scope.$$phase)
                    this.$scope.$apply();
            };
            PractiseController.$inject = [
                "$mdToast",
                "$scope",
                "$rootScope",
                "$state",
                "$stateParams",
                "$interval",
                "candidate.invitationsService",
                "candidate.recordingsService",
                "MediaRecordingService",
                "OpentokService" // window.MediaRecorder not supported - Safari
            ];
            return PractiseController;
        }());
        app.controller("candidate.PractiseController", PractiseController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var RecordCVController = /** @class */ (function () {
            function RecordCVController($http, $mdToast, $scope, $q, $window, $state, $stateParams, $interval, isAttemptAllowed) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.$q = $q;
                this.$window = $window;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$interval = $interval;
                this.isAttemptAllowed = isAttemptAllowed;
                this.$onInit = function () { };
                this.disableNextButton = true;
                var query = Modernizr.mq('(max-width: 600px)');
                if (query) {
                    $("#root-bar").hide();
                    $("#interview-container").height(window.innerHeight);
                }
                else {
                    $("#interview-container").height(window.innerHeight - 96);
                }
                this.timerTheme = 'default';
                this.styleCountdownDisplay();
                //  this.bingClientTTS = new BingSpeech.TTSClient("b41fe46b58be4e3d8e74a43f38f7d135",BingSpeech.SupportedLocales.enGB_Female);
                this.invitationGuid = $stateParams.invitationGuid;
                this.answers = [];
                this.startTime = undefined;
                this.nextButtonText = "Next Question";
                this.currentQuestion = 0;
                $window.addEventListener("resize", function () {
                    if (_this.publisher) {
                        // this.publisher.element.style.height = (window.innerHeight - 96) + "";
                        _this.publisher.element.style.width = "100%";
                    }
                    _this.styleCountdownDisplay();
                });
                this.isPublisherInitialized = $q.defer();
                this.canUserPublish = $q.defer();
                this.recordingStarted = $q.defer();
                $http.post("/candidates/recording/session-and-token/" + this.invitationGuid, {}).then(function (result) {
                    _this.recordingGuid = result.data.recordingGuid;
                    if (OT.checkSystemRequirements() == 1) {
                        _this.publisher = OT.initPublisher(null, { width: '100%', height: 0, insertMode: 'append', insertDefaultUI: false }, function (error) {
                            if (error) {
                                _this.$mdToast.show(_this.$mdToast.simple()
                                    .textContent(error.name + " " + error.message)
                                    .hideDelay(10000)
                                    .theme("toasttheme"));
                                Rollbar.log("Error connecting: ", error.name, error.message);
                                _this.isPublisherInitialized.reject();
                            }
                            else {
                                // $mdToast.showSimple("Publisher initialized");
                                Rollbar.log("Publisher initialized");
                                _this.isPublisherInitialized.resolve();
                            }
                        });
                        _this.publisher.on({
                            accessAllowed: function (event) {
                                // $mdToast.showSimple('Thank you for allowing access to your camera and microphone.');
                                Rollbar.log('Thank you for allowing access to your camera and microphone.');
                            },
                            accessDenied: function (event) {
                                _this.$mdToast.show(_this.$mdToast.simple()
                                    .textContent('Please allow us access to your camera and microphone before the recording begins')
                                    .hideDelay(10000)
                                    .theme("toasttheme"));
                                Rollbar.log('Please allow us access to your camera and microphone before the recording begins.');
                            },
                            accessDialogOpened: function (event) {
                                _this.$mdToast.show(_this.$mdToast.simple()
                                    .textContent("Use your browser's popup to grant us access to your camera and microphone")
                                    .hideDelay(10000)
                                    .theme("toasttheme"));
                                Rollbar.log("Use your browser's popup to grant us access to your camera and microphone");
                            },
                            videoElementCreated: function (event) {
                                var videoElement = event.element;
                                $("#publisher-element").append(videoElement);
                            }
                        });
                        _this.session = OT.initSession(result.data.apiKey, result.data.sessionId);
                        if (_this.session) {
                            // $mdToast.showSimple("Session Initialized. Token acquired.");
                            Rollbar.log("Session Initialized. Token acquired.");
                            _this.session.on({
                                sessionReconnecting: function (event) {
                                    if (event.connection.connectionId != _this.session.connection.connectionId) {
                                        $mdToast.showSimple('Another client connected.');
                                        Rollbar.log('Another client connected.');
                                    }
                                    else {
                                        $mdToast.showSimple('Reconnecting to session.');
                                        Rollbar.log('Reconnecting to session.');
                                    }
                                },
                                sessionReconnected: function (event) {
                                    $mdToast.showSimple('Reconnected to session.');
                                    Rollbar.log('Reconnected to session.');
                                },
                                sessionDisconnected: function (event) {
                                    _this.$mdToast.show(_this.$mdToast.simple()
                                        .textContent("Interview Ended")
                                        .hideDelay(10000)
                                        .theme("toasttheme"));
                                    Rollbar.log('A client disconnected.');
                                },
                                connectionCreated: function (event) {
                                    // $mdToast.showSimple('Connection created.');
                                    Rollbar.log('Connection created.');
                                },
                                connectionDestroyed: function (event) {
                                    $mdToast.showSimple('Connection destroyed.');
                                    Rollbar.log('Connection destroyed.');
                                }
                            });
                            _this.session.connect(result.data.token, function (error) {
                                if (error) {
                                    $mdToast.showSimple(error.name + " " + error.message);
                                    Rollbar.log("Error connecting: ", error.name, error.message);
                                }
                                else {
                                    // $mdToast.showSimple("Connected to the session");
                                    Rollbar.log("Connected to the session");
                                    if (_this.session.capabilities.publish === 1) {
                                        // $mdToast.showSimple("User can publish.");
                                        Rollbar.log("User can publish");
                                        _this.canUserPublish.resolve();
                                    }
                                    else {
                                        $mdToast.showSimple("User cannot publish.");
                                        Rollbar.log("User cannot publish");
                                        _this.canUserPublish.reject();
                                    }
                                }
                            });
                        }
                    }
                    else {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("This system does not satisfy the system requirements")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                        Rollbar.error("This system does not satisfy the system requirements");
                    }
                }, function (error) {
                    $mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
                $scope.$on("$destroy", function (event) {
                    if (_this.session)
                        _this.session.disconnect();
                    // this.session.unpublish(this.publisher);
                    if (_this.publisher)
                        _this.publisher.destroy();
                    _this.canUserPublish.reject();
                    _this.isPublisherInitialized.reject();
                    _this.session = undefined;
                    _this.publisher = undefined;
                });
                this.isPublisherInitialized.promise.then(function (_a) {
                    _this.canUserPublish.promise.then(function (_a) {
                        _this.session.publish(_this.publisher, function (error) {
                            if (error) {
                                $mdToast.showSimple("Stream cannot be published. See console for details.");
                                Rollbar.log(error);
                                _this.recordingStarted.reject();
                            }
                            else {
                                // $mdToast.showSimple("You are live! You are being recorded.");
                                Rollbar.log("You are live! You are being recorded.");
                                _this.setCountdownCoordinates();
                                _this.startTime = new Date();
                                _this.recordingStarted.resolve();
                            }
                        });
                    }, function (error) {
                        $mdToast.showSimple("Some error has happened. See console for details");
                        Rollbar.error(error);
                    });
                }, function (error) {
                    $mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
                this.recordingStarted.promise.then(function (_a) {
                    $http.put("/candidates/recording/register-attempt/" + _this.invitationGuid, {}).then(function (result) {
                        Rollbar.log("Attempt registered!");
                    }, function (error) {
                        Rollbar.error(error);
                    });
                    $http.get("/candidates/recording/all-questions/" + _this.invitationGuid).then(function (result) {
                        _this.questions = result.data;
                        angular.forEach(_this.questions, function (q, i) {
                            q.question = q.question + " (You have " + _this.secondsToWords(q.timeallowed) + " to answer)";
                        });
                        _this.currentQuestion = 0;
                        _this.answers = [{
                                questionGuid: _this.questions[0].guid,
                                start: 0,
                                end: _this.startTime.valueOf() + 2000 //placeholder value
                            }];
                        _this.startTimer(_this.startTime, _this.questions[0].timeallowed);
                    }, function (error) {
                        $mdToast.showSimple("Some error has happened. See console for details");
                        Rollbar.error(error);
                    });
                }, function (error) {
                    $mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            }
            RecordCVController.prototype.nextQuestion = function () {
                var _this = this;
                var currentTime = new Date();
                var timeDiff = currentTime.valueOf() - this.startTime.valueOf();
                if (this.currentQuestion === this.questions.length - 2) {
                    this.nextButtonText = "End Recording";
                }
                if (this.currentQuestion === this.questions.length - 1) {
                    this.disableNextButton = true;
                    this.answers[this.currentQuestion].end = timeDiff;
                    this.session.disconnect();
                    this.session.unpublish(this.publisher);
                    this.publisher.destroy();
                    this.$http.post("/candidates/recording/answers-video-cv/" + this.recordingGuid, this.answers).then(function (result) {
                        $("#root-bar").show();
                        _this.$state.go("root.candidate.dashboard", {}, {
                            reload: true
                        });
                    }, function (error) {
                        _this.$mdToast.showSimple("Some error has happened. See console for details");
                        Rollbar.error(error);
                    });
                }
                if (this.currentQuestion < this.questions.length - 1) {
                    this.disableNextButton = true;
                    this.answers[this.currentQuestion].end = timeDiff;
                    this.currentQuestion += 1;
                    this.answers.push({
                        questionGuid: this.questions[this.currentQuestion].guid,
                        start: timeDiff,
                        end: timeDiff + 10000 //placeholder value
                    });
                    this.startTimer(currentTime, this.questions[this.currentQuestion].timeallowed);
                }
            };
            RecordCVController.prototype.startTimer = function (startTime, limit) {
                var _this = this;
                if (limit === void 0) { limit = 30; }
                this.timerTheme = "default";
                // this.bingClientTTS.synthesize(this.questions[this.currentQuestion].question);
                if (this.timer) {
                    this.percentageLeft = 0;
                    this.secondsLeftToAnswer = 0;
                    this.$interval.cancel(this.timer);
                }
                this.timer = this.$interval(function () {
                    var currentTime = new Date();
                    var timeSinceStart = ((currentTime.valueOf() - startTime.valueOf()) / 1000.0);
                    var timeRemaining = RecordCVController.QUESTION_READING_TIME + limit - timeSinceStart;
                    var timeToAnswer = limit - timeSinceStart + RecordCVController.QUESTION_READING_TIME;
                    if (timeRemaining <= 0) {
                        _this.$interval.cancel(_this.timer);
                        _this.nextQuestion();
                    }
                    else if (timeRemaining >= 0 && timeSinceStart > RecordCVController.QUESTION_READING_TIME) {
                        _this.secondsLeftToAnswer = timeToAnswer;
                        _this.percentageLeft = 100 - Math.round(100.0 * (timeToAnswer / limit));
                    }
                    if (timeRemaining >= 0 && timeSinceStart <= RecordCVController.QUESTION_READING_TIME) {
                        _this.timerTheme = "default";
                        _this.disableNextButton = true;
                        _this.showCountdown = true;
                        _this.countdownValue = Math.round(RecordCVController.QUESTION_READING_TIME - timeSinceStart);
                    }
                    else {
                        _this.disableNextButton = false;
                        _this.showCountdown = false;
                        _this.countdownValue = 0;
                    }
                    if (_this.secondsLeftToAnswer <= RecordCVController.TIMEOUT_WARNING_TIME) {
                        _this.timerTheme = "timer";
                    }
                    else {
                        _this.timerTheme = "default";
                    }
                }, 1000);
            };
            RecordCVController.prototype.styleCountdownDisplay = function () {
                $("#countdown").text(99);
                var widest = $("#countdown").height() > $("#countdown").width() ? $("#countdown").height() : $("#countdown").width();
                widest = widest * 1.1;
                $("#countdown").width(widest);
                $("#countdown").height(widest);
                $("#countdown").css("border-radius", widest / 2.0);
                $("#countdown").css("-moz-border-radius", widest / 2.0);
                $("#countdown").css("-webkit-border-radius", widest / 2.0);
                $("#countdown").css("line-height", 1.2);
                $("#countdown").text("");
                this.widest = widest;
            };
            RecordCVController.prototype.setCountdownCoordinates = function () {
                var _this = this;
                this.isPublisherInitialized.promise.then(function () {
                    var publisherHeight = $("#publisher-element").height();
                    var publisherWidth = $("#publisher-element").width();
                    $("#countdown").css("top", (publisherHeight - _this.widest) / 2.0);
                    $("#countdown").css("left", (publisherWidth - _this.widest) / 2.0);
                });
            };
            RecordCVController.prototype.secondsToWords = function (seconds) {
                var returnVal = '';
                if (seconds < 60) {
                    returnVal = seconds + " seconds";
                }
                else if (seconds == 60) {
                    returnVal = "1 minute";
                }
                else if (seconds % 60 == 0) {
                    return (seconds / 60) + " minutes";
                }
                else {
                    var minutes = Math.floor(seconds / 60);
                    var secondsRemainder = seconds % 60;
                    if (minutes == 1) {
                        returnVal = "1 minute " + secondsRemainder + " seconds";
                    }
                    else {
                        returnVal = minutes + " minutes " + secondsRemainder + " seconds";
                    }
                }
                return returnVal;
            };
            RecordCVController.prototype.secondsToMMSS = function (t) {
                if (isNaN(t)) {
                    return "00:00";
                }
                var minutes = Math.floor(t / 60.0);
                var seconds = Math.floor(t % 60);
                return ((minutes < 10 ? "0" : "") +
                    minutes +
                    ":" +
                    (seconds < 10 ? "0" : "") +
                    seconds);
            };
            RecordCVController.QUESTION_READING_TIME = 4; //inorder to show all countdown values we increment the  number andrew requested
            RecordCVController.TIMEOUT_WARNING_TIME = 10;
            RecordCVController.$inject = ["$http", "$mdToast", "$scope", "$q", "$window", "$state", "$stateParams", "$interval", "isAttemptAllowed"];
            return RecordCVController;
        }());
        app.controller("candidate.RecordCVController", RecordCVController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var SignupController = /** @class */ (function () {
            function SignupController($http, $mdToast, $stateParams, $state, SessionService, $scope) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$scope = $scope;
                this.$onInit = function () { };
                this.promoAlreadyApplied = false;
                this.price = 10;
                this.ready = false;
                this.failed = false;
                this.errorViewModels = [];
                for (var i = 1; i <= 5; i++) {
                    if (!this.questions) {
                        this.questions = [];
                    }
                    this.questions.push({
                        order: i,
                        questionvalue: "",
                        timeallowed: 1
                    });
                }
                this.updateTotal();
                this.$http.get("/candidate/video-cv/token-newuser").then(function (result) {
                    _this.paymentsToken = result.data;
                    var button = document.querySelector('#submit-button');
                    braintree.dropin.create({
                        authorization: _this.paymentsToken.token,
                        container: '#dropin-container'
                    }, function (createErr, instance) {
                        if (createErr) {
                            Rollbar.error(createErr);
                            _this.ready = false;
                            _this.failed = true;
                            _this.errorViewModels = [{
                                    errorHeading: "Braintree Payment UI Failed To Initialize",
                                    errorMessage: JSON.stringify(createErr),
                                    hardDecline: false
                                }];
                            _this.updateDom();
                        }
                        else {
                            _this.ready = true;
                            _this.failed = false;
                            _this.updateDom();
                            _this.dropin = instance;
                        }
                    });
                }, function (error) {
                    Rollbar.error(error);
                    _this.ready = false;
                    _this.failed = true;
                    _this.errorViewModels = [{
                            errorHeading: error.error || "Error",
                            errorMessage: error.message || JSON.stringify(error),
                            hardDecline: false
                        }];
                    _this.updateDom();
                });
                $("md-content").css("overflow", "visible");
            }
            // public payClickHandler(): void {
            //   this.dropin.requestPaymentMethod((err, payload) => {
            //     // Submit payload.nonce to your server
            //     this.submitNonce(payload.nonce);
            //   });
            // }
            SignupController.prototype.loadIndustries = function () {
                var _this = this;
                this.$http.get("/candidate/video-cv/get-industries").then(function (result) {
                    _this.industries = result.data;
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            SignupController.prototype.loadQuestions = function (industryId) {
                var _this = this;
                this.$http.get("/candidate/video-cv/get-question/" + industryId).then(function (result) {
                    _this.industryQuestions = result.data;
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            SignupController.prototype.industryChanged = function () {
                var guid = this.chosenIndustry.guid;
                this.loadQuestions(guid);
            };
            SignupController.prototype.addQuestion = function (index) {
                var question = this.industryQuestions.questions[index];
                for (var i = 0; i < this.questions.length; i++) {
                    var value = this.questions[i];
                    if (!value || !value.questionvalue || !value.questionvalue.trim()) {
                        value.questionvalue = question;
                        this.industryQuestions.questions.splice(index, 1);
                        break;
                    }
                }
            };
            // public applyPromoCode() {
            //   if (this.promoCode) {
            //     this.$http.get("/candidate/video-cv/validate-promo/" + this.promoCode).then(
            //       (result: ng.IHttpPromiseCallbackArg<PromoCodeValidateDTO>) => {
            //         this.promoCodeValidity = result.data;
            //         if (this.promoCodeValidity && this.promoCodeValidity.valid) {
            //           if (Math.round(this.price - this.promoCodeValidity.amount) >= 0) {
            //             this.price = Math.round(this.price - this.promoCodeValidity.amount);
            //             this.promoAlreadyApplied = true;
            //             if (this.price <= 0) {
            //               this.dropin.teardown(() => {
            //                 var button = document.querySelector('#submit-button');
            //                 button.removeEventListener('click', this.payClickHandler);
            //                 button.addEventListener('click', () => {
            //                   // Submit empty payload.nonce to your server
            //                   this.submitNonce("");
            //                 });
            //               })
            //             }
            //           }
            //         }
            //       },
            //       (error: any) => {
            //         Rollbar.error(error);
            //       });
            //   }
            // }
            SignupController.prototype.submitNonce = function () {
                var _this = this;
                angular.forEach(this.questions, function (q, i) {
                    q.timeallowed = q.timeallowedinmins * 60;
                    q.timeallowedinmins = undefined;
                });
                this.ready = false;
                this.updateDom();
                var subscriptionDTO = {
                    email: this.email.toLowerCase(),
                    fullName: this.fullname,
                    nonce: null,
                    phone: this.phone,
                    questions: this.questions,
                    promoCode: this.promoCode
                };
                this.$http.post("/candidate/video-cv/payment-custom-video-cv", subscriptionDTO).then(function (result) {
                    if (result.data.result) {
                        var dto = {
                            username: result.data.loginCode,
                            password: "password"
                        };
                        _this.$http.post("/login", dto).then(function (res) {
                            _this.SessionService.setToken(res.headers("Authorization"));
                            if (_this.SessionService.isCandidate() && !_this.SessionService.isCompany()) {
                                _this.$state.go("root.candidate.complete-profile", {}, {
                                    reload: true
                                });
                            }
                        }, function (error) {
                            _this.$mdToast.show(_this.$mdToast.simple()
                                .textContent("Login Failed")
                                .hideDelay(10000)
                                .theme("toasttheme"));
                            Rollbar.error(error);
                        });
                    }
                    else {
                        _this.ready = false;
                        _this.failed = true;
                        if (Company.BraintreeErrors.paymentErrorCodes[result.data.processorResponseCode]) {
                            var errorCode = result.data.processorResponseCode;
                            var errorMessage = Company.BraintreeErrors.paymentErrorCodes[errorCode].implications
                                + "(Error Code: "
                                + errorCode
                                + ")";
                            _this.errorViewModels.push({
                                errorHeading: Company.BraintreeErrors.paymentErrorCodes[errorCode].text,
                                errorMessage: errorMessage,
                                hardDecline: Company.BraintreeErrors.paymentErrorCodes[errorCode].type === "Hard"
                            });
                            Rollbar.error("Payment failed." + errorMessage);
                        }
                        else {
                            // For errors which do not exist in the dictionary
                            _this.errorViewModels.push({
                                errorHeading: result.data.processorResponseCode,
                                errorMessage: result.data.processorResponseText || "Please contact us",
                                hardDecline: false
                            });
                        }
                        _this.updateDom();
                    }
                }, function (error) {
                    Rollbar.error(error);
                    _this.ready = false;
                    _this.failed = true;
                    _this.errorViewModels = [{
                            errorHeading: error.error || "Error",
                            errorMessage: error.message || JSON.stringify(error),
                            hardDecline: false
                        }];
                    _this.updateDom();
                });
            };
            SignupController.prototype.updateTotal = function () {
                var sum = 0;
                angular.forEach(this.questions, function (q, i) {
                    sum += (q.timeallowedinmins || 0);
                });
                this.total = sum;
            };
            SignupController.prototype.notAlreadyExists = function (email) {
                return this.$http.post("/candidate/video-cv/check-email", { email: email });
            };
            SignupController.prototype.tryAgain = function () {
                this.$state.go("root.candidate.signup", {
                    reload: true
                });
            };
            SignupController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            SignupController.$inject = ["$http", "$mdToast", "$stateParams", "$state", "SessionService", "$scope"];
            return SignupController;
        }());
        app.controller("candidate.SignupController", SignupController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var UserAccountController = /** @class */ (function () {
            function UserAccountController($http, $mdToast, $mdDialog, session, $state, $stateParams) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$mdDialog = $mdDialog;
                this.session = session;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.editInfo = {}; //{name:"", fullname:"", email:"", password:""};
                this.$onInit = function () { };
                this.editInfo.name = this.session.getName();
                this.editInfo.fullname = this.session.getFullName();
                this.editInfo.email = this.session.getEmail();
                this.editInfo.password = "";
            }
            UserAccountController.prototype.toggleShowDeleteAccount = function () {
                this.showDeleteAccount = !this.showDeleteAccount;
            };
            UserAccountController.prototype.deleteAccount = function () {
                var _this = this;
                var cPDTO = { confirmPassword: this.confirmPassword };
                var request = this.$mdDialog.confirm()
                    .title("Are you sure?")
                    .textContent("You will lose all access to the system if you continue.")
                    .ok("Yes, Delete My Account")
                    .cancel("CANCEL")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.post("/user/detail/delete-account", cPDTO).then(function (result) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Password Changed Successfully")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                        sessionStorage.removeItem("logo");
                        sessionStorage.removeItem("token");
                        _this.$state.go("root.company.home", {}, {
                            reload: true
                        });
                    }, function (error) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Password Change Failed")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                        _this.$state.go("root.company.home", {}, {
                            reload: true
                        });
                    });
                }, function () { });
            };
            UserAccountController.$inject = ["$http", "$mdToast", "$mdDialog", "SessionService", "$state", "$stateParams"];
            return UserAccountController;
        }());
        app.controller("candidate.UserAccountController", UserAccountController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var moment;
        var AdminDashboardController = /** @class */ (function () {
            function AdminDashboardController($http, $mdToast, $scope, SessionService, $state, $timeout, $window, $mdDialog, CompanyInterviewsService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$state = $state;
                this.$timeout = $timeout;
                this.$window = $window;
                this.$mdDialog = $mdDialog;
                this.CompanyInterviewsService = CompanyInterviewsService;
                this.TYPES = {};
                this.responseDeadline = new Date();
                this.allowDocumentUpload = false;
                this.showSelect = false;
                this.archiveList = [];
                this.search = "";
                this.showDuplicateLoading = false;
                this.selectedPageNumber = 1;
                this.pageOptions = [10, 20, 50, 100];
                this.selectedSearchCriteria = "ALL";
                this.searchText = "";
                this.disableSearch = false;
                this.totalResults = 0;
                this.disablePaging = false;
                this.sort = '-creationDate';
                this.sortableFields = [
                    {
                        label: 'Creation Date',
                        directions: [
                            { label: 'Last Posted', value: '-creationDate' },
                            { label: 'First Posted', value: 'creationDate' }
                        ]
                    },
                    {
                        label: 'Deadline',
                        directions: [
                            { label: 'End First', value: '-deadline' },
                            { label: 'End Last', value: 'deadline' }
                        ]
                    },
                ];
                this.typeFilter = '';
                this.filterFields = [
                    {
                        label: 'Interview Type',
                        options: []
                    }
                ];
                this.interviewEmailTemplateExists = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.CompanyInterviewsService.getInterviewEmailTemplate(interviewId)];
                        case 1: return [2 /*return*/, (_a.sent()).template != null];
                    }
                }); }); };
                this.filter = function (interview) {
                    var matchesFilter = _this.search == '' ? true : interview.role.toLowerCase().includes(_this.search.toLowerCase());
                    if (_this.typeFilter != '')
                        matchesFilter = matchesFilter && interview.interviewType.name === _this.typeFilter;
                    return matchesFilter;
                };
                this.listNoPaging = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, error_28;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 2, , 3]);
                                _a = this;
                                return [4 /*yield*/, this.CompanyInterviewsService.getInterviews()];
                            case 1:
                                _a.allInterviews = _b.sent();
                                this.interviews = JSON.parse(JSON.stringify(this.allInterviews));
                                this.disablePaging = true;
                                return [3 /*break*/, 3];
                            case 2:
                                error_28 = _b.sent();
                                this.showToastMessage('Some error has happened. See console for details');
                                Rollbar.error(error_28);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.create = function (interviewData) { return __awaiter(_this, void 0, void 0, function () {
                    var newInterview, error_29;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.CompanyInterviewsService.createInterview(interviewData)];
                            case 1:
                                newInterview = _a.sent();
                                this.allInterviews = __spreadArray(__spreadArray([], this.allInterviews), [newInterview]);
                                this.interviews = JSON.parse(JSON.stringify(this.allInterviews));
                                this.showToastMessage('Interview created, you can add questions now');
                                this.resetNewInterviewData();
                                return [3 /*break*/, 3];
                            case 2:
                                error_29 = _a.sent();
                                this.showCreateInterview = false;
                                this.interviewName = '';
                                this.showToastMessage(error_29.data.message);
                                Rollbar.error(error_29);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.duplicateInterview = function (interview) {
                    _this.dialog = _this.$mdDialog
                        .show({
                        controller: AdminDashboardController,
                        controllerAs: "duplicate",
                        bindToController: true,
                        templateUrl: "views/company/dialogs/duplicate-interview.html",
                        parent: angular.element(document.body),
                        locals: {
                            maxdate: _this.responseDeadline,
                            interview: interview,
                            currentInterview: interview
                        },
                        clickOutsideToClose: true,
                        escapeToClose: true
                    })
                        .then(function () {
                        _this.$mdDialog.hide();
                        console.debug("You clicked the button to close the bottom sheet");
                    })
                        .catch(function (error) {
                        console.debug("You clicked cancel button");
                        console.debug(error);
                    });
                };
                this.cancelDuplicate = function () {
                    _this.$mdDialog.hide();
                };
                this.createDuplicateInterview = function (interviewId) { return __awaiter(_this, void 0, void 0, function () {
                    var duplicateInterview;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.showDuplicateLoading = true;
                                duplicateInterview = {
                                    newName: this.duplicateInterviewName,
                                    newDeadline: this.duplicateInterviewDeadline,
                                    duplicateId: interviewId
                                };
                                //console.log(duplicateInterview);
                                return [4 /*yield*/, this.$http.post("/company/interviews/duplicate-interview/" + interviewId, duplicateInterview)
                                        .then(function (result) { return __awaiter(_this, void 0, void 0, function () {
                                        return __generator(this, function (_a) {
                                            this.showDuplicateLoading = false;
                                            this.duplicateInterviewName = null;
                                            this.duplicateInterviewDeadline = null;
                                            this.cancelDuplicate();
                                            this.showToastMessage("Interview Duplicated Succesfully");
                                            this.$state.go("root.company.candidates", { interviewId: result.data.guid });
                                            return [2 /*return*/];
                                        });
                                    }); })];
                            case 1:
                                //console.log(duplicateInterview);
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, myFilterOptions, error_30;
                    var _this = this;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0: return [4 /*yield*/, this.list()];
                            case 1:
                                _b.sent();
                                this.$scope.$on('create', function (evt, interview) { return _this.create(interview); });
                                this.$scope.$on('cancel', function (evt, interview) {
                                    return _this.interviews.find(function (i) { return i.guid === interview.guid; }).isEdit = false;
                                });
                                this.$scope.$on('update', function (evt, interview) { return _this.update(interview); });
                                _b.label = 2;
                            case 2:
                                _b.trys.push([2, 4, , 5]);
                                _a = this;
                                return [4 /*yield*/, this.CompanyInterviewsService.getInterviewTypes()];
                            case 3:
                                _a.interviewTypes = _b.sent();
                                myFilterOptions = [
                                    { label: 'All', value: '' }
                                ];
                                this.interviewTypes.forEach(function (element) {
                                    var filterObject = { label: element.name, value: element.name };
                                    myFilterOptions.push(filterObject);
                                });
                                this.filterFields[0].options = myFilterOptions;
                                return [3 /*break*/, 5];
                            case 4:
                                error_30 = _b.sent();
                                this.showToastMessage('There was an issue retrieving the interview types');
                                return [3 /*break*/, 5];
                            case 5:
                                this.companySubscriptionStatus = {
                                    hasActiveSubscription: true,
                                    everHadSubscription: true,
                                    planName: "Unlimited",
                                    forceUpgrade: false
                                };
                                this.SessionService.setPlan(this.companySubscriptionStatus);
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position("top left")
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.resetNewInterviewData = function () {
                    _this.showCreateInterview = false;
                    _this.interviewName = '';
                    _this.responseDeadline = new Date();
                };
                this.getReadableDate = function (date) { return new Date(date).toLocaleDateString('en-GB', {
                    day: 'numeric', month: 'short', year: 'numeric'
                }).replace(/ /g, '-'); };
                var d = new Date();
                this.now = new Date();
                this.timeZone = d
                    .toLocaleString("en", { timeZoneName: "short" })
                    .split(" ")
                    .pop();
                if (is.ie() ||
                    navigator.userAgent.match(/SamsungBrowser/i) ||
                    navigator.userAgent.match(/UC\s?Browser|UCWEB/i)) {
                    this.$state.go("root.system-requirements", {}, {
                        reload: false
                    });
                }
                if (is.chrome() || is.firefox() || is.safari() || is.opera()) {
                }
                else {
                    this.$state.go("root.system-requirements", {}, {
                        reload: false
                    });
                }
                this.showCreateInterview = false;
                this.currentPage = 0;
                this.pageSize = 10;
            }
            AdminDashboardController.prototype.list = function () {
                var _this = this;
                this.$http.get("/company/interviews/owned", { params: { page: this.currentPage, pagesize: this.pageSize } }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.lastCalledSearch = 'list';
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            AdminDashboardController.prototype.previousPage = function () {
                var _this = this;
                this.currentPage = this.currentPage - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/owned", { params: params }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            AdminDashboardController.prototype.nextPage = function () {
                var _this = this;
                this.currentPage = this.currentPage + 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/owned", { params: params }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            AdminDashboardController.prototype.reloadPage = function () {
                var _this = this;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/owned", { params: params }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            AdminDashboardController.prototype.getPagesArray = function (num) {
                var array = [];
                for (var i = 1; i <= num; i++) {
                    array.push(i);
                }
                return array;
            };
            AdminDashboardController.prototype.selectedPage = function () {
                var _this = this;
                this.currentPage = this.selectedPageNumber - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.selectedPageNumber - 1, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/owned", { params: params }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            AdminDashboardController.prototype.toggleSelect = function (interview) {
                if (interview.checkedForArchive) {
                    this.archiveList.push(interview);
                }
                else {
                    var index = this.archiveList.indexOf(interview);
                    this.archiveList.splice(index, 1);
                }
            };
            AdminDashboardController.prototype.assignPriority = function (interviews) {
                var priority = 0;
                var one_day = 1000 * 60 * 60 * 24;
                var today = new Date();
                var todayMs = today.getTime();
                interviews.map(function (interview) {
                    var fromDate = new Date(interview.fromUTCDateTime);
                    if (fromDate.getFullYear() == today.getFullYear() && fromDate.getMonth() == today.getMonth() && fromDate.getDate() == today.getDate()) {
                        interview.daysToStart = 0;
                    }
                    else {
                        // Calculate the difference in milliseconds
                        var difference_ms = fromDate.getTime() - todayMs;
                        // Convert back to days and return
                        interview.daysToStart = Math.round(difference_ms / one_day);
                        if (interview.daysToStart < 0) {
                            interview.daysToStart = 99999;
                        }
                    }
                });
            };
            AdminDashboardController.prototype.resultsPerPageChanged = function () {
                this.list();
            };
            AdminDashboardController.prototype.clearSearch = function () {
                this.disableSearch = false;
                this.searchText = "";
                this.selectedSearchCriteria = "ALL";
                this.currentPage = 0;
                this.list();
            };
            AdminDashboardController.prototype.searchInterviews = function () {
                var _this = this;
                this.currentPage = 0;
                this.disableSearch = true;
                this.$http.get("/company/interviews/owned", { params: { page: this.currentPage, pagesize: this.pageSize, search: this.selectedSearchCriteria, searchtext: this.searchText } }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalElements = result.data.totalElements;
                    _this.lastCalledSearch = 'search';
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            AdminDashboardController.prototype.cancelEdit = function (interview) {
                interview.isEdit = false;
            };
            AdminDashboardController.prototype.clickArchive = function () {
                this.showSelect = true;
            };
            AdminDashboardController.prototype.clickCancel = function () {
                this.showSelect = false;
                this.interviews.map(function (interview) {
                    delete interview.checkedForArchive;
                });
            };
            AdminDashboardController.prototype.cancelInterview = function (interview) {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure?")
                    .textContent("Are you sure you wish to cancel this interview? You will not be able to undo this action")
                    .ok("Confirm")
                    .cancel("Back")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/company/multiparty/cancel-event/" + interview.id, {})
                        .then(function (result) {
                        interview.cancelled = true;
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Interview Cancelled")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    }, function (error) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Request failed. Please try again")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    });
                }, function () {
                });
            };
            AdminDashboardController.prototype.clickArchiveSelected = function () {
                var _this = this;
                this.showSelect = false;
                this.$http.put("/company/interviews/archive-jobs", this.archiveList).then(function (result) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this.$mdToast.show(this.$mdToast
                            .simple()
                            .textContent(this.archiveList.length + " " + (this.archiveList.length > 1 ? 'Interviews' : 'Interview') + " Archived Sucessfully")
                            .position("top left")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                        this.showSelect = false;
                        this.$state.reload();
                        this.archiveList = [];
                        return [2 /*return*/];
                    });
                }); }, function (error) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(error.data.message)
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                });
            };
            AdminDashboardController.prototype.checkSubscriptionStatus = function () {
                return this.$http.get("/company/subscriptions/check-status");
            };
            AdminDashboardController.prototype.toggleCreateInterview = function () {
                this.showCreateInterview = !this.showCreateInterview;
            };
            AdminDashboardController.prototype.edit = function (interview) {
                interview.isEdit = true;
            };
            // public sortInterviews = () => {
            //   if (this.sort.type !== 'filter') this.interviews = this.allInterviews
            //   const sort = (a, b) => {
            //     const min = this.sort.direction === 'asc' ? a : b;
            //     const max = this.sort.direction === 'asc' ? b : a;
            //     const minField = this.sort.subfield ? min[this.sort.field][this.sort.subfield] : min[this.sort.field]
            //     const maxField = this.sort.subfield ? max[this.sort.field][this.sort.subfield] : max[this.sort.field]
            //     if (minField > maxField) { return 1 }
            //     if (maxField > minField) { return -1 }
            //     return 0;
            //   }
            //   this.interviews.sort((a: any, b: any) => sort(a, b))
            //   this.updateDom();
            // }
            AdminDashboardController.prototype.update = function (interview) {
                var _this = this;
                this.interviews.find(function (i) { return i.guid === interview.guid; }).isEdit = false;
                this.$http.put("/company/interviews/", interview).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Interview Edited Sucessfully...")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.$state.reload();
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(error.data.message)
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                });
            };
            AdminDashboardController.prototype.activateJoinInterview = function (interview) {
                var today = new Date();
                var diffMs = interview.fromUTCDateTime - today.getTime(); // milliseconds between now & Christmas
                var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);
                var endTimeinMS = interview.fromUTCDateTime + ((interview.duration + 20) * 60 * 1000);
                var differenceInEndTimeAndNow = endTimeinMS - today.getTime();
                var fromDate = new Date(interview.fromUTCDateTime);
                if (fromDate.getFullYear() == today.getFullYear() && fromDate.getMonth() == today.getMonth() && fromDate.getDate() == today.getDate()) {
                    if (diffMins <= 15 && differenceInEndTimeAndNow >= 0) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                else {
                    return false;
                }
            };
            AdminDashboardController.prototype.disableCancelAndReschedule = function (interview) {
                var today = new Date();
                var diffMs = interview.fromUTCDateTime - today.getTime(); // milliseconds between now & Christmas
                var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);
                var endTimeinMS = interview.fromUTCDateTime + ((interview.duration + 20) * 60 * 1000);
                if (diffMins <= 15) {
                    return true;
                }
                else {
                    return false;
                }
            };
            AdminDashboardController.prototype.updateMultipartyEvent = function (interview) {
                var _this = this;
                interview.fromUTCDateTime = interview.newFromUTCDateTime;
                this.$http.put("/company/multiparty/reschedule-interview", interview).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Interview Rescheduled...")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    interview.isEdit = false;
                });
            };
            AdminDashboardController.prototype.createMultipartyInterview = function () {
                var _this = this;
                this.$http.post("/company/multiparty/create-interview", this.newMultipartyInterview).then(function (result) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.list()];
                            case 1:
                                _a.sent();
                                this.newMultipartyInterview.id = null;
                                this.newMultipartyInterview.interviewName = null;
                                this.newMultipartyInterview.jobDescription = null;
                                this.showCreateInterview = false;
                                return [2 /*return*/];
                        }
                    });
                }); });
            };
            AdminDashboardController.prototype.showReschedule = function (multipartyInterview) {
                multipartyInterview.isEdit = true;
            };
            AdminDashboardController.prototype.updateDom = function () {
                if (!this.$scope.$$phase)
                    this.$scope.$apply();
            };
            AdminDashboardController.$inject = [
                "$http",
                "$mdToast",
                "$scope",
                "SessionService",
                "$state",
                "$timeout",
                "$window",
                "$mdDialog",
                "company.interviewsService"
            ];
            return AdminDashboardController;
        }());
        app.controller("company.AdminDashboardController", AdminDashboardController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var moment;
        var AdminReportsController = /** @class */ (function () {
            function AdminReportsController($http, $mdToast, $scope, SessionService, $state, $timeout, $mdDialog, CSVDownloadService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$state = $state;
                this.$timeout = $timeout;
                this.$mdDialog = $mdDialog;
                this.CSVDownloadService = CSVDownloadService;
                this.TYPES = {};
                this.sort = '-creationDate';
                this.sortableFields = [
                    {
                        label: 'Creation Date',
                        directions: [
                            { label: 'Last Posted', value: '-creationDate' },
                            { label: 'First Posted', value: 'creationDate' }
                        ]
                    },
                    {
                        label: 'Deadline',
                        directions: [
                            { label: 'End First', value: '-deadline' },
                            { label: 'End Last', value: 'deadline' }
                        ]
                    },
                ];
                this.typeFilter = '';
                this.filterFields = [
                    {
                        label: 'Interview Type',
                        options: []
                    }
                ];
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.list()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position("top left")
                        .textContent(message)
                        .theme("toasttheme"));
                };
            }
            AdminReportsController.prototype.list = function () {
                var _this = this;
                this.$http.get("/company/dashboard/overview/owned").then(function (result) {
                    _this.report = result.data;
                    _this.interviews = result.data.interviewsList;
                    _this.allInterviews = __spreadArray([], result.data.interviewsList);
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            AdminReportsController.prototype.downloadSummary = function () {
                var data = [this.report];
                var headersArrayList = ['interviewsCreated', 'liveInterviews', 'InvitationsSent', 'teamMembers', 'reattemptRequests', 'flaggedInterviews', 'flowedInterviews', 'deletedInvitations'];
                if (this.report) {
                    this.CSVDownloadService.downloadFile(data, 'Admin Summary Report', headersArrayList);
                }
            };
            AdminReportsController.prototype.downloadList = function () {
                var headersArrayList = ['name', 'hasQuestions', 'hasCandidates', 'hasRecordings', 'creationDate', 'creatorName', 'creatorEmail', 'creatorRole', 'deadline', 'attemptsAllowed', 'interviewType', 'isArchived', 'invitations', 'submitted', 'awaitingFeedback', 'additionalAttempts', 'incompleteAttempts', 'flagged', 'deleted'];
                if (this.report.interviewsList) {
                    this.CSVDownloadService.downloadFile(this.report.interviewsList, 'Admin Interviews Report', headersArrayList);
                }
            };
            AdminReportsController.$inject = [
                "$http",
                "$mdToast",
                "$scope",
                "SessionService",
                "$state",
                "$timeout",
                "$mdDialog",
                "company.CSVService"
            ];
            return AdminReportsController;
        }());
        app.controller("company.AdminReportsController", AdminReportsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var ApplicantsReportController = /** @class */ (function () {
            function ApplicantsReportController($http, $mdToast, $stateParams, interviewsService, reportsService, roleConstants, $window) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.interviewsService = interviewsService;
                this.reportsService = reportsService;
                this.roleConstants = roleConstants;
                this.$window = $window;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b, reviewers, reviewerEmails;
                    var _this = this;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _a = this;
                                return [4 /*yield*/, this.interviewsService.getInterviews()];
                            case 1:
                                _a.interview = (_c.sent()).find(function (i) { return i.guid === _this.interviewId; });
                                _b = this;
                                return [4 /*yield*/, this.reportsService.getApplicantsReport(this.interviewId)];
                            case 2:
                                _b.applicantReport = _c.sent();
                                return [4 /*yield*/, this.reportsService.getReviewersReport(this.interviewId)];
                            case 3:
                                reviewers = (_c.sent())
                                    .filter(function (reviewer) { return reviewer.reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                                reviewerEmails = Array.from(new Set(reviewers.map(function (reviewer) { return reviewer.reviewer.email; })));
                                this.reviewerReport = reviewerEmails.map(function (email) {
                                    var reviewer = reviewers.find(function (reviewer) { return reviewer.reviewer.email === email; });
                                    reviewer.name = reviewer.reviewer.fullName;
                                    reviewer.id = reviewer.reviewer.id;
                                    return reviewer;
                                });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.exportApplicantReport = function () { return __awaiter(_this, void 0, void 0, function () {
                    var url;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.reportsService.getApplicantsExcelReport(this.interviewId)];
                            case 1:
                                url = _a.sent();
                                this.$window.open(url.reportURL);
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.exportReviewerReport = function () { return __awaiter(_this, void 0, void 0, function () {
                    var url;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.reportsService.getReviewersExcelReport(this.interviewId)];
                            case 1:
                                url = _a.sent();
                                this.$window.open(url.reportURL);
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.interviewId = $stateParams.interviewId;
            }
            ApplicantsReportController.$inject = ["$http", "$mdToast", "$stateParams",
                "company.interviewsService", "company.reportsService", "roleConstants",
                "$window"
            ];
            return ApplicantsReportController;
        }());
        app.controller("company.ApplicantsReportController", ApplicantsReportController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var ApprovalsController = /** @class */ (function () {
            function ApprovalsController($http, $mdToast, session, $state, $mdDialog, $stateParams) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$stateParams = $stateParams;
                this.showApproved = false;
                this.showMainCard = false;
                this.showRejected = false;
                this.$onInit = function () { };
                this.requestId = $stateParams.requestId;
                this.$http.get("/approvals/details/" + this.requestId).then(function (result) {
                    _this.request = result.data;
                    if (_this.request.valid) {
                        _this.showMainCard = true;
                    }
                });
            }
            ApprovalsController.prototype.approve = function () {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure?")
                    .textContent("Are you sure you wish to approve the request?")
                    .ok("Approve")
                    .cancel("Cancel")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/approvals/approve/" + _this.requestId, {})
                        .then(function (result) {
                        _this.showApproved = true;
                        _this.showMainCard = false;
                    }, function (error) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent(error.data.message)
                            .hideDelay(10000)
                            .position('top left')
                            .theme("toasttheme"));
                        Rollbar.error(error);
                    });
                }, function () { });
            };
            ApprovalsController.prototype.reject = function () {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure?")
                    .textContent("Are you sure you wish to reject the request?")
                    .ok("Reject")
                    .cancel("Cancel")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/approvals/reject/" + _this.requestId, {})
                        .then(function (result) {
                        _this.showRejected = true;
                        _this.showMainCard = false;
                    }, function (error) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent(error.data.message)
                            .hideDelay(10000)
                            .position('top left')
                            .theme("toasttheme"));
                        Rollbar.error(error);
                    });
                }, function () { });
            };
            ApprovalsController.prototype.goHome = function () {
                this.$state.go("root.company.home");
            };
            ApprovalsController.$inject = ["$http", "$mdToast", "SessionService", "$state", "$mdDialog", "$stateParams"];
            return ApprovalsController;
        }());
        app.controller("company.ApprovalsController", ApprovalsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var ArchivesController = /** @class */ (function () {
            function ArchivesController($http, $mdToast, SessionService, $state, redirectIfNotLoggedIn, $mdDialog, CompanyInterviewsService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.SessionService = SessionService;
                this.$state = $state;
                this.redirectIfNotLoggedIn = redirectIfNotLoggedIn;
                this.$mdDialog = $mdDialog;
                this.CompanyInterviewsService = CompanyInterviewsService;
                this.multiPartInterviewUnArchiveList = [];
                this.allowOpenInvites = 'No';
                this.jobDescription = '';
                this.responseDeadline = 180;
                this.allowedAttempts = 1;
                this.showSelect = false;
                this.archiveList = [];
                this.orderVariable = '-creationDate';
                this.search = '';
                this.yearOptions = [];
                this.showingYear = new Date().getFullYear();
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                this.yearOptions = this.range(2019, this.showingYear);
                                _a = this;
                                return [4 /*yield*/, this.CompanyInterviewsService.getInterviewTypes()];
                            case 1:
                                _a.interviewTypes = _b.sent();
                                return [4 /*yield*/, this.list()];
                            case 2:
                                _b.sent();
                                this.yearFilter();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.getReadableDate = function (date) { return new Date(date).toLocaleDateString('en-GB', {
                    day: 'numeric', month: 'short', year: 'numeric'
                }).replace(/ /g, '-'); };
                this.list = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, error_31;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 2, , 3]);
                                _a = this;
                                return [4 /*yield*/, this.$http.get("/company/interviews/get-archived")];
                            case 1:
                                _a.interviews = (_b.sent()).data;
                                this.allInterviews = _.cloneDeep(this.interviews);
                                return [3 /*break*/, 3];
                            case 2:
                                error_31 = _b.sent();
                                this.$mdToast.showSimple("Some error has happened. See console for details");
                                Rollbar.error(error_31);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.showCreateInterview = false;
                this.showingYear = new Date().getFullYear();
            }
            ArchivesController.prototype.range = function (start, end) {
                return Array(end - start + 1).fill(0).map(function (_, idx) { return start + idx; });
            };
            ArchivesController.prototype.toggleSelect = function (interview) {
                if (interview.checkedForArchive) {
                    this.archiveList.push(interview);
                }
                else {
                    var index = this.archiveList.indexOf(interview);
                    this.archiveList.splice(index, 1);
                }
            };
            ArchivesController.prototype.toggleSelectMultiparty = function (interview) {
                if (interview.checkedForArchive) {
                    this.multiPartInterviewUnArchiveList.push(interview);
                }
                else {
                    var index = this.multiPartInterviewUnArchiveList.indexOf(interview);
                    this.archiveList.splice(index, 1);
                }
            };
            ArchivesController.prototype.clickUnArchive = function () {
                this.showSelect = true;
            };
            ArchivesController.prototype.clickCancel = function () {
                this.showSelect = false;
                this.interviews.map(function (interview) {
                    delete interview.checkedForArchive;
                });
            };
            ArchivesController.prototype.clickDeleteSelected = function () {
                var _this = this;
                var request = this.$mdDialog
                    .confirm()
                    .title("Are you sure?")
                    .textContent("The selected interviews will be permanently deleted. You will not be able recover the deleted data")
                    .ok("Delete")
                    .cancel("Cancel")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/company/interviews/delete-jobs", _this.archiveList).then(function (result) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent(_this.archiveList.length + " " + (_this.archiveList.length > 1 ? 'Interviews' : 'Interview') + " seleted sucessfully")
                            .position('top left')
                            .hideDelay(10000)
                            .theme("toasttheme"));
                        _this.showSelect = false;
                        _this.$state.reload();
                    }, function (error) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent(error.data.message)
                            .position('top left')
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    });
                }, function () {
                });
            };
            ArchivesController.prototype.clickUnArchiveSelected = function () {
                var _this = this;
                this.showSelect = false;
                this.$http.put("/company/interviews/unarchive-jobs", this.archiveList).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent(_this.archiveList.length + " " + (_this.archiveList.length > 1 ? 'Interviews' : 'Interview') + " restored sucessfully")
                        .position('top left')
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.showSelect = false;
                    _this.$state.reload();
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent(error.data.message)
                        .position('top left')
                        .hideDelay(10000)
                        .theme("toasttheme"));
                });
            };
            ArchivesController.prototype.toggleCreateInterview = function () {
                this.showCreateInterview = !this.showCreateInterview;
            };
            ArchivesController.prototype.edit = function (interview) {
                interview.isEdit = true;
            };
            ArchivesController.prototype.update = function (interview) {
                var _this = this;
                interview.isEdit = false;
                var editInterview = { role: interview.role, guid: interview.guid };
                this.$http.put("/company/interviews/", editInterview).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Interview Edited Sucessfully...")
                        .position('top left')
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent(error.data.message)
                        .position('top left')
                        .hideDelay(10000)
                        .theme("toasttheme"));
                });
            };
            ArchivesController.prototype.filter = function () {
                var _this = this;
                this.interviews = this.search != '' ?
                    this.allInterviews.filter(function (obj) { return obj.role.toLowerCase().indexOf(_this.search.toLowerCase()) !== -1; }) :
                    this.allInterviews;
            };
            ArchivesController.prototype.yearFilter = function () {
                var _this = this;
                this.interviews = this.showingYear != 0 ?
                    this.allInterviews.filter(function (obj) { return _this.getReadableDate(obj.creationDate).toLowerCase().indexOf(_this.showingYear.toString()) !== -1; }) :
                    this.allInterviews;
            };
            ArchivesController.$inject = [
                "$http", "$mdToast", "SessionService", "$state", "redirectIfNotLoggedIn", "$mdDialog", "company.interviewsService"
            ];
            return ArchivesController;
        }());
        app.controller("company.ArchivesController", ArchivesController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Admin;
    (function (Admin) {
        "use strict";
        var app = Qna.getModule();
        var BillingController = /** @class */ (function () {
            function BillingController($http, $mdToast, $stateParams, $state, SessionService, $mdDialog, $timeout, hopscotchService, $mdMenu, CSVDownloadService) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.$mdMenu = $mdMenu;
                this.CSVDownloadService = CSVDownloadService;
                this.listHeader = ['invoiceNo', 'start', 'end', 'status', 'createdAt'];
                this.$onInit = function () { };
                this.list();
            }
            BillingController.prototype.list = function () {
                var _this = this;
                this.$http.get("/admin/billing-cycle/").then(function (result) {
                    _this.billings = result.data;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            BillingController.prototype.downloadList = function (list) {
                if (list) {
                    this.CSVDownloadService.downloadFile(list, 'BillingHistory', this.listHeader);
                }
            };
            BillingController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "$state",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "HopscotchService",
                "$mdMenu",
                "company.CSVService"
            ];
            return BillingController;
        }());
        app.controller("company.BillingController", BillingController);
    })(Admin = Qna.Admin || (Qna.Admin = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var BlockedController = /** @class */ (function () {
            function BlockedController($http, $mdToast, session, $state, $mdDialog, $stateParams) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$stateParams = $stateParams;
                this.showApproved = false;
                this.showMainCard = false;
                this.showRejected = false;
                this.$onInit = function () { };
            }
            BlockedController.prototype.goHome = function () {
                this.$state.go("root.company.home");
            };
            BlockedController.$inject = ["$http", "$mdToast", "SessionService", "$state", "$mdDialog", "$stateParams"];
            return BlockedController;
        }());
        app.controller("company.BlockedController", BlockedController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var CandidateDetailsController = /** @class */ (function () {
            function CandidateDetailsController($http, $mdToast, $window, $scope, $rootScope, SessionService, $state, $stateParams, $mdDialog, interviewsService, ratingsService, invitationsService, candidateInvitationService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$window = $window;
                this.$scope = $scope;
                this.$rootScope = $rootScope;
                this.SessionService = SessionService;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$mdDialog = $mdDialog;
                this.interviewsService = interviewsService;
                this.ratingsService = ratingsService;
                this.invitationsService = invitationsService;
                this.candidateInvitationService = candidateInvitationService;
                this.TAGS = ["Accept", "Reject", "Waitlist"];
                this.SURVEY_QUESTIONS = Qna.SURVEY_QUESTIONS;
                this.applicantName = "";
                this.orderVariable = 'dateSumitted';
                this.search = '';
                this.showPaging = true;
                this.showSingle = false;
                this.selectedTag = null;
                this.selectedPageNumber = 1;
                this.pageOptions = [10, 20, 50, 100];
                this.selectedSearchCriteria = "ALL";
                this.searchText = "";
                this.disableSearch = false;
                this.totalResults = 0;
                this.tagEdit = false;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, openRatingListener;
                    var _this = this;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _a = this;
                                return [4 /*yield*/, this.interviewsService.getInterview(this.interviewId)];
                            case 1:
                                _a.interview = (_b.sent());
                                if (this.applicationId) {
                                    this.searchText = this.applicationId;
                                    this.selectedSearchCriteria = "uuid";
                                    this.showPaging = false;
                                }
                                this.list();
                                openRatingListener = this.$rootScope.$on("OpenRating", function (event, data) {
                                    if (data.tempCount === 0) {
                                        _this.showRatingsDialog(data);
                                    }
                                    else {
                                        openRatingListener();
                                    }
                                    data.tempCount = data.tempCount + 1;
                                });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.filter = function (recording) {
                    if (_this.search == null || _this.search == '' || _this.SessionService.isRoleReviewer())
                        return true;
                    return ['candidateName', 'applicantId', 'candidateEmail']
                        .map(function (field) { return recording[field].toLowerCase().indexOf(_this.search.toLowerCase()) !== -1; })
                        .some(function (match) { return match; });
                };
                this.feedbackEnabled = function (recording) {
                    return recording.candidateFeedback != null ||
                        recording.candidateFeedBackQ1 !== null || recording.candidateFeedBackQ1 !== undefined ||
                        recording.candidateFeedBackQ2 !== null || recording.candidateFeedBackQ2 !== undefined ||
                        recording.candidateFeedBackQ3 !== null || recording.candidateFeedBackQ3 !== undefined;
                };
                this.showCandidateFeedback = function (recording) {
                    _this.dialog = _this.$mdDialog
                        .show({
                        controller: CandidateDetailsController,
                        controllerAs: "recordings",
                        bindToController: true,
                        templateUrl: "views/company/dialogs/candidate-feedback.html",
                        parent: angular.element(document.body),
                        locals: {
                            recording: recording,
                            currentRecording: recording
                        },
                        clickOutsideToClose: true,
                        escapeToClose: true
                    })
                        .then(function () {
                        _this.$mdDialog.hide();
                        console.debug("You clicked the button to close the bottom sheet");
                    })
                        .catch(function () {
                        console.debug("You clicked cancel button");
                    });
                };
                this.watchInterview = function (recording) { return _this.$state.go('root.company.player', {
                    interviewId: _this.interviewId, invitationid: recording.invitationId
                }); };
                this.watchWrittenAnswers = function (recording) { return _this.$state.go('root.company.essayanswerrs', {
                    interviewId: _this.interviewId, invitationid: recording.invitationId
                }); };
                this.showDocuments = function (recording) { return _this.$state.go('root.company.documents', {
                    type: 'one', interviewid: _this.interviewId, enduserid: recording.candidateId
                }); };
                this.showRatingsDialog = function (recording) { return __awaiter(_this, void 0, void 0, function () {
                    var _loop_1, _i, _a, textResponse, _loop_2, _b, _c, videoResponse;
                    return __generator(this, function (_d) {
                        if (!recording.reviewedByYou) {
                            if (!recording.averageRatings)
                                recording.averageRatings = [];
                            _loop_1 = function (textResponse) {
                                var rating = recording.averageRatings.find(function (r) { return r.answerId === textResponse.answerId; });
                                if (!rating) {
                                    recording.averageRatings.push({
                                        answerId: textResponse.answerId,
                                        competencyName: textResponse.competencyName,
                                        yourScore: 0
                                    });
                                }
                            };
                            for (_i = 0, _a = recording.textResponses; _i < _a.length; _i++) {
                                textResponse = _a[_i];
                                _loop_1(textResponse);
                            }
                            _loop_2 = function (videoResponse) {
                                var rating = recording.averageRatings.find(function (r) { return r.answerId === videoResponse.answerId; });
                                if (!rating) {
                                    recording.averageRatings.push({
                                        answerId: videoResponse.answerId,
                                        competencyName: videoResponse.competencyName,
                                        yourScore: 0
                                    });
                                }
                            };
                            for (_b = 0, _c = recording.videoResponses; _b < _c.length; _b++) {
                                videoResponse = _c[_b];
                                _loop_2(videoResponse);
                            }
                        }
                        this.$mdDialog
                            .show({
                            controller: CandidateDetailsController,
                            controllerAs: "candidate",
                            bindToController: true,
                            templateUrl: "views/company/dialogs/oneway-recordings-rating.html",
                            parent: angular.element(document.body),
                            locals: {
                                ratings: recording.averageRatings,
                                currentRecording: recording,
                                alreadyCommented: this.canComment(recording),
                                //comment: this.getComment(recording),
                                comment: recording.endUserComment || null,
                                tag: recording.tag || null
                            },
                            clickOutsideToClose: true,
                            escapeToClose: true
                        })
                            .then(function () {
                            console.debug("You clicked the button to close the bottom sheet");
                        })
                            .catch(function () {
                            console.debug("You clicked cancel button");
                        });
                        return [2 /*return*/];
                    });
                }); };
                this.getStarsClass = function (currentRecording, questionIndex, stars) {
                    var result = 'material-icons star no-highlight';
                    var attName = "candidateFeedBackQ" + (questionIndex + 1);
                    result += currentRecording[attName] < stars ? ' disabled' : ' enabled';
                    return result;
                };
                this.getTagClass = function (candidate) { return candidate.tag ? "tag " + candidate.tag : ''; };
                this.getTagValue = function (candidate) { return candidate.tag || '+ Add Recommendation'; };
                this.editTag = function () {
                    _this.tagEdit = true;
                };
                this.saveTag = function (recording, candidate) { return __awaiter(_this, void 0, void 0, function () {
                    var error_32;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.invitationsService.tagInvitation(recording.invitationId, this.selectedTag)];
                            case 1:
                                _a.sent();
                                candidate.tag = this.selectedTag;
                                this.list();
                                return [3 /*break*/, 3];
                            case 2:
                                error_32 = _a.sent();
                                Rollbar.error(error_32);
                                return [3 /*break*/, 3];
                            case 3:
                                this.tagEdit = false;
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.canComment = function (recording) {
                    return recording.endUserComment === null;
                    // if (!this.SessionService.isRoleReviewer()) return false;
                    // const ratedByMe = recording.allRatings
                    //         .reduce((total, current) => [...total, ...current.endUserRatings || []], [])
                    //         .filter(endUserRating => endUserRating.endUserEmail === this.SessionService.getEmail());
                    // return ratedByMe.length > 0 ? ratedByMe[0].comments == null : null;
                };
                this.getComment = function (recording) {
                    var ratedByMe = recording.allRatings
                        .reduce(function (total, current) { return __spreadArray(__spreadArray([], total), current.endUserRatings || []); }, [])
                        .filter(function (endUserRating) { return endUserRating.endUserEmail === _this.SessionService.getEmail(); });
                    return ratedByMe.length > 0 ? ratedByMe[0].comments || null : null;
                };
                this.saveComment = function (recording, comment) { return __awaiter(_this, void 0, void 0, function () {
                    var error_33;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.invitationsService.commentInvitation(recording.invitationId, comment)];
                            case 1:
                                _a.sent();
                                this.$mdDialog.cancel();
                                this.showToastMessage('Successfully commented the interview');
                                this.$state.reload();
                                return [3 /*break*/, 3];
                            case 2:
                                error_33 = _a.sent();
                                this.showToastMessage('There was an issue commenting the interview');
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.showToastMessage = function (message) { return _this.$mdToast.show(_this.$mdToast
                    .simple()
                    .position("top left")
                    .textContent(message)
                    .theme("toasttheme")); };
                this.goBack = function () { return _this.$window.history.back(); };
                this.interviewId = this.$stateParams.interviewId;
                if (this.$stateParams.applicationId) {
                    this.showSingle = true;
                    this.applicationId = this.$stateParams.applicationId;
                }
                this.currentPage = 0;
                this.totalElements = 0;
                this.pageSize = 10;
            }
            CandidateDetailsController.prototype.list = function () {
                var _this = this;
                return this.$http.get("/company/recordings/paged/", { params: { interviewid: this.interviewId, search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize } }).then(function (result) {
                    var recordingList = result.data.recordingDTOS;
                    _this.recordings = recordingList; //.filter(recording => recording.completed);
                    _this.allRecordings = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    _this.lastCalledSearch = 'list';
                    _this.totalResults = result.data.totalElements;
                    for (var _i = 0, _a = _this.recordings; _i < _a.length; _i++) {
                        var recording = _a[_i];
                        recording.allRatings = recording.endUserRatings;
                        _this.applicantName = recording.candidateName;
                        if (recording.applicantProfilePicURL)
                            recording.applicantProfilePicURL = recording.applicantProfilePicURL.replace('0003', '0001');
                        if (recording.dateSumitted)
                            recording.localeDateSubmitted = new Date(recording.dateSumitted).toLocaleDateString();
                        if (recording.completed) {
                            recording.userAverageRatings = recording.averageRatings;
                            if (recording.userAverageRatings.length > 0)
                                recording.averageScore = (recording.userAverageRatings
                                    .map(function (rating) { return rating.averageScore; })
                                    .reduce(function (total, current) { return total + current; }) / recording.userAverageRatings.length).toFixed(1);
                            recording.reviews = recording.userAverageRatings.length > 0 ? recording.userAverageRatings[0].numberOfReviewers : 0;
                        }
                    }
                    return new Promise(function (resolve, reject) {
                        resolve();
                    });
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidateDetailsController.prototype.resultsPerPageChanged = function () {
                this.list();
            };
            CandidateDetailsController.prototype.previousPage = function () {
                var _this = this;
                this.currentPage = this.currentPage - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { interviewid: this.interviewId, search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { interviewid: this.interviewId, page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/recordings/paged/", { params: params }).then(function (result) {
                    var recordingList = result.data.recordingDTOS;
                    _this.recordings = recordingList; //.filter(recording => recording.completed);
                    _this.allRecordings = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    //this.totalResults = result.data.totalElements;
                    for (var _i = 0, _a = _this.recordings; _i < _a.length; _i++) {
                        var recording = _a[_i];
                        recording.allRatings = recording.endUserRatings;
                        if (recording.applicantProfilePicURL)
                            recording.applicantProfilePicURL = recording.applicantProfilePicURL.replace('0003', '0001');
                        if (recording.dateSumitted)
                            recording.localeDateSubmitted = new Date(recording.dateSumitted).toLocaleDateString();
                        if (recording.completed) {
                            recording.userAverageRatings = recording.averageRatings;
                            if (recording.userAverageRatings.length > 0)
                                recording.averageScore = (recording.userAverageRatings
                                    .map(function (rating) { return rating.averageScore; })
                                    .reduce(function (total, current) { return total + current; }) / recording.userAverageRatings.length).toFixed(1);
                            console.debug(recording.averageScore);
                            recording.reviews = recording.userAverageRatings.length > 0 ? recording.userAverageRatings[0].numberOfReviewers : 0;
                        }
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidateDetailsController.prototype.nextPage = function () {
                var _this = this;
                this.currentPage = this.currentPage + 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { interviewid: this.interviewId, search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { interviewid: this.interviewId, page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/recordings/paged/", { params: params }).then(function (result) {
                    var recordingList = result.data.recordingDTOS;
                    _this.recordings = recordingList; //.filter(recording => recording.completed);
                    _this.allRecordings = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    //this.totalResults = result.data.totalElements;
                    for (var _i = 0, _a = _this.recordings; _i < _a.length; _i++) {
                        var recording = _a[_i];
                        recording.allRatings = recording.endUserRatings;
                        if (recording.applicantProfilePicURL)
                            recording.applicantProfilePicURL = recording.applicantProfilePicURL.replace('0003', '0001');
                        if (recording.dateSumitted)
                            recording.localeDateSubmitted = new Date(recording.dateSumitted).toLocaleDateString();
                        if (recording.completed) {
                            recording.userAverageRatings = recording.averageRatings;
                            if (recording.userAverageRatings.length > 0)
                                recording.averageScore = (recording.userAverageRatings
                                    .map(function (rating) { return rating.averageScore; })
                                    .reduce(function (total, current) { return total + current; }) / recording.userAverageRatings.length).toFixed(1);
                            console.debug(recording.averageScore);
                            recording.reviews = recording.userAverageRatings.length > 0 ? recording.userAverageRatings[0].numberOfReviewers : 0;
                        }
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidateDetailsController.prototype.reloadPage = function () {
                var _this = this;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { interviewid: this.interviewId, search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { interviewid: this.interviewId, page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/recordings/paged/", { params: params }).then(function (result) {
                    var recordingList = result.data.recordingDTOS;
                    _this.recordings = recordingList; //.filter(recording => recording.completed);
                    _this.allRecordings = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    //this.totalResults = result.data.totalElements;
                    for (var _i = 0, _a = _this.recordings; _i < _a.length; _i++) {
                        var recording = _a[_i];
                        recording.allRatings = recording.endUserRatings;
                        if (recording.applicantProfilePicURL)
                            recording.applicantProfilePicURL = recording.applicantProfilePicURL.replace('0003', '0001');
                        if (recording.dateSumitted)
                            recording.localeDateSubmitted = new Date(recording.dateSumitted).toLocaleDateString();
                        if (recording.completed) {
                            recording.userAverageRatings = recording.averageRatings;
                            if (recording.userAverageRatings.length > 0)
                                recording.averageScore = (recording.userAverageRatings
                                    .map(function (rating) { return rating.averageScore; })
                                    .reduce(function (total, current) { return total + current; }) / recording.userAverageRatings.length).toFixed(1);
                            console.debug(recording.averageScore);
                            recording.reviews = recording.userAverageRatings.length > 0 ? recording.userAverageRatings[0].numberOfReviewers : 0;
                        }
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidateDetailsController.prototype.getPagesArray = function (num) {
                var array = [];
                for (var i = 1; i <= num; i++) {
                    array.push(i);
                }
                return array;
            };
            CandidateDetailsController.prototype.selectedPage = function () {
                var _this = this;
                this.currentPage = this.selectedPageNumber - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { interviewid: this.interviewId, search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.selectedPageNumber - 1, pagesize: this.pageSize };
                }
                else {
                    params = { interviewid: this.interviewId, page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/recordings/paged/", { params: { interviewid: this.interviewId, search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.selectedPageNumber - 1, pagesize: this.pageSize } }).then(function (result) {
                    var recordingList = result.data.recordingDTOS;
                    _this.recordings = recordingList; //.filter(recording => recording.completed);
                    _this.allRecordings = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    for (var _i = 0, _a = _this.recordings; _i < _a.length; _i++) {
                        var recording = _a[_i];
                        recording.allRatings = recording.endUserRatings;
                        if (recording.applicantProfilePicURL)
                            recording.applicantProfilePicURL = recording.applicantProfilePicURL.replace('0003', '0001');
                        if (recording.dateSumitted)
                            recording.localeDateSubmitted = new Date(recording.dateSumitted).toLocaleDateString();
                        if (recording.completed) {
                            recording.userAverageRatings = recording.averageRatings;
                            if (recording.userAverageRatings.length > 0)
                                recording.averageScore = (recording.userAverageRatings
                                    .map(function (rating) { return rating.averageScore; })
                                    .reduce(function (total, current) { return total + current; }) / recording.userAverageRatings.length).toFixed(1);
                            console.debug(recording.averageScore);
                            recording.reviews = recording.userAverageRatings.length > 0 ? recording.userAverageRatings[0].numberOfReviewers : 0;
                        }
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidateDetailsController.prototype.clearSearch = function () {
                this.disableSearch = false;
                this.searchText = "";
                this.selectedSearchCriteria = "ALL";
                this.currentPage = 0;
                this.list();
            };
            CandidateDetailsController.prototype.searchRecordings = function () {
                var _this = this;
                this.currentPage = 0;
                this.disableSearch = true;
                this.$http.get("/company/recordings/paged/", { params: { interviewid: this.interviewId, page: this.currentPage, pagesize: this.pageSize, search: this.selectedSearchCriteria, searchtext: this.searchText } }).then(function (result) {
                    var recordingList = result.data.recordingDTOS;
                    _this.recordings = recordingList; //.filter(recording => recording.completed);
                    _this.allRecordings = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    _this.lastCalledSearch = 'search';
                    _this.totalResults = result.data.totalElements;
                    for (var _i = 0, _a = _this.recordings; _i < _a.length; _i++) {
                        var recording = _a[_i];
                        recording.allRatings = recording.endUserRatings;
                        if (recording.applicantProfilePicURL)
                            recording.applicantProfilePicURL = recording.applicantProfilePicURL.replace('0003', '0001');
                        if (recording.dateSumitted)
                            recording.localeDateSubmitted = new Date(recording.dateSumitted).toLocaleDateString();
                        if (recording.completed) {
                            recording.userAverageRatings = recording.averageRatings;
                            if (recording.userAverageRatings.length > 0)
                                recording.averageScore = (recording.userAverageRatings
                                    .map(function (rating) { return rating.averageScore; })
                                    .reduce(function (total, current) { return total + current; }) / recording.userAverageRatings.length).toFixed(1);
                            console.debug(recording.averageScore);
                            recording.reviews = recording.userAverageRatings.length > 0 ? recording.userAverageRatings[0].numberOfReviewers : 0;
                        }
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidateDetailsController.prototype.updateDom = function () { if (!this.$scope.$$phase)
                this.$scope.$apply(); };
            CandidateDetailsController.$inject = [
                "$http", "$mdToast", "$window", "$scope", "$rootScope", "SessionService", "$state", "$stateParams",
                "$mdDialog", "company.interviewsService", "company.ratingsService", "company.invitationsService",
                "candidate.invitationsService"
            ];
            return CandidateDetailsController;
        }());
        app.controller("company.CandidateDetailsController", CandidateDetailsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var CandidateDocumentsController = /** @class */ (function () {
            function CandidateDocumentsController($http, $mdToast, $state, $mdDialog, $window, $stateParams, VideoService, $scope) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$window = $window;
                this.$stateParams = $stateParams;
                this.VideoService = VideoService;
                this.$scope = $scope;
                this.progress = 0;
                this.amazon = true;
                this.goBack = function () { return _this.$window.history.back(); };
                this.$onInit = function () { };
                this.enduserid = $stateParams.enduserid;
                this.type = $stateParams.type;
                if (this.type === 'one') {
                    this.backButtonAddress = "recordings";
                }
                else {
                    this.backButtonAddress = "multiparty-recordings";
                }
                this.interviewid = $stateParams.interviewid;
                this.list();
                this.fileElement = document.getElementById("file");
                this.uploadReady = false;
                this.wrongFileType = false;
                this.updateDom();
                this.fileElement.onchange = function (ev) {
                    _this.file = _this.fileElement.files[0];
                    _this.fileReader.readAsText(_this.file);
                };
                this.fileReader = new FileReader();
                this.fileReader.onloadend = function (ev) {
                    if (/([a-zA-Z0-9\s_\\.\-\(\):])+(.doc|.docx|.pdf)$/i.test(_this.file.name)) {
                        _this.wrongFileType = false;
                        _this.uploadReady = true;
                        _this.updateDom();
                    }
                    else {
                        _this.wrongFileType = true;
                        _this.uploadReady = false;
                        _this.updateDom();
                    }
                };
            }
            CandidateDocumentsController.prototype.list = function () {
                var _this = this;
                this.$http
                    .get("/company/recordings/get-documents/" + this.interviewid + "/" + this.enduserid)
                    .then(function (result) {
                    _this.documents = result.data;
                });
            };
            CandidateDocumentsController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            CandidateDocumentsController.$inject = [
                "$http",
                "$mdToast",
                "$state",
                "$mdDialog",
                "$window",
                "$stateParams",
                "VideoService",
                "$scope"
            ];
            return CandidateDocumentsController;
        }());
        app.controller("company.CandidateDocumentsController", CandidateDocumentsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var CandidateProfilePlayerController = /** @class */ (function () {
            function CandidateProfilePlayerController($http, $mdToast, $window, $scope, $state, $stateParams, $location, $anchorScroll, $mdDialog) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$window = $window;
                this.$scope = $scope;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$location = $location;
                this.$anchorScroll = $anchorScroll;
                this.$mdDialog = $mdDialog;
                this.duration = 0;
                this.currentTime = 0;
                this.currentRecordingIndex = 0;
                this.showProgress = true;
                this.handleLoadedData = function (event) {
                    _this.showProgress = false;
                    _this.updateDom();
                };
                this.handleSeekingEvent = function (event) {
                    _this.showProgress = true;
                    _this.updateDom();
                };
                this.handleMetaData = function (event) {
                    _this.duration = event.target.duration;
                };
                this.handleTimeUpdateEvent = function (event) {
                    _this.currentVideoPercentage =
                        100.0 * event.target.currentTime / _this.duration;
                    _this.currentTime = event.target.currentTime;
                    _this.updateDom();
                };
                this.handleSeekEvent = function (event) {
                    _this.showProgress = false;
                    _this.updateDom();
                    _this.currentVideoPercentage =
                        100.0 * _this.videoElement.currentTime / _this.duration;
                    _this.currentTime = _this.videoElement.currentTime;
                };
                this.$onInit = function () { };
                var query = Modernizr.mq('(max-width: 600px)');
                if (query) {
                    this.$location.hash("player-next-button");
                    this.$anchorScroll();
                }
                else {
                    $("#player-view").height($window.innerHeight - 96);
                    $window.addEventListener("resize", function () {
                        $("#player-view").height($window.innerHeight - 96);
                    });
                }
                this.recording = $stateParams.recording;
                this.recordings = $stateParams.recordings;
                this.duration = $stateParams.duration / 1000;
                if (angular.isUndefined(this.recording.videoURL)) {
                    this.$state.go("root.company.dashboard");
                }
                if (this.recording.videoURL.search(".*webm$") == -1) {
                    this.videoType = "video/mp4";
                }
                else {
                    this.videoType = "video/webm";
                }
                this.currentRecordingIndex = this.recordings.indexOf(this.recording);
                this.videoElement = document.getElementById("player");
                this.updateDom();
                if (is.ios() && is.safari()) {
                    this.showProgress = false;
                    this.updateDom();
                    this.videoElement.addEventListener("loadeddata", this.handleLoadedData, true);
                }
                else {
                    this.videoElement.addEventListener("loadeddata", this.handleLoadedData, true);
                }
            }
            ;
            CandidateProfilePlayerController.prototype.cancel = function () {
                this.$mdDialog.hide();
            };
            CandidateProfilePlayerController.prototype.seek = function () {
                var newTime = Math.floor(this.currentVideoPercentage * this.duration / 100);
                if (!isNaN(newTime)) {
                    this.videoElement.currentTime = newTime || 0;
                }
            };
            CandidateProfilePlayerController.prototype.jumpToCandidate = function (recordingIndex) {
                this.recording = this.recordings[recordingIndex];
                if (this.recording.videoURL.search(".*webm$") === -1) {
                    this.videoType = "video/mp4";
                }
                else {
                    this.videoType = "video/webm";
                }
                this.videoElement.removeEventListener("timeupdate", this.handleTimeUpdateEvent, true);
                this.videoElement.removeEventListener("loadedmetadata", this.handleMetaData, true);
                this.videoElement.removeEventListener("seeked", this.handleSeekEvent, true);
                this.videoElement.removeEventListener("seeking", this.handleSeekingEvent, true);
                this.currentRecordingIndex = recordingIndex;
                this.videoElement.pause();
                if (this.recording.vzaarURL === null || this.recording.vzaarURL == "" || this.recording.vzaarURL == null) {
                    this.videoElement.src = this.recording.videoURL;
                }
                else {
                    this.videoElement.src = this.recording.vzaarURL;
                }
                this.currentTime = 0;
                var duration = this.recording.recordingDuration / 1000;
                this.duration = duration;
                this.currentVideoPercentage =
                    100.0 * this.currentTime / duration;
                this.updateDom();
            };
            CandidateProfilePlayerController.prototype.play = function () {
                if (this.videoElement.paused) {
                    this.videoElement.play();
                    this.videoElement.addEventListener("timeupdate", this.handleTimeUpdateEvent, true);
                    this.videoElement.addEventListener("loadedmetadata", this.handleMetaData, true);
                    this.videoElement.addEventListener("seeking", this.handleSeekingEvent, true);
                    this.videoElement.addEventListener("seeked", this.handleSeekEvent, true);
                }
                else {
                    this.videoElement.pause();
                }
            };
            CandidateProfilePlayerController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            CandidateProfilePlayerController.prototype.mute = function () {
                if (this.videoElement.muted) {
                    this.videoElement.muted = false;
                }
                else {
                    this.videoElement.muted = true;
                }
            };
            CandidateProfilePlayerController.prototype.secondsToMMSS = function (t) {
                if (isNaN(t)) {
                    return "00:00";
                }
                var minutes = Math.floor(t / 60.0);
                var seconds = Math.floor(t % 60);
                return ((minutes < 10 ? "0" : "") +
                    minutes +
                    ":" +
                    (seconds < 10 ? "0" : "") +
                    seconds);
            };
            CandidateProfilePlayerController.prototype.goBack = function () {
            };
            CandidateProfilePlayerController.$inject = [
                "$http",
                "$mdToast",
                "$window",
                "$scope",
                "$state",
                "$stateParams",
                "$location",
                "$anchorScroll",
                "$mdDialog"
            ];
            return CandidateProfilePlayerController;
        }());
        app.controller("company.CandidateProfilePlayerController", CandidateProfilePlayerController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var CandidateProfilesController = /** @class */ (function () {
            function CandidateProfilesController($http, $mdToast, $state, $stateParams, SessionService, $mdDialog, $timeout, hopscotchService) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.search = '';
                this.orderVariable = '-recordingDate';
                this.$onInit = function () { };
                this.interviewId = $stateParams.interviewId;
                this.list();
            }
            CandidateProfilesController.prototype.filter = function () {
                var _this = this;
                if (this.search != '') {
                    this.recordingsList = _.filter(this.allRecordingsList, function (obj) {
                        return obj.candidateName.toLowerCase().indexOf(_this.search.toLowerCase()) !== -1;
                    });
                }
                else {
                    this.recordingsList = this.allRecordingsList;
                }
            };
            CandidateProfilesController.prototype.list = function () {
                var _this = this;
                this.$http
                    .get("/company/candidate-profile/", {
                    params: { interviewid: this.interviewId }
                })
                    .then(function (result) {
                    _this.recordingsList = result.data;
                    _this.allRecordingsList = result.data;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            CandidateProfilesController.prototype.milliSecondsToMMSS = function (t) {
                if (isNaN(t)) {
                    return "00:00";
                }
                t = Math.floor(t / 1000);
                var minutes = Math.floor(t / 60.0);
                var seconds = Math.floor(t % 60);
                return ((minutes < 10 ? "0" : "") +
                    minutes +
                    ":" +
                    (seconds < 10 ? "0" : "") +
                    seconds);
            };
            CandidateProfilesController.prototype.isBlank = function (s) {
                if (s) { // To appease Typescript, while converting value to truthy value.
                    return false;
                }
                else {
                    return true;
                }
            };
            CandidateProfilesController.$inject = [
                "$http",
                "$mdToast",
                "$state",
                "$stateParams",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "HopscotchService"
            ];
            return CandidateProfilesController;
        }());
        app.controller("company.CandidateProfilesController", CandidateProfilesController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var ChangePasswordController = /** @class */ (function () {
            function ChangePasswordController($http, $mdToast, session, $state, $stateParams) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$onInit = function () { };
            }
            ChangePasswordController.prototype.changePassword = function () {
                var _this = this;
                var cPDTO = { oldPassword: this.oldPassword, newPassword: this.newPassword };
                this.$http.post("/company/password/change-password", cPDTO).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Password Changed Successfully")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.$state.go("root.company.dashboard", {}, {
                        reload: true
                    });
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Password Change Failed")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.$state.go("root.company.home", {}, {
                        reload: true
                    });
                });
            };
            ChangePasswordController.$inject = ["$http", "$mdToast", "SessionService", "$state", "$stateParams"];
            return ChangePasswordController;
        }());
        app.controller("company.ChangePasswordController", ChangePasswordController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        'use strict';
        var app = Qna.getModule();
        var VideoUploadController = /** @class */ (function () {
            function VideoUploadController($http, $mdToast, $state, $stateParams, $scope, SessionService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$onInit = function () { };
                this.showRemoveVideoButton = function () {
                    var videoUrl = _this.videoType == "intro" ? _this.interview.introVideoURL : _this.interview.closingVideoURL;
                    return videoUrl != null && videoUrl != null ? videoUrl.length > 1 : false;
                };
                this.removeVideo = function () {
                    _this.$http.put("/company/interviews/remove-video/" + _this.videoType + "/" + _this.interview.guid, {})
                        .then(function () {
                        _this.showToastMessage('Video Deleted');
                        setTimeout(function () { return _this.$state.go("root.company.candidates", { 'interviewId': _this.interview.guid }, { reload: true }); }, 500);
                    }, function (error) {
                        _this.showToastMessage('Error Deleting your Video. Please try again');
                        Rollbar.error(error);
                    });
                };
                this.urlChanged = function () {
                    _this.pristine = false;
                    if (_this.youtubeURL == null)
                        return;
                    if (_this.youtubeURL.toLowerCase().search("embed") == -1 && _this.youtubeURL.toLowerCase().search("v=") != -1) {
                        var video_id = _this.youtubeURL.split("v=")[1];
                        var ampersandPosition = video_id.indexOf("&");
                        if (ampersandPosition != -1)
                            video_id = video_id.substring(0, ampersandPosition);
                        _this.youtubeURL = "https://www.youtube.com/embed/" + video_id;
                    }
                };
                this.extractDomainFromEmail = function (email) { return email.split("@")[1]; };
                this.upload = function () {
                    if (_this.file != null) {
                        _this.formData = new FormData();
                        _this.formData.append("file", _this.file);
                        var format = null;
                        if (_this.file.type.search("mp4") != -1) {
                            format = "mp4";
                        }
                        else if (_this.file.type.search("avi") != -1) {
                            format = "avi";
                        }
                        else if (_this.file.type.search("mov") != -1) {
                            format = "mov";
                        }
                        else if (_this.file.type.search("flv") != -1) {
                            format = "flv";
                        }
                        else if (_this.file.type.search("wmv") != -1) {
                            format = "wmv";
                        }
                        _this.showLoading = true;
                        _this.updateDom();
                        _this.$http.post("/company/interviews/upload-video/" + _this.interview.guid + "/" + _this.videoType + "/" + format, _this.formData, { transformRequest: angular.identity, headers: { 'Content-Type': undefined } }).then(function (result) {
                            _this.showLoading = false;
                            _this.showToastMessage('Video Uploaded');
                            setTimeout(function () { return _this.$state.go("root.company.candidates", { 'interviewId': _this.interview.guid }, { reload: true }); }, 500);
                        }, function (error) {
                            _this.showToastMessage('Error Uploading your Video. Please try again');
                            Rollbar.error(error);
                            setTimeout(function () { return _this.$state.go("root.company.candidates", { 'interviewId': _this.interview.guid }, { reload: true }); }, 500);
                        });
                    }
                    else if (_this.youtubeURL.length > 5) {
                        var video = { videoURL: _this.youtubeURL, videoType: _this.videoType };
                        _this.$http.post("/company/interviews/upload-youtube-video/" + _this.interview.guid, video).then(function () {
                            _this.showToastMessage('Video Uploaded');
                            setTimeout(function () { return _this.$state.go("root.company.candidates", { 'interviewId': _this.interview.guid }, { reload: true }); }, 500);
                        }, function (error) {
                            _this.showToastMessage('Error Uploading your Video. Please try again');
                            Rollbar.error(error);
                            setTimeout(function () { return _this.$state.go("root.company.candidates", { 'interviewId': _this.interview.guid }, { reload: true }); }, 500);
                        });
                    }
                };
                this.updateDom = function () { if (!_this.$scope.$$phase)
                    _this.$scope.$apply(); };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position("bottom right")
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.pristine = false;
                this.showLoading = false;
                this.updateDom();
                this.videoType = $stateParams.video;
                this.interview = $stateParams.interview;
                this.interviewId = this.interview.guid;
                if (this.interview.guid == null)
                    this.$state.go("root.company.dashboard", {}, { reload: true });
                var videoUrl = this.videoType == "intro" ? this.interview.introVideoURL : this.interview.closingVideoURL;
                if (videoUrl != null) {
                    if (videoUrl.search("embed") != -1) {
                        this.youtubeURL = videoUrl;
                        this.pristine = true;
                    }
                    else {
                        this.existingVideoURL = videoUrl;
                        this.url = videoUrl;
                        this.pristine = true;
                    }
                }
                this.fileElement = document.getElementById("file");
                this.fileReader = new FileReader();
                this.fileElement.onchange = function (ev) {
                    _this.pristine = false;
                    _this.file = _this.fileElement.files[0];
                    if (_this.file.size > 104857600)
                        _this.showToastMessage('Error: File Size greater than 100MB. Please try again');
                    else
                        _this.fileReader.readAsDataURL(_this.file);
                };
                this.fileReader.onloadend = function (ev) { _this.url = URL.createObjectURL(_this.file); _this.updateDom(); };
            }
            VideoUploadController.prototype.reset = function () {
                this.pristine = false;
                this.youtubeURL = null;
                this.existingVideoURL = null;
                this.file = null;
                URL.revokeObjectURL(this.url);
                this.url = null;
                this.updateDom();
            };
            VideoUploadController.prototype.checkUploadButton = function () {
                if (this.pristine)
                    return true;
                if (this.existingVideoURL != null && this.existingVideoURL != null && this.existingVideoURL.length > 1)
                    return false;
                if (this.url != null && this.url != null && this.url.length > 1)
                    return false;
                if (this.youtubeURL != null && this.youtubeURL != null && this.youtubeURL.length > 1)
                    return false;
                return true;
            };
            VideoUploadController.$inject = [
                "$http",
                "$mdToast",
                "$state",
                "$stateParams",
                "$scope",
                "SessionService"
            ];
            return VideoUploadController;
        }());
        app.controller("company.VideoUploadController", VideoUploadController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    "use strict";
    var app = Qna.getModule();
    var ContactUsController = /** @class */ (function () {
        function ContactUsController($scope, $mdDialog, $state, session, $http, $mdToast) {
            this.$scope = $scope;
            this.$mdDialog = $mdDialog;
            this.$state = $state;
            this.session = session;
            this.$http = $http;
            this.$mdToast = $mdToast;
            this.$onInit = function () { };
        }
        ContactUsController.prototype.hideTipsDialog = function () {
            this.$mdDialog.hide();
        };
        ContactUsController.prototype.submit = function () {
            var _this = this;
            console.log("test");
            this.$http.post("/company/signup/contact-us", this.contactUs).then(function () {
                _this.$mdToast.show(_this.$mdToast.simple()
                    .textContent("We will contact you soon...")
                    .position('top left')
                    .hideDelay(10000)
                    .theme("toasttheme"));
                _this.$mdDialog.hide();
            });
        };
        ContactUsController.$inject = ["$scope", "$mdDialog", "$state", "SessionService", "$http", "$mdToast"];
        return ContactUsController;
    }());
    app.controller("company.ContactUsController", ContactUsController);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var CoreCompetenciesController = /** @class */ (function () {
            function CoreCompetenciesController($http, $scope, $window, $mdToast, $stateParams, $state, SessionService, $timeout, competenciesService) {
                var _this = this;
                this.$http = $http;
                this.$scope = $scope;
                this.$window = $window;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$timeout = $timeout;
                this.competenciesService = competenciesService;
                this.QUESTION_TYPES = {
                    TEXT: 'Written Answer',
                    VIDEO: 'Video Response'
                };
                this.ratingDefinitions = {
                    0: { stars: 'one', label: 'Very Poor', field: 'oneStarRatingDefinition' },
                    1: { stars: 'two', label: 'Poor', field: 'twoStarRatingDefinition' },
                    2: { stars: 'three', label: 'Fair', field: 'threeStarRatingDefinition' },
                    3: { stars: 'four', label: 'Good', field: 'fourStarRatingDefinition' },
                    4: { stars: 'five', label: 'Excellent', field: 'fiveStarRatingDefinition' }
                };
                this.showingCompetencyQuestions = false;
                this.showCreateQuestion = false;
                this.editingQuestionId = null;
                this.total = 0;
                this.showLoading = false;
                this.list = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        return [2 /*return*/, this.$http.get("/company/core-competencies/")
                                .then(function (result) {
                                if (result.data.length > 0) {
                                    _this.competencies = result.data;
                                    angular.forEach(_this.competencies, function (q, i) {
                                        if (_this.selectedCompetency && _this.competencies[i].id === _this.selectedCompetency.id) {
                                            _this.selectedCompetency = _this.competencies[i];
                                        }
                                        q.timeallowedinmins = q.timeallowed / 60;
                                    });
                                }
                                else {
                                    if (!_this.competencies) {
                                        _this.competencies = [];
                                    }
                                }
                                $("md-content").css("overflow", "visible");
                                return new Promise(function (resolve, reject) {
                                    resolve();
                                });
                            })];
                    });
                }); };
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.list()];
                            case 1:
                                _a.sent();
                                this.$scope.$on('create', function (evt, params) { return __awaiter(_this, void 0, void 0, function () {
                                    var question, file, createdQuestion, _a;
                                    return __generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                question = params.question, file = params.file;
                                                return [4 /*yield*/, this.createCoreQuestion(this.showingCompetencyQuestionsId, question)];
                                            case 1:
                                                createdQuestion = _b.sent();
                                                if (!file) return [3 /*break*/, 3];
                                                return [4 /*yield*/, this.uploadVideo(file, createdQuestion)];
                                            case 2:
                                                _a = _b.sent();
                                                return [3 /*break*/, 5];
                                            case 3: return [4 /*yield*/, this.refreshCompetencies()];
                                            case 4:
                                                _a = _b.sent();
                                                _b.label = 5;
                                            case 5:
                                                _a;
                                                this.toggleCreateQuestion();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); });
                                this.$scope.$on('deleteChoice', function (evt, params) { return __awaiter(_this, void 0, void 0, function () {
                                    var choiceId;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                choiceId = params.choiceId;
                                                return [4 /*yield*/, this.competenciesService.deleteChoice(choiceId)];
                                            case 1:
                                                _a.sent();
                                                return [4 /*yield*/, this.refreshCompetencies()];
                                            case 2:
                                                _a.sent();
                                                return [2 /*return*/];
                                        }
                                    });
                                }); });
                                this.$scope.$on('cancel', function (evt, question) { return _this.editingQuestionId = null; });
                                this.$scope.$on('update', function (evt, params) { return __awaiter(_this, void 0, void 0, function () {
                                    var question, file, _a;
                                    return __generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0:
                                                question = params.question, file = params.file;
                                                return [4 /*yield*/, this.updateCoreQuestion(question)];
                                            case 1:
                                                _b.sent();
                                                this.editingQuestionId = null;
                                                if (!file) return [3 /*break*/, 3];
                                                return [4 /*yield*/, this.uploadVideo(file, question)];
                                            case 2:
                                                _a = _b.sent();
                                                return [3 /*break*/, 5];
                                            case 3: return [4 /*yield*/, this.refreshCompetencies()];
                                            case 4:
                                                _a = _b.sent();
                                                _b.label = 5;
                                            case 5:
                                                _a;
                                                return [2 /*return*/];
                                        }
                                    });
                                }); });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.createCoreQuestion = function (competencyId, questionData) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.$http.post("/company/core-competencies/question/" + competencyId, questionData)];
                        case 1: return [2 /*return*/, (_a.sent()).data];
                    }
                }); }); };
                /*public createCoreQuestion = async (competencyId, questionData): Promise<any> => {
                  this.$http.post(`/company/core-competencies/question/${competencyId}`, questionData)
                  .then(async (result: ng.IHttpResponse<[ICompetency]>) => {
                    return result.data;
                  },
                  error => {
                      this.showToastMessage('Error Creating Competency Question. Please try again')
                      //Rollbar.error(error);
                  });
                }*/
                this.updateCoreQuestion = function (questionData) { return __awaiter(_this, void 0, void 0, function () {
                    var updated;
                    var _this = this;
                    return __generator(this, function (_a) {
                        updated = null;
                        this.$http.put("/company/core-competencies/question/", questionData)
                            .then(function (result) { return __awaiter(_this, void 0, void 0, function () {
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        this.showToastMessage('Question updated successfully');
                                        return [4 /*yield*/, this.refreshCompetencies()];
                                    case 1:
                                        _a.sent();
                                        this.showCompetencyQuestions(this.selectedCompetency);
                                        return [2 /*return*/];
                                }
                            });
                        }); }, function (error) {
                            _this.showToastMessage('Error Updating question. Please try again');
                            Rollbar.error(error);
                        });
                        return [2 /*return*/, updated];
                    });
                }); };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position("top left")
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.showCompetencyQuestions = function (competency) {
                    _this.selectedCompetency = competency;
                    if (_this.showingCompetencyQuestionsId !== competency.id) {
                        _this.showCreateQuestion = false;
                        _this.showingCompetencyQuestions = false;
                    }
                    _this.showingCompetencyQuestions = true;
                    _this.showingCompetencyQuestionsId = competency.id;
                };
                this.isShowingQuestions = function (competency) {
                    return competency.id == _this.showingCompetencyQuestionsId;
                };
                this.getQuestionTypeText = function (question) { return _this.QUESTION_TYPES[question.questionType] || question.questionType; };
                this.toggleCreateQuestion = function () { return _this.showCreateQuestion = !_this.showCreateQuestion; };
                this.selectQuestionToEdit = function (question) { return _this.editingQuestionId = question.id; };
                this.deleteQuestion = function (question) { return __awaiter(_this, void 0, void 0, function () {
                    var index, error_34;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.$http.delete("/company/core-competencies/question/" + question.id)];
                            case 1:
                                _a.sent();
                                index = this.selectedCompetency.questionList.findIndex(function (q) { return q.id === question.id; });
                                this.selectedCompetency.questionList.splice(index, 1);
                                return [3 /*break*/, 3];
                            case 2:
                                error_34 = _a.sent();
                                Rollbar.error(error_34);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.deleteCompetency = function (competency) { return __awaiter(_this, void 0, void 0, function () {
                    var error_35;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 3, , 4]);
                                //await this.CompanyCompetenciesService.deleteCustomCompetency(competency.id);
                                return [4 /*yield*/, this.$http.delete("/company/core-competencies/" + competency.id)];
                            case 1:
                                //await this.CompanyCompetenciesService.deleteCustomCompetency(competency.id);
                                _a.sent();
                                this.competencies.splice(competency);
                                this.showToastMessage("Successfully deleted " + competency.name + " competency");
                                return [4 /*yield*/, this.refreshCompetencies()];
                            case 2:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 3:
                                error_35 = _a.sent();
                                this.showToastMessage('There was an issue deleting the competency');
                                Rollbar.error(error_35);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); };
                this.refreshCompetencies = function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.list()];
                            case 1:
                                _a.sent();
                                console.log("Refreshed");
                                return [2 /*return*/];
                        }
                    });
                }); };
                // public loadIndustries(): void {
                //   this.$http.get("/candidate/video-cv/get-industries").then(
                //     (result: ng.IHttpPromiseCallbackArg<IIndustry[]>) => {
                //       this.industries = result.data;
                //     },
                //     (error: any) => {
                //       Rollbar.error(error);
                //     }
                //   );
                // }
                // public addQuestion(index: number) {
                //   const question: string = this.industryQuestions.questions[index];
                //   for (var i = 0; i < this.questions.length; i++) {
                //     const value = this.questions[i];
                //     if (!value || !value.questionvalue || !value.questionvalue.trim()) {
                //       value.questionvalue = question;
                //       this.industryQuestions.questions.splice(index, 1);
                //       break;
                //     }
                //   }
                // }
                // public loadQuestions(industryId: string): void {
                //   this.$http.get("/candidate/video-cv/get-question/" + industryId).then(
                //     (result: ng.IHttpPromiseCallbackArg<IIndustryQuestions>) => {
                //       this.industryQuestions = result.data;
                //     },
                //     (error: any) => {
                //       Rollbar.error(error);
                //     }
                //   );
                // }
                // public industryChanged(): void {
                //   const guid = this.chosenIndustry.guid;
                //   this.loadQuestions(guid);
                // }
                // public addAdditionalQuestion(): void {
                //   if (this.questions[0].frozen) {
                //     this.$mdToast.showSimple("Questions are frozen");
                //   } else {
                //     if (this.questions.length < 10) {
                //       this.questions.push(<Question>{
                //         order: this.questions.length + 1,
                //         questionvalue: "",
                //         timeallowed: 1,
                //         newQuestion:true
                //       });
                //     } else {
                //       this.$mdToast.showSimple("Maximum questions limit reached");
                //     }
                //   }
                // }
                // public submitQuestions(): void {
                //   angular.forEach(this.questions, (q: Question, i: number) => {
                //     q.timeallowed = q.timeallowedinmins * 60;
                //     q.timeallowedinmins = undefined;
                //   });
                //   if (
                //     this.questions.every(
                //       (v: Question, i: number): boolean => {
                //         if (v.guid||v.newQuestion) {
                //           return true;
                //         } else {
                //           return false;
                //         }
                //       }
                //     )
                //   ) {
                //     this.$http.put("/company/questions/", this.questions).then(
                //       (value: angular.IHttpPromiseCallbackArg<{}>) => {
                //         this.$state.go("root.company.dashboard");
                //       },
                //       (error: any) => {
                //         this.$mdToast.showSimple(error.name + " " + error.message);
                //       }
                //     );
                //   } else {
                //     this.$http
                //       .post("/company/questions/" + this.interviewId, this.questions)
                //       .then(
                //         (value: angular.IHttpPromiseCallbackArg<{}>) => {
                //           this.$state.go("root.company.dashboard");
                //         },
                //         (error: any) => {
                //           this.$mdToast.showSimple(error.name + " " + error.message);
                //         }
                //       );
                //   }
                // }
                this.uploadVideo = function (file, question) {
                    if (!file)
                        return;
                    console.log("UPLOAD FOR: " + JSON.stringify(question));
                    var formData = new FormData();
                    formData.append("file", file);
                    var format = file.type.split('/')[1];
                    _this.showLoading = true;
                    _this.$http.post("/company/core-competencies/question-video/" + question.id + "/" + format, formData, { transformRequest: angular.identity, headers: { 'Content-Type': undefined } }).then(function (result) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    this.showLoading = false;
                                    this.showToastMessage('Video Uploaded');
                                    return [4 /*yield*/, this.refreshCompetencies()];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/];
                            }
                        });
                    }); }, function (error) {
                        _this.showToastMessage('Error Uploading your Video. Please try again');
                        Rollbar.error(error);
                    });
                };
                this.showAddCoreCompetency = false;
                this.ratings = Array.from({ length: 5 }).map(function (element, index) { return ({
                    modelField: _this.ratingDefinitions[index].field,
                    label: index + 1 + " - " + _this.ratingDefinitions[index].label,
                    placeholder: "What are you looking for in a " + _this.ratingDefinitions[index].stars + " star answer?"
                }); }).reverse();
            }
            CoreCompetenciesController.prototype.toggleAddCompetency = function () {
                this.showAddCoreCompetency = !this.showAddCoreCompetency;
            };
            CoreCompetenciesController.prototype.toggleEditCompetency = function (competency) {
                this.editableCompetency = competency;
                this.showEditCoreCompetency = !this.showEditCoreCompetency;
            };
            CoreCompetenciesController.prototype.createNew = function () {
                var _this = this;
                this.$http.post("/company/core-competencies/", this.newCompetency)
                    .then(function (result) {
                    _this.showAddCoreCompetency = false;
                    if (_this.competencies) {
                        _this.competencies.push(result.data);
                    }
                    _this.showToastMessage("Successfully created " + result.data.name + " competency");
                    _this.showAddCoreCompetency = false;
                }, function (error) {
                    _this.showAddCoreCompetency = false;
                    _this.showToastMessage(error.data.message);
                    Rollbar.error(error);
                });
            };
            CoreCompetenciesController.prototype.updateCompetency = function () {
                var _this = this;
                this.$http.put("/company/core-competencies/", this.editableCompetency)
                    .then(function (result) {
                    _this.showEditCoreCompetency = false;
                    _this.showToastMessage("Successfully updated " + result.data.name + " competency");
                    _this.showEditCoreCompetency = false;
                    _this.refreshCompetencies();
                }, function (error) {
                    _this.showEditCoreCompetency = false;
                    _this.showToastMessage(error.data.message);
                    Rollbar.error(error);
                });
            };
            CoreCompetenciesController.prototype.selectCompetency = function (competency) {
                this.selectedCompetency = competency;
            };
            CoreCompetenciesController.prototype.updateTotal = function () {
                var sum = 0;
                angular.forEach(this.selectedCompetency.questionList, function (q, i) {
                    sum += q.timeallowedinmins || 0;
                });
                this.total = sum;
            };
            CoreCompetenciesController.$inject = [
                "$http",
                "$scope",
                "$window",
                "$mdToast",
                "$stateParams",
                "$state",
                "SessionService",
                "$timeout",
                "company.competenciesService"
            ];
            return CoreCompetenciesController;
        }());
        app.controller("company.CoreCompetenciesController", CoreCompetenciesController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var DynamicReportsController = /** @class */ (function () {
            function DynamicReportsController(session, $state, $stateParams, $window, reportsService, CSVDownloadService) {
                var _this = this;
                this.session = session;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$window = $window;
                this.reportsService = reportsService;
                this.CSVDownloadService = CSVDownloadService;
                this.showList = false;
                this.reportTypes = [
                    'All',
                    'Reattempt Requests',
                    'Flagged Interviews',
                    'Flowed Interviews',
                    'Interviews',
                    'Invitations',
                ];
                this.startDate = null;
                this.endDate = null;
                this.reportType = null;
                this.startDateSelected = null;
                this.endDateSelected = null;
                this.reportTypeSelected = 'All';
                this.showReportCrumbs = false;
                this.maxDate = new Date();
                this.allowToggle = true;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var createdData;
                    return __generator(this, function (_a) {
                        createdData = [0];
                        this.myChart = new Chart("myChart", {
                            type: 'doughnut',
                            data: {
                                labels: ['Interviews Created'],
                                datasets: [{
                                        label: 'Interviews',
                                        data: createdData,
                                        backgroundColor: [
                                            '#4fa953',
                                            '#09b2c7',
                                            '#fd9811',
                                            '#4260f5',
                                            '#d719fc',
                                            '#999999',
                                            '#e73e3b',
                                            '#ffff4d'
                                        ],
                                        borderColor: [
                                            'rgba(255,99,132,1)',
                                            'rgba(54, 162, 235, 1)',
                                            'rgba(255, 206, 86, 1)',
                                            'rgba(75, 192, 192, 1)',
                                            'rgba(75, 192, 192, 1)',
                                            'rgba(75, 192, 192, 1)',
                                            'rgba(75, 192, 192, 1)',
                                            'rgba(75, 192, 192, 1)'
                                        ],
                                        borderWidth: 1
                                    }]
                            },
                            options: {
                                cutoutPercentage: 40,
                                responsive: true,
                                animation: {
                                    animateRotate: true
                                },
                                plugins: {
                                    legend: {
                                        labels: {
                                            // This more specific font property overrides the global property
                                            font: {
                                                size: 20
                                            }
                                        }
                                    }
                                }
                            }
                        });
                        this.myChart2 = new Chart("myChart2", {
                            type: 'bar',
                            data: {
                                labels: ['Interviews Created', 'Live Interviews', 'Invitations Sent', 'Team Members', 'Reattempt Requests', 'Flagged Interviews', 'Flowed Interviews', 'Applicants Feedback'],
                                datasets: [{
                                        label: 'Interviews',
                                        data: createdData,
                                        backgroundColor: [
                                            '#4fa953',
                                            '#09b2c7',
                                            '#fd9811',
                                            '#e73e3b',
                                            '#09b2d9',
                                            '#e73e9d',
                                            '#e73e3b',
                                            '#09b2d9'
                                        ],
                                        borderColor: [
                                            'rgba(255,99,132,1)',
                                            'rgba(54, 162, 235, 1)',
                                            'rgba(255, 206, 86, 1)',
                                            'rgba(75, 192, 192, 1)',
                                            'rgba(75, 192, 192, 1)',
                                            'rgba(75, 192, 192, 1)',
                                            'rgba(75, 192, 192, 1)',
                                            'rgba(75, 192, 192, 1)'
                                        ],
                                        borderWidth: 1
                                    }]
                            },
                            options: {
                                //cutoutPercentage: 40,
                                responsive: true,
                                plugins: {
                                    legend: {
                                        labels: {
                                            // This more specific font property overrides the global property
                                            font: {
                                                size: 20
                                            }
                                        }
                                    }
                                }
                            }
                        });
                        return [2 /*return*/];
                    });
                }); };
                this.toggleListMode = function () { return _this.showList = !_this.showList; };
                //console.log(this.$stateParams);
                if (this.$stateParams.reportOrigin != null) {
                    this.showReportCrumbs = true;
                }
                if (this.$stateParams.reportType != null || angular.isDefined(this.$stateParams.reportType)) {
                    this.reportType = this.$stateParams.reportType;
                    this.reportTypeSelected = this.$stateParams.reportType;
                }
                if (this.$stateParams.startDate != null || angular.isDefined(this.$stateParams.startDate)) {
                    this.startDate = new Date(this.$stateParams.startDate);
                    this.startDateSelected = new Date(this.$stateParams.startDate);
                }
                if (this.$stateParams.endDate != null || angular.isDefined(this.$stateParams.endDate)) {
                    this.endDate = new Date(this.$stateParams.endDate);
                    this.endDateSelected = new Date(this.$stateParams.endDate);
                }
                if (this.reportType && this.startDate && this.endDate) {
                    this.fetchOverview();
                }
            }
            DynamicReportsController.prototype.fetchOverview = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var from, to, _a, _b, createdData, labels;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                this.startDate = this.startDateSelected;
                                this.endDate = this.endDateSelected;
                                this.reportType = this.reportTypeSelected;
                                this.showList = false;
                                this.report = null;
                                from = this.formatDate(this.startDate);
                                to = this.formatDate(this.endDate);
                                if (!(this.reportType === 'All')) return [3 /*break*/, 2];
                                _a = this;
                                return [4 /*yield*/, this.reportsService.getDynamicCountReport(from, to)];
                            case 1:
                                _a.dashboardOverview = _c.sent();
                                return [3 /*break*/, 4];
                            case 2:
                                _b = this;
                                return [4 /*yield*/, this.reportsService.getDynamicDetailedReport(this.reportType, from, to)];
                            case 3:
                                _b.report = _c.sent();
                                this.invitationsHeader = (this.report.invitationsList && this.report.invitationsList.length > 0) ? Object.keys(this.report.invitationsList[0]) : [];
                                this.reattemptHeader = (this.report.reattemptList && this.report.reattemptList.length > 0) ? Object.keys(this.report.reattemptList[0]) : [];
                                this.flaggedHeader = (this.report.flaggedList && this.report.flaggedList.length > 0) ? Object.keys(this.report.flaggedList[0]) : [];
                                this.flowedHeader = (this.report.flowedList && this.report.flowedList.length > 0) ? Object.keys(this.report.flowedList[0]) : [];
                                this.interviewsHeader = ['name', 'hasQuestions', 'hasCandidates', 'hasRecordings', 'creationDate', 'creatorName', 'creatorEmail', 'creatorRole', 'deadline', 'attemptsAllowed', 'interviewType', 'archived', 'invitations', 'awaitingFeedback', 'additionalAttempts', 'incompleteAttempts', 'flagged', 'deleted'];
                                _c.label = 4;
                            case 4:
                                createdData = [];
                                this.numbersOverview = {
                                    reattemptsRequested: null,
                                    reattemptsAccepted: null,
                                    reattemptsRejected: null,
                                    flaggedInterviews: null,
                                    flaggedAccepted: null,
                                    flaggedRejected: null,
                                    flowedInterviews: null,
                                    interviewsCreated: null,
                                    invitations: null,
                                    interviewsCompleted: null,
                                    invitationsSent: null,
                                    invitationsSubmitted: null,
                                    invitationsPending: null,
                                    incompleteAttempts: null,
                                };
                                labels = [];
                                switch (this.reportType) {
                                    case 'All':
                                        labels = ['Interviews Created', 'Live Interviews', 'Invitations Sent', 'Team Members', 'Reattempt Requests', 'Flagged Interviews', 'Flowed Interviews', 'Applicants Feedback'];
                                        createdData = [this.dashboardOverview.interviewsCreated, this.dashboardOverview.liveInterviews, this.dashboardOverview.invitationsSent, this.dashboardOverview.teamMembers, this.dashboardOverview.reattemptRequests, this.dashboardOverview.flaggedInterviews, this.dashboardOverview.flowedInterviews, this.dashboardOverview.applicantsFeedback];
                                        this.allowToggle = true;
                                        break;
                                    case 'Reattempt Requests':
                                        labels = ['Reattempts Requested', 'Accepted', 'Rejected'];
                                        this.numbersOverview.reattemptsRequested = this.report['reattemptList'].length;
                                        this.numbersOverview.reattemptsAccepted = this.report['reattemptList'].filter(function (val) { return val.status === 'APPROVED'; }).length;
                                        this.numbersOverview.reattemptsRejected = this.report['reattemptList'].filter(function (val) { return val.status === 'REJECTED'; }).length;
                                        createdData = [this.numbersOverview.reattemptsRequested, this.numbersOverview.reattemptsAccepted, this.numbersOverview.reattemptsRejected];
                                        this.allowToggle = true;
                                        break;
                                    case 'Flagged Interviews':
                                        labels = ['Flagged Interviews', 'Accepted', 'Rejected'];
                                        this.numbersOverview.flaggedInterviews = this.report['flaggedList'].length;
                                        this.numbersOverview.flaggedAccepted = this.report['flaggedList'].filter(function (val) { return val.status === 'ACCEPTED'; }).length;
                                        this.numbersOverview.flaggedRejected = this.report['flaggedList'].filter(function (val) { return val.status === 'REJECTED'; }).length;
                                        createdData = [this.numbersOverview.flaggedInterviews, this.numbersOverview.flaggedAccepted, this.numbersOverview.flaggedRejected];
                                        this.allowToggle = true;
                                        break;
                                    case 'Flowed Interviews':
                                        labels = ['Flowed Interviews'];
                                        this.numbersOverview.flowedInterviews = this.report['flowedList'].length;
                                        createdData = [this.numbersOverview.flowedInterviews];
                                        this.showList = true;
                                        this.allowToggle = false;
                                        break;
                                    case 'Interviews':
                                        labels = ['Interviews Created', 'Invitations Sent', 'Interviews Completed'];
                                        this.numbersOverview.interviewsCreated = this.report['interviewsList'].length;
                                        this.numbersOverview.invitations = this.report['interviewsList'].reduce(function (sum, val) { return sum + Number(val.invitations); }, 0);
                                        this.numbersOverview.interviewsCompleted = this.report['interviewsList'].reduce(function (sum, val) { return sum + Number(val.completed); }, 0);
                                        createdData = [this.numbersOverview.interviewsCreated, this.numbersOverview.invitations, this.numbersOverview.interviewsCompleted];
                                        this.allowToggle = true;
                                        break;
                                    case 'Invitations':
                                        labels = ['Invitations Sent', 'Submitted', 'Pending', 'Incomplete Attempts'];
                                        this.numbersOverview.invitationsSent = this.report['invitationsList'].length;
                                        this.numbersOverview.invitationsSubmitted = this.report['invitationsList'].filter(function (val) { return val.status === 'Complete'; }).length;
                                        this.numbersOverview.invitationsPending = this.report['invitationsList'].filter(function (val) { return val.status === 'Pending Attempt'; }).length;
                                        this.numbersOverview.incompleteAttempts = this.report['invitationsList'].filter(function (val) { return val.status === 'Incomplete Attempt'; }).length;
                                        createdData = [this.numbersOverview.invitationsSent, this.numbersOverview.invitationsSubmitted, this.numbersOverview.invitationsPending, this.numbersOverview.incompleteAttempts];
                                        this.allowToggle = true;
                                        break;
                                }
                                this.myChart.data.datasets.forEach(function (dataset) {
                                    dataset.data = createdData;
                                });
                                this.myChart.data.labels = labels;
                                this.myChart.update();
                                this.myChart2.data.datasets.forEach(function (dataset) {
                                    dataset.data = createdData;
                                });
                                this.myChart2.data.labels = labels;
                                this.myChart2.update();
                                return [2 /*return*/];
                        }
                    });
                });
            };
            DynamicReportsController.prototype.onSelect = function (type) {
                return __awaiter(this, void 0, void 0, function () {
                    var reportKey, from, to, resp;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!(this.startDate && this.startDate)) return [3 /*break*/, 2];
                                reportKey = void 0;
                                switch (type) {
                                    case 'Reattempt Requests':
                                        reportKey = 'reattemptList';
                                        break;
                                    case 'Flagged Interviews':
                                        reportKey = 'flaggedList';
                                        break;
                                    case 'Flowed Interviews':
                                        reportKey = 'flowedList';
                                        break;
                                    case 'Interviews':
                                        reportKey = 'interviewsList';
                                        break;
                                    case 'Invitations':
                                        reportKey = 'invitationsList';
                                        break;
                                }
                                if (!(!this.report || !this.report[reportKey])) return [3 /*break*/, 2];
                                from = this.formatDate(this.startDate);
                                to = this.formatDate(this.endDate);
                                return [4 /*yield*/, this.reportsService.getDynamicDetailedReport(type, from, to)];
                            case 1:
                                resp = _a.sent();
                                if (this.report) {
                                    this.report[reportKey] = resp[reportKey];
                                }
                                else {
                                    this.report = resp;
                                }
                                this.invitationsHeader = (this.report.invitationsList && this.report.invitationsList.length > 0) ? Object.keys(this.report.invitationsList[0]) : [];
                                this.reattemptHeader = (this.report.reattemptList && this.report.reattemptList.length > 0) ? Object.keys(this.report.reattemptList[0]) : [];
                                this.flaggedHeader = (this.report.flaggedList && this.report.flaggedList.length > 0) ? Object.keys(this.report.flaggedList[0]) : [];
                                this.flowedHeader = (this.report.flowedList && this.report.flowedList.length > 0) ? Object.keys(this.report.flowedList[0]) : [];
                                this.interviewsHeader = ['name', 'hasQuestions', 'hasCandidates', 'hasRecordings', 'creationDate', 'creatorName', 'creatorEmail', 'creatorRole', 'deadline', 'attemptsAllowed', 'interviewType', 'archived', 'invitations', 'awaitingFeedback', 'additionalAttempts', 'incompleteAttempts', 'flagged', 'deleted'];
                                _a.label = 2;
                            case 2: return [2 /*return*/];
                        }
                    });
                });
            };
            DynamicReportsController.prototype.downloadSummary = function () {
                var data = [this.dashboardOverview];
                var headersArrayList = ['invitations', 'submitted', 'awaitingFeedback', 'additionalAttempts', 'incompleteAttempts', 'flagged', 'interviews', 'reviewers', 'deleted'];
                if (this.dashboardOverview) {
                    this.CSVDownloadService.downloadFile(data, 'Summary Report', headersArrayList);
                }
            };
            DynamicReportsController.prototype.downloadList = function (list, headersArrayList) {
                if (list) {
                    this.CSVDownloadService.downloadFile(list, 'DynamicReportDetailed', headersArrayList);
                }
            };
            DynamicReportsController.prototype.formatDate = function (dateObj) {
                var dd = dateObj.getDate().toString();
                var mm = (dateObj.getMonth() + 1).toString();
                var yyyy = dateObj.getFullYear();
                if (Number(dd) < 10) {
                    dd = '0' + dd;
                }
                if (Number(mm) < 10) {
                    mm = '0' + mm;
                }
                return dd + '/' + mm + '/' + yyyy;
            };
            DynamicReportsController.$inject = ["SessionService", "$state", "$stateParams", "$window", "company.reportsService", "company.CSVService"];
            return DynamicReportsController;
        }());
        app.controller("company.DynamicReportsController", DynamicReportsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var EmployeeInterviewController = /** @class */ (function () {
            function EmployeeInterviewController($http, $mdToast, $stateParams, SessionService, $mdDialog, $scope, $state) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$scope = $scope;
                this.$state = $state;
                this.subscribedStreams = new Array();
                this.$onInit = function () { };
                this.muted = false;
                this.videoOn = true;
                this.sessionData = { participantEmail: null, participantName: null, participantyType: null };
                var navbar = document.getElementById("navbar");
                var candidateElement = document.getElementById("candidate-element");
                candidateElement.style.maxHeight = window.innerHeight * 0.80 + "px";
                if (angular.isDefined(navbar) && navbar != null) {
                    navbar.remove();
                }
                var height = window.innerHeight;
                this.eventid = $stateParams.eventid;
                this.$http.get("/company/multiparty/check-rating-exists-user/" + this.eventid)
                    .then(function (result) {
                    _this.hasAnyRatings = result.data.hasAnyRatings;
                    if (result.data.exists) {
                        _this.hasGivenRating = true;
                        _this.$http.get("/company/multiparty/get-rating-by-user/" + _this.eventid).then(function (result) {
                            _this.userRatings = result.data;
                        });
                    }
                    else {
                        _this.hasGivenRating = false;
                    }
                });
                this.$http.get("/company/multiparty/rating-dimensions-event/" + this.eventid).then(function (result) {
                    _this.rating = result.data;
                    if (result.data.length < 1) {
                        _this.hasDimensionsSet = false;
                    }
                    else {
                        _this.hasDimensionsSet = true;
                    }
                });
                this.$http
                    .get("/company/multiparty/get-create-session/" + this.eventid)
                    .then(function (result) {
                    _this.apiKey = result.data.apiKey;
                    _this.sessionId = result.data.openTokSessionId;
                    _this.token = result.data.openTokToken;
                    _this.multipartySession = result.data;
                    _this.sessionData.participantyType = 'Employee';
                    _this.sessionData.participantName = _this.SessionService.getFullName();
                    _this.sessionData.participantEmail = _this.SessionService.getEmail();
                    var publisherProperties = {
                        publishAudio: true,
                        publishVideo: true,
                        height: height * 0.20,
                        width: height * 0.20,
                        name: JSON.stringify(_this.sessionData),
                        style: {
                            archiveStatusDisplayMode: "off",
                            nameDisplayMode: "off"
                        }
                    };
                    _this.publisher = OT.initPublisher("publisher", publisherProperties, function (error) {
                        if (error) {
                            _this.$mdToast.show(_this.$mdToast
                                .simple()
                                .textContent(error.name + " " + error.message)
                                .hideDelay(10000)
                                .theme("toasttheme"));
                        }
                        else {
                            // $mdToast.showSimple("Publisher initialized");
                        }
                    });
                    var candidateElement = document.getElementById("candidate");
                    candidateElement.style.width = window.innerWidth + "px";
                    candidateElement.style.height = window.innerHeight * 0.80 + "px";
                    // let videoElement = <HTMLElement>document.getElementById("employee");
                    // videoElement.style.height=(window.innerHeight-96)*0.2+"px";
                    // videoElement.style.width=window.innerWidth+"px";
                    _this.layout = initLayoutContainer(document.getElementById("employee"), {
                        bigFixedRatio: false
                    }).layout;
                    _this.candidateLayout = initLayoutContainer(document.getElementById("candidate"), {
                        bigFixedRatio: false
                    }).layout;
                    _this.publisher.on({
                        accessAllowed: function (event) {
                            // $mdToast.showSimple('Thank you for allowing access to your camera and microphone.');
                            Rollbar.log("Thank you for allowing access to your camera and microphone.");
                        },
                        accessDenied: function (event) {
                            _this.$mdToast.show(_this.$mdToast
                                .simple()
                                .textContent("Please allow us access to your camera and microphone before the recording begins")
                                .hideDelay(10000)
                                .theme("toasttheme"));
                            Rollbar.log("Please allow us access to your camera and microphone before the recording begins.");
                        },
                        accessDialogOpened: function (event) {
                            _this.$mdToast.show(_this.$mdToast
                                .simple()
                                .textContent("Use your browser's popup to grant us access to your camera and microphone")
                                .hideDelay(10000)
                                .theme("toasttheme"));
                            Rollbar.log("Use your browser's popup to grant us access to your camera and microphone");
                        },
                        videoElementCreated: function (event) {
                            //  var videoElement: HTMLVideoElement = event.element;
                            //  $("#publisher").append(videoElement);
                            //  var height=window.innerHeight;
                            //  videoElement.style.width=height*0.20+"px";
                            //  videoElement.style.height=height*0.20+"px";
                            // document.getElementById("publisher").style.width=height*0.20+"px";
                            // document.getElementById("publisher").style.height=height*0.20+"px";
                            _this.updateDom();
                        }
                    });
                    _this.session = OT.initSession(_this.apiKey, _this.sessionId);
                    var __this = _this;
                    _this.session.connect(_this.token, function (error) {
                        _this.session.on("streamCreated", function (event) {
                            var subscribers = _this.session.getSubscribersForStream(event.stream);
                            console.log(subscribers);
                            var stream = event.stream;
                            var sessionData = JSON.parse(stream.name);
                            if (__this.subscribedStreams.indexOf(sessionData.participantEmail) == -1) {
                                __this.subscribedStreams.push(sessionData.participantEmail);
                                if (sessionData.participantyType === 'Candidate') {
                                    var subscriber = _this.session.subscribe(event.stream, document.getElementById("#publisher-element"), {
                                        insertMode: "append",
                                        width: "100%",
                                        height: "100%",
                                        style: { nameDisplayMode: "on" }
                                    });
                                    $('.OT_bar')[0].style.backgroundColor = '#800080';
                                    var element = subscriber.element;
                                    element.getElementsByTagName("h1")[0].style.textAlign = "center";
                                    element.getElementsByTagName("h1")[0].textContent = _this.multipartySession.candidateName;
                                    _this.candidateLayout();
                                }
                                else {
                                    var sessionData = JSON.parse(stream.name);
                                    var subscriber = _this.session.subscribe(event.stream, document.getElementById("employee"), {
                                        insertMode: "append",
                                        width: "100%",
                                        height: "100%",
                                        style: { nameDisplayMode: "on" }
                                    });
                                    var element = subscriber.element;
                                    var employeeElement = document.getElementById("employee");
                                    element.getElementsByTagName("h1")[0].style.position = "absolute";
                                    element.getElementsByTagName("h1")[0].style.textAlign = "center";
                                    element.getElementsByTagName("h1")[0].textContent = sessionData.participantName;
                                    element.getElementsByTagName("h1")[0].style.fontStyle = "bold";
                                    $('.OT_bar')[0].style.backgroundColor = '#800080';
                                    element.style.height = window.innerHeight * 0.20 + "px";
                                    _this.layout();
                                    //element.style.left=(window.innerHeight* 0.20 * (employeeElement.childElementCount+1))+"px";
                                    // element.style.width=window.innerHeight*0.20+"px";
                                }
                            }
                        });
                        _this.session.on("streamDestroyed", function (event) {
                            var stream = event.stream;
                            var sessionData = JSON.parse(stream.name);
                            var index = __this.subscribedStreams.indexOf(sessionData.participantEmail);
                            __this.subscribedStreams.splice(index, 1);
                            event.preventDefault();
                            _this.session
                                .getSubscribersForStream(event.stream)
                                .forEach(function (subscriber) {
                                subscriber.element.classList.remove("ot-layout");
                                setTimeout(function () {
                                    subscriber.destroy();
                                    //    this.layout();
                                }, 200);
                            });
                        });
                        _this.session.publish(_this.publisher, function () { });
                    });
                });
            }
            EmployeeInterviewController.prototype.getNumber = function (num) {
                return new Array(num);
            };
            EmployeeInterviewController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            EmployeeInterviewController.prototype.disconnect = function () {
                this.session.unpublish(this.publisher);
                this.session.disconnect();
                this.publisher.destroy();
                this.$state.go("root.company.dashboard", {}, { reload: true });
            };
            EmployeeInterviewController.prototype.mute = function () {
                if (this.muted) {
                    this.publisher.publishAudio(true);
                    this.muted = false;
                }
                else {
                    this.publisher.publishAudio(false);
                    this.muted = true;
                }
            };
            EmployeeInterviewController.prototype.turnOffVideo = function () {
                if (this.videoOn) {
                    this.videoOn = false;
                    this.publisher.publishVideo(false);
                }
                else {
                    this.videoOn = true;
                    this.publisher.publishVideo(true);
                }
            };
            EmployeeInterviewController.prototype.showRatingsDialog = function () {
                if (this.hasDimensionsSet) {
                    this.ratingsDialog = this.$mdDialog.show({
                        controller: EmployeeInterviewController,
                        controllerAs: "employeeinterview",
                        bindToController: true,
                        templateUrl: 'views/company/dialogs/multiparty-interview-rating.html',
                        parent: angular.element(document.body),
                        locals: { rating: this.rating },
                        clickOutsideToClose: true,
                        escapeToClose: true,
                        // Only for -xs, -sm breakpoints.
                    }).then(function () {
                        console.debug("You clicked the button to close the bottom sheet");
                    })
                        .catch(function () {
                        console.debug("You clicked cancel button");
                    });
                }
                else {
                    this.$mdToast.showSimple('Please set the rating dimensions in the settings for this interview');
                }
            };
            EmployeeInterviewController.prototype.rated = function (rating, value) {
                rating.value = value;
            };
            EmployeeInterviewController.prototype.getIcon = function (rating, index) {
                if (angular.isUndefined(rating.value) || rating.value < index + 1) {
                    return "star_border";
                }
                else if (rating.value >= index + 1) {
                    return "star";
                }
            };
            EmployeeInterviewController.prototype.rate = function () {
                var _this = this;
                var comments;
                if (angular.isUndefined(this.comment)) {
                    comments = " ";
                }
                else {
                    comments = this.comment;
                }
                for (var _i = 0, _a = this.rating; _i < _a.length; _i++) {
                    var rating = _a[_i];
                    if (rating.value == null) {
                        rating.value = 0;
                    }
                }
                var userRating = { comment: comments, ratingDimensionDTOList: this.rating };
                this.$http
                    .post("/company/multiparty/rate/" + this.eventid, userRating)
                    .then(function () {
                    _this.hasGivenRating = true;
                    _this.$http.get("/company/multiparty/get-rating-by-user/" + _this.eventid).then(function (result) {
                        _this.userRatings = result.data;
                    });
                    _this.$mdDialog.hide();
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            EmployeeInterviewController.prototype.cancel = function () {
                this.$mdDialog.hide();
            };
            EmployeeInterviewController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "SessionService",
                "$mdDialog",
                "$scope",
                "$state"
            ];
            return EmployeeInterviewController;
        }());
        app.controller("company.EmployeeInterviewController", EmployeeInterviewController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var EmployeesController = /** @class */ (function () {
            function EmployeesController($http, $mdToast, $stateParams, SessionService, $mdDialog, CompanyEmployeesService, CompanyGroupsService, roleConstants) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.CompanyEmployeesService = CompanyEmployeesService;
                this.CompanyGroupsService = CompanyGroupsService;
                this.roleConstants = roleConstants;
                this.search = "";
                this.roles = [
                    {
                        label: this.roleConstants.names.SUPER_ADMIN,
                        value: this.roleConstants.identifiers.SUPER_ADMIN,
                        userCanInvite: this.SessionService.isRoleSuperAdmin()
                    },
                    {
                        label: this.roleConstants.names.ADMIN,
                        value: this.roleConstants.identifiers.ADMIN,
                        userCanInvite: this.SessionService.hasAdminPermissions()
                    },
                    {
                        label: this.roleConstants.names.REVIEWER,
                        value: this.roleConstants.identifiers.REVIEWER,
                        userCanInvite: this.SessionService.hasAdminPermissions()
                    }
                ];
                this.sortableFields = [
                    {
                        label: 'Role',
                        directions: [
                            { label: 'All', value: '' },
                            { label: this.roleConstants.names.SUPER_ADMIN, value: '-superAdmin' },
                            { label: this.roleConstants.names.ADMIN, value: '-admin' },
                            { label: this.roleConstants.names.REVIEWER, value: '-reviewer' }
                        ]
                    }
                ];
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position('top left')
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.resetInviteUserData = function () {
                    _this.name = null;
                    _this.email = null;
                    _this.role = null;
                };
                this.toggleManage = function (employee) {
                    employee.isEdit = !employee.isEdit;
                };
                this.filter = function (employee) { return _this.search == '' ? true : employee.name.toLowerCase().includes(_this.search.toLowerCase()); };
                this.filterGroups = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (!(this.groupSearch != null)) return [3 /*break*/, 2];
                                return [4 /*yield*/, this.CompanyGroupsService.searchGroups(this.groupSearch)];
                            case 1:
                                _a = _b.sent();
                                return [3 /*break*/, 4];
                            case 2: return [4 /*yield*/, this.CompanyGroupsService.getGroups()];
                            case 3:
                                _a = _b.sent();
                                _b.label = 4;
                            case 4: return [2 /*return*/, _a];
                        }
                    });
                }); };
                this.canCreateUser = function (createForm) { return createForm.$valid && _this.role != null; };
                this.getAvailableRoles = function () { return _this.roles.filter(function (role) { return role.userCanInvite; }); };
                //Return List with Comma 
                //getRole = employee => employee.superAdmin ? 'SuperAdmin' : employee.admin ? 'Admin' : 'Reviewer';
                this.getRole = function (employee) {
                    var roleStr = "";
                    if (employee.superAdmin) {
                        roleStr == "" ? roleStr = 'SuperAdmin' : roleStr = roleStr + ', SuperAdmin';
                    }
                    if (employee.admin) {
                        roleStr == "" ? roleStr = 'Admin' : roleStr = roleStr + ', Admin';
                    }
                    if (employee.reviewer) {
                        roleStr == "" ? roleStr = 'Reviewer' : roleStr = roleStr + ', Reviewer';
                    }
                    return roleStr;
                };
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _a = this;
                                return [4 /*yield*/, this.CompanyGroupsService.getGroups()];
                            case 1:
                                _a.groups = _b.sent();
                                this.showInviteTeamMember = false;
                                this.list();
                                return [2 /*return*/];
                        }
                    });
                }); };
            }
            EmployeesController.prototype.toggleInvite = function () {
                this.showInviteTeamMember = !this.showInviteTeamMember;
            };
            EmployeesController.prototype.list = function () {
                var _this = this;
                this.$http.get("/company/employees/company/")
                    .then(function (result) {
                    _this.roleCompany = result.data;
                });
                this.$http.get("/company/employees/")
                    .then(function (result) {
                    _this.allEmployees = result.data;
                    _this.employeeList = _this.allEmployees;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            EmployeesController.prototype.reinvite = function (employeeid) {
                var _this = this;
                this.$http.get("/company/employees/reinvite/" + employeeid)
                    .then(function (result) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Invitation Sent Again to the Registered email id")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            EmployeesController.prototype.uninvite = function (employee) {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure?")
                    .textContent("The team member will be removed and won't be able to login.This is an irreversible action")
                    .ok("REMOVE")
                    .cancel("CANCEL")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.delete("/company/employees/delete/" + employee.employeeid, {})
                        .then(function (result) {
                        var i = _this.employeeList.indexOf(employee);
                        _this.employeeList.splice(i, 1);
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Team Member Removed")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    }, function (error) {
                        _this.$mdToast.showSimple("Some error has happened. See console for details");
                        Rollbar.error(error);
                    });
                }, function () { });
            };
            EmployeesController.prototype.create = function () {
                var _this = this;
                var employeeData = { name: this.name, email: this.email, role: this.role };
                this.CompanyEmployeesService.inviteEmployee(employeeData)
                    .then(function (result) { return __awaiter(_this, void 0, void 0, function () {
                    var error_36;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (this.employeeList) {
                                    this.allEmployees = __spreadArray(__spreadArray([], this.allEmployees), [result.data]);
                                    this.employeeList = this.allEmployees;
                                    this.resetInviteUserData();
                                }
                                if (!this.selectedGroup) return [3 /*break*/, 4];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.CompanyGroupsService.addUsersToGroup(this.selectedGroup.id, [result.data.employeeid])];
                            case 2:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 3:
                                error_36 = _a.sent();
                                this.showToastMessage('There was an issue adding the user to the group');
                                Rollbar.error(error_36);
                                return [3 /*break*/, 4];
                            case 4:
                                this.showToastMessage("Invitation Sent");
                                this.showInviteTeamMember = false;
                                return [2 /*return*/];
                        }
                    });
                }); }, function (error) {
                    _this.showInviteTeamMember = false;
                    _this.resetInviteUserData();
                    _this.showToastMessage(error.data.message);
                    Rollbar.error(error);
                });
            };
            EmployeesController.prototype.update = function (employee) {
                var _this = this;
                this.CompanyEmployeesService.updateEmployee(employee)
                    .then(function (result) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        /*if (this.selectedGroup) {
                            try {
                                await this.CompanyGroupsService.addUsersToGroup(this.selectedGroup.id, [result.data.employeeid])
                            } catch (error) {
                                this.showToastMessage('There was an issue adding the user to the group');
                                Rollbar.error(error);
                            }
                        }*/
                        this.showToastMessage("Invitation Sent");
                        employee.isEdit = false;
                        return [2 /*return*/];
                    });
                }); }, function (error) {
                    employee.isEdit = false;
                    _this.showToastMessage(error.data.message);
                    Rollbar.error(error);
                });
            };
            EmployeesController.$inject = ["$http", "$mdToast", "$stateParams", "SessionService", "$mdDialog", "company.employeesService", "company.groupsService", "roleConstants"];
            return EmployeesController;
        }());
        app.controller("company.EmployeesController", EmployeesController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var EssayAnswersController = /** @class */ (function () {
            function EssayAnswersController($http, $mdToast, $mdDialog, $scope, $rootScope, $stateParams, $state, SessionService, $timeout, interviewsService, ratingsService, recordingsService, Session) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$mdDialog = $mdDialog;
                this.$scope = $scope;
                this.$rootScope = $rootScope;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$timeout = $timeout;
                this.interviewsService = interviewsService;
                this.ratingsService = ratingsService;
                this.recordingsService = recordingsService;
                this.Session = Session;
                this.SCORES = [
                    { label: '1 - Very Poor', field: 'oneStarDefinition', value: 1 },
                    { label: '2 - Poor', field: 'twoStarDefinition', value: 2 },
                    { label: '3 - Fair', field: 'threeStarDefinition', value: 3 },
                    { label: '4 - Good', field: 'fourStarDefinition', value: 4 },
                    { label: '5 - Excellent', field: 'fiveStarDefinition', value: 5 }
                ];
                this.shortAnswer = '';
                this.alreadyRated = false;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b, recordings, _c, error_37;
                    var _this = this;
                    return __generator(this, function (_d) {
                        switch (_d.label) {
                            case 0:
                                _a = this;
                                return [4 /*yield*/, this.interviewsService.getInterviews()];
                            case 1:
                                _a.interview = (_d.sent()).find(function (i) { return i.guid === _this.interviewId; });
                                _b = this;
                                return [4 /*yield*/, this.ratingsService.getRatingDimensions(this.invitationid)];
                            case 2:
                                _b.ratingDimensions = (_d.sent());
                                return [4 /*yield*/, this.$http.get("/company/recordings/?interviewid=" + this.interviewId)];
                            case 3:
                                recordings = (_d.sent()).data;
                                this.recording = recordings.find(function (r) { return r.invitationId === _this.invitationid; });
                                this.answers = this.recording.textResponses;
                                this.currentAnswer = this.answers[0];
                                this.processChoices();
                                _d.label = 4;
                            case 4:
                                _d.trys.push([4, 6, , 7]);
                                _c = this;
                                return [4 /*yield*/, this.ratingsService.getUserAverageRating(this.invitationid)];
                            case 5:
                                _c.ratings = _d.sent();
                                return [3 /*break*/, 7];
                            case 6:
                                error_37 = _d.sent();
                                Rollbar.log("Not rated yet");
                                this.ratings = [];
                                return [3 /*break*/, 7];
                            case 7:
                                this.rating = this.getCurrentRatingScore(this.currentAnswer);
                                if (this.rating > 0)
                                    this.alreadyRated = true;
                                this.currentCompetency = this.ratingDimensions.find(function (r) { return r.competencyName === _this.currentAnswer.competencyName; });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.processChoices = function () {
                    if (_this.currentAnswer.canChooseMultiple) {
                        var answers = _this.currentAnswer.answerText.split('|');
                        for (var _i = 0, answers_1 = answers; _i < answers_1.length; _i++) {
                            var answer = answers_1[_i];
                            for (var _a = 0, _b = _this.currentAnswer.choices; _a < _b.length; _a++) {
                                var choice = _b[_a];
                                if (answer === choice.choiceLabel) {
                                    choice.selected = true;
                                }
                            }
                        }
                    }
                    if (_this.currentAnswer.questionType === 'MCQS' && _this.currentAnswer.answerText === '-1') {
                        _this.currentAnswer.noAnswer = true;
                    }
                    else {
                        _this.currentAnswer.noAnswer = false;
                    }
                };
                this.watchInterview = function (recording) { return _this.$state.go('root.company.player', {
                    interviewId: _this.interviewId, invitationid: recording.invitationId
                }); };
                this.getCurrentRatingScore = function (response) {
                    if (_this.ratings.length > 0) {
                        var currentRating = _this.ratings.find(function (rating) { return rating.answerId === response.answerId; });
                        return currentRating ? currentRating.yourScore : 0;
                    }
                    return 0;
                };
                this.getRatingDescription = function (score) {
                    if (!_this.currentCompetency)
                        return '';
                    return _this.currentCompetency[score.field];
                };
                this.showFlagDialog = function (recording, event) {
                    _this.flagDialog = _this.$mdDialog
                        .show({
                        controller: EssayAnswersController,
                        controllerAs: "player",
                        bindToController: true,
                        templateUrl: "views/company/dialogs/flag-interview.html",
                        parent: angular.element(document.body),
                        locals: {
                            flagReason: _this.flagReason,
                            recording: recording
                        },
                        clickOutsideToClose: true,
                        escapeToClose: true
                    });
                };
                this.flagRecording = function () { return __awaiter(_this, void 0, void 0, function () {
                    var error_38;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.recordingsService.flagRecording(this.invitationid, this.flagReason)];
                            case 1:
                                _a.sent();
                                this.$mdDialog.cancel(this.flagDialog);
                                this.showToastMessage('Record successfully flagged');
                                this.$state.reload();
                                return [3 /*break*/, 3];
                            case 2:
                                error_38 = _a.sent();
                                this.showToastMessage('There was an issue while flagging this recording');
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.showToastMessage = function (message) { return _this.$mdToast.show(_this.$mdToast.simple()
                    .textContent(message)
                    .hideDelay(10000)
                    .theme("toasttheme")); };
                this.interviewId = $stateParams.interviewId;
                this.invitationid = $stateParams.invitationid;
            }
            EssayAnswersController.prototype.rated = function (rating, value) {
                rating.value = value;
            };
            EssayAnswersController.prototype.jumpToAnswer = function (answer) {
                var _this = this;
                this.currentAnswer = answer;
                this.rating = this.getCurrentRatingScore(this.currentAnswer);
                this.alreadyRated = this.rating > 0;
                this.currentCompetency = this.ratingDimensions.find(function (r) { return r.competencyName === _this.currentAnswer.competencyName; });
                this.processChoices();
                this.updateDom();
            };
            EssayAnswersController.prototype.saveRating = function (recording) {
                return __awaiter(this, void 0, void 0, function () {
                    var userRating, _a, next;
                    var _this = this;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                userRating = {
                                    competencyDimensionId: this.currentCompetency.competencyDimensionId,
                                    comment: '',
                                    rating: this.rating
                                };
                                return [4 /*yield*/, this.ratingsService.postRating(this.currentAnswer.answerId, userRating)];
                            case 1:
                                _b.sent();
                                _a = this;
                                return [4 /*yield*/, this.ratingsService.getUserAverageRating(this.invitationid)];
                            case 2:
                                _a.ratings = _b.sent();
                                this.alreadyRated = this.rating > 0;
                                if (this.answers.indexOf(this.currentAnswer) < this.answers.length - 1) {
                                    next = this.answers.indexOf(this.currentAnswer) + 1;
                                    if (next) {
                                        this.jumpToAnswer(this.answers[next]);
                                    }
                                }
                                this.$http.get("/company/recordings/paged/", { params: { interviewid: this.interviewId, search: 'uuid', searchtext: this.invitationid } }).then(function (result) {
                                    if (result.data && result.data.recordingDTOS && result.data.recordingDTOS[0].reviewedByYou) {
                                        result.data.recordingDTOS[0].tempCount = 0;
                                        _this.$rootScope.$emit("OpenRating", result.data.recordingDTOS[0]);
                                    }
                                });
                                this.updateDom();
                                return [2 /*return*/];
                        }
                    });
                });
            };
            EssayAnswersController.prototype.getIcon = function (rating, index) {
                if (angular.isUndefined(rating.value) || rating.value < index + 1) {
                    return "star_border";
                }
                else if (rating.value >= index + 1) {
                    return "star";
                }
            };
            EssayAnswersController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            EssayAnswersController.prototype.goBack = function () {
                window.history.back();
            };
            EssayAnswersController.$inject = [
                "$http",
                "$mdToast",
                "$mdDialog",
                "$scope",
                "$rootScope",
                "$stateParams",
                "$state",
                "SessionService",
                "$timeout",
                "company.interviewsService",
                "company.ratingsService",
                "company.recordingsService",
                "SessionService"
            ];
            return EssayAnswersController;
        }());
        app.controller("company.EssayAnswersController", EssayAnswersController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var EssayQuestionsController = /** @class */ (function () {
            function EssayQuestionsController($http, $mdToast, $stateParams, $state, SessionService, $timeout) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$timeout = $timeout;
                this.$onInit = function () { };
                this.interviewId = $stateParams.interviewId;
                this.plan = SessionService.getPlan();
                this.$http
                    .get("/company/questions/essay/" + this.interviewId)
                    .then(function (result) {
                    if (result.data.length > 0) {
                        _this.questions = result.data;
                        _this.originalNumberOfQuestions = _this.questions.length;
                        angular.forEach(_this.questions, function (q, i) {
                            q.timeallowedinmins = q.timeallowed / 60;
                        });
                    }
                    else {
                        for (var i = 1; i <= 1; i++) {
                            if (!_this.questions) {
                                _this.questions = [];
                            }
                            _this.questions.push({
                                order: i,
                                questionvalue: "",
                                timeallowed: 1
                            });
                        }
                    }
                    _this.updateTotal();
                    $("md-content").css("overflow", "visible");
                });
                this.$http
                    .get("/company/details-by-interview/" + this.interviewId)
                    .then(function (result) {
                    _this.roleCompany = result.data;
                });
            }
            EssayQuestionsController.prototype.loadIndustries = function () {
                var _this = this;
                this.$http.get("/candidate/video-cv/get-industries").then(function (result) {
                    _this.industries = result.data;
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            EssayQuestionsController.prototype.addQuestion = function (index) {
                var question = this.industryQuestions.questions[index];
                for (var i = 0; i < this.questions.length; i++) {
                    var value = this.questions[i];
                    if (!value || !value.questionvalue || !value.questionvalue.trim()) {
                        value.questionvalue = question;
                        this.industryQuestions.questions.splice(index, 1);
                        break;
                    }
                }
            };
            EssayQuestionsController.prototype.loadQuestions = function (industryId) {
                var _this = this;
                this.$http.get("/candidate/video-cv/get-question/" + industryId).then(function (result) {
                    _this.industryQuestions = result.data;
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            EssayQuestionsController.prototype.industryChanged = function () {
                var guid = this.chosenIndustry.guid;
                this.loadQuestions(guid);
            };
            EssayQuestionsController.prototype.addAdditionalQuestion = function () {
                if (this.questions[0].frozen) {
                    this.$mdToast.showSimple("Questions are frozen");
                }
                else {
                    if (this.questions.length < 10) {
                        this.questions.push({
                            order: this.questions.length + 1,
                            questionvalue: "",
                            timeallowed: 1,
                            newQuestion: true
                        });
                    }
                    else {
                        this.$mdToast.showSimple("Maximum questions limit reached");
                    }
                }
            };
            EssayQuestionsController.prototype.submitQuestions = function () {
                var _this = this;
                angular.forEach(this.questions, function (q, i) {
                    q.timeallowed = q.timeallowedinmins * 60;
                    q.timeallowedinmins = undefined;
                });
                this.$http
                    .post("/company/questions/essay/" + this.interviewId, this.questions)
                    .then(function (value) {
                    _this.$state.go("root.company.dashboard");
                }, function (error) {
                    _this.$mdToast.showSimple(error.name + " " + error.message);
                });
            };
            EssayQuestionsController.prototype.updateTotal = function () {
                var sum = 0;
                angular.forEach(this.questions, function (q, i) {
                    sum += q.timeallowedinmins || 0;
                });
                this.total = sum;
            };
            EssayQuestionsController.prototype.deleteQuestion = function (index) {
                this.questions.splice(index, 1);
                angular.forEach(this.questions, function (q, i) {
                    q.order = i + 1;
                });
            };
            EssayQuestionsController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "$state",
                "SessionService",
                "$timeout"
            ];
            return EssayQuestionsController;
        }());
        app.controller("company.EssayQuestionsController", EssayQuestionsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var FeedbackReportsController = /** @class */ (function () {
            function FeedbackReportsController($http, $mdToast, session, CSVDownloadService, $state, $mdDialog, $stateParams) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.CSVDownloadService = CSVDownloadService;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$stateParams = $stateParams;
                this.SURVEY_QUESTIONS = Qna.SURVEY_QUESTIONS;
                this.questionRatings = [];
                this.showReportCrumbs = false;
                this.showList = false;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var questionTotalArray, questionAverageArray, stars, createdData, myChart2, myChart3, colors, QuestionRatingsData, myBarChart;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.$http.get("/company/dashboard/overview/user_feedback").then(function (result) {
                                    _this.report = result.data;
                                }, function (error) {
                                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                                    Rollbar.error(error);
                                })];
                            case 1:
                                _a.sent();
                                questionTotalArray = [this.report.totalQ1Stars, this.report.totalQ2Stars, this.report.totalQ3Stars];
                                questionAverageArray = [this.report.averageQ1Stars, this.report.averageQ2Stars, this.report.averageQ3Stars];
                                questionTotalArray.forEach(function (element, index) {
                                    _this.questionRatings.push({ "question": _this.SURVEY_QUESTIONS[index].text, "totalStars": element, "averageStars": questionAverageArray[index] });
                                });
                                stars = [this.report.total1Star, this.report.total2Star, this.report.total3Star, this.report.total4Star, this.report.total5Star];
                                createdData = [this.report.totalQ1Stars, this.report.totalQ2Stars, this.report.totalQ3Stars];
                                myChart2 = new Chart("myChart2", {
                                    type: 'bar',
                                    data: {
                                        labels: ['1 Star', '2 Star', '3 Star', '4 Star', '5 Star'],
                                        datasets: [{
                                                label: 'Number of Star Ratings',
                                                data: stars,
                                                backgroundColor: [
                                                    '#4fa953',
                                                    '#09b2c7',
                                                    '#fd9811',
                                                    '#e73e3b',
                                                    '#09b2d9'
                                                ],
                                                borderColor: [
                                                    'rgba(255,99,132,1)',
                                                    'rgba(54, 162, 235, 1)',
                                                    'rgba(255, 206, 86, 1)',
                                                    'rgba(75, 192, 192, 1)',
                                                    'rgba(75, 192, 192, 1)'
                                                ],
                                                borderWidth: 1
                                            }]
                                    },
                                    options: {
                                        scales: {
                                            yAxes: [{
                                                    ticks: {
                                                        min: 0,
                                                        beginAtZero: true
                                                    }
                                                }]
                                        },
                                        //cutoutPercentage: 40,
                                        responsive: true,
                                    }
                                });
                                myChart3 = new Chart("myChart3", {
                                    type: 'bar',
                                    data: {
                                        labels: [this.SURVEY_QUESTIONS[0].text, this.SURVEY_QUESTIONS[1].text, this.SURVEY_QUESTIONS[2].text],
                                        datasets: [{
                                                label: 'Average Ratings Per Question',
                                                data: questionAverageArray,
                                                backgroundColor: [
                                                    '#4fa953',
                                                    '#09b2c7',
                                                    '#fd9811'
                                                ],
                                                borderColor: [
                                                    'rgba(255,99,132,1)',
                                                    'rgba(54, 162, 235, 1)',
                                                    'rgba(255, 206, 86, 1)'
                                                ],
                                                borderWidth: 1
                                            }]
                                    },
                                    options: {
                                        scales: {
                                            yAxes: [{
                                                    ticks: {
                                                        min: 0,
                                                        beginAtZero: true
                                                    }
                                                }]
                                        },
                                        cutoutPercentage: 40,
                                        responsive: false,
                                        animation: {
                                            animateRotate: true
                                        },
                                    }
                                });
                                colors = ['#4fa953', '#09b2c7', '#fd9811'];
                                QuestionRatingsData = {
                                    labels: ["1Star", "2Star", "3Star", "4Star", "5Star"],
                                    datasets: []
                                };
                                this.report.questionRatingList.forEach(function (element, index) {
                                    var dataObject = {
                                        label: element.question + ": " + _this.SURVEY_QUESTIONS[index].text,
                                        backgroundColor: colors[index],
                                        data: element.questionRating
                                    };
                                    QuestionRatingsData.datasets.push(dataObject);
                                });
                                myBarChart = new Chart("myChart4", {
                                    type: 'bar',
                                    data: QuestionRatingsData,
                                    options: {
                                        scales: {
                                            yAxes: [{
                                                    ticks: {
                                                        min: 0,
                                                    }
                                                }]
                                        }
                                    }
                                });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.toggleListMode = function () { return _this.showList = !_this.showList; };
                if (this.$stateParams.reportOrigin != null || angular.isDefined(this.$stateParams.reportOrigin)) {
                    this.showReportCrumbs = true;
                }
            }
            FeedbackReportsController.prototype.downloadSummary = function () {
                var data = [this.report];
                var headersArrayList = ['totalQ1Stars', 'averageQ1Stars', 'totalQ2Stars', 'averageQ2Stars', 'totalQ3Stars', 'averageQ3Stars', 'totalStars', 'averageStars', 'totalCount', 'total1Star', 'total2Star', 'total3Star', 'total4Star', 'total5Star'];
                if (this.report) {
                    this.CSVDownloadService.downloadFile(data, 'Feedback Summary Report', headersArrayList);
                }
            };
            FeedbackReportsController.prototype.downloadList = function () {
                var data = this.report.feedbackList;
                var headersArrayList = ['interviewName', 'applicantId', 'applicantName', 'applicantEmail', 'invitationCode', 'feedbackQ1', 'feedbackQ2', 'feedbackQ3', 'feedbackComment'];
                if (this.report.feedbackList) {
                    this.CSVDownloadService.downloadFile(data, 'Feedback List Report', headersArrayList);
                }
            };
            FeedbackReportsController.prototype.downloadQuestionRatings = function () {
                var data = this.questionRatings;
                var headersArrayList = ['question', 'totalStars', 'averageStars'];
                if (this.questionRatings) {
                    this.CSVDownloadService.downloadFile(data, 'Question Ratings Report', headersArrayList);
                }
            };
            FeedbackReportsController.$inject = [
                "$http", "$mdToast", "SessionService", "company.CSVService", "$state", "$mdDialog", "$stateParams"
            ];
            return FeedbackReportsController;
        }());
        app.controller("company.FeedbackReportsController", FeedbackReportsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var FlagReviewController = /** @class */ (function () {
            function FlagReviewController($http, $mdToast, $window, $scope, $state, $stateParams, $location, $anchorScroll, $mdDialog, interviewsService, CompanyInvitationsService, recordingsService, SessionService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$window = $window;
                this.$scope = $scope;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$location = $location;
                this.$anchorScroll = $anchorScroll;
                this.$mdDialog = $mdDialog;
                this.interviewsService = interviewsService;
                this.CompanyInvitationsService = CompanyInvitationsService;
                this.recordingsService = recordingsService;
                this.SessionService = SessionService;
                this.SCORES = [
                    { label: '1 - Very Poor', field: 'oneStarDefinition', value: 1 },
                    { label: '2 - Poor', field: 'twoStarDefinition', value: 2 },
                    { label: '3 - Fair', field: 'threeStarDefinition', value: 3 },
                    { label: '4 - Good', field: 'fourStarDefinition', value: 4 },
                    { label: '5 - Excellent', field: 'fiveStarDefinition', value: 5 }
                ];
                this.duration = 0;
                this.currentTime = 0;
                this.currentRecordingIndex = 0;
                this.alreadyRated = false;
                this.playbackSpeed = 1;
                this.selectedQuestions = [];
                this.allQuestionsSelected = false;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b, i;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _a = this;
                                return [4 /*yield*/, this.interviewsService.getInterview(this.interviewId)];
                            case 1:
                                _a.interview = (_c.sent());
                                _b = this;
                                return [4 /*yield*/, this.$http.get("/company/recordings/single/" + this.interviewId + "/" + this.invitationid)];
                            case 2:
                                _b.recording = (_c.sent()).data;
                                console.log("Recording: ", this.recording);
                                this.answers = __spreadArray(__spreadArray([], this.recording.videoResponses), this.recording.textResponses);
                                console.log("Answers: ", this.answers);
                                for (i = 0; i < this.answers.length; i++) {
                                    this.answers[i].indexNumber = i;
                                    if (this.answers[i].mp4URL || this.answers[i].webmURL) {
                                        this.answers[i].questionType = "video";
                                    }
                                    else {
                                        this.answers[i].questionType = "essay";
                                    }
                                }
                                this.currentRecordingIndex = 0;
                                this.currentAnswer = this.answers[0];
                                this.currentAnswer.videoURL = this.getVideoURL();
                                this.currentAnswer.videoType = this.getVideoType();
                                this.duration = 0;
                                this.videoElement = document.getElementById("player");
                                if (is.ios() && is.safari()) {
                                    this.updateDom();
                                }
                                this.videoElement.addEventListener("loadeddata", this.handleLoadedData, true);
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.watchWrittenAnswers = function (recording) { return _this.$state.go('root.company.essayanswerrs', {
                    interviewId: _this.interviewId, invitationid: recording.invitationId
                }); };
                this.getVideoURL = function () { return _this.currentAnswer.mp4URL || _this.currentAnswer.webmURL || ""; };
                this.getVideoType = function () { return _this.getVideoURL().search(".*webm$") === -1 ? 'video/mp4' : 'video/webm'; };
                this.acceptFlag = function (interview) { return __awaiter(_this, void 0, void 0, function () {
                    var error_39;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 5, , 6]);
                                if (!this.allQuestionsSelected) return [3 /*break*/, 2];
                                return [4 /*yield*/, this.CompanyInvitationsService.changeFlagStatus(this.invitationid, true)];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 2: return [4 /*yield*/, this.CompanyInvitationsService.acceptSelectedQuestionsFlag(this.invitationid, this.selectedQuestions)];
                            case 3:
                                _a.sent();
                                _a.label = 4;
                            case 4:
                                this.showToastMessage('Successfully accepted flag reason');
                                this.$state.go('root.company.flagged-interviews', {});
                                return [3 /*break*/, 6];
                            case 5:
                                error_39 = _a.sent();
                                console.log(error_39);
                                this.showToastMessage('There was an issue allowing the flag reason');
                                return [3 /*break*/, 6];
                            case 6: return [2 /*return*/];
                        }
                    });
                }); };
                this.rejectFlag = function (interview) { return __awaiter(_this, void 0, void 0, function () {
                    var error_40;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.CompanyInvitationsService.changeFlagStatus(interview.invitationId, false)];
                            case 1:
                                _a.sent();
                                this.showToastMessage('Successfully rejected flag reason');
                                this.$state.reload();
                                return [3 /*break*/, 3];
                            case 2:
                                error_40 = _a.sent();
                                this.showToastMessage('There was an issue rejecting the flag reason');
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.handleLoadedData = function (event) {
                    _this.updateDom();
                };
                this.handleSeekingEvent = function (event) {
                    _this.updateDom();
                };
                this.handleMetaData = function (event) {
                    _this.duration = event.target.duration;
                };
                this.handleTimeUpdateEvent = function (event) {
                    _this.currentVideoPercentage =
                        100.0 * event.target.currentTime / _this.duration;
                    _this.currentTime = event.target.currentTime;
                    _this.updateDom();
                    if (angular.isDefined(_this.currentAnswer) && angular.isDefined(_this.currentAnswer.endtime)) {
                        if (_this.currentTime >= _this.currentAnswer.endtime) {
                            _this.currentAnswer = _this.answers[_this.currentAnswer.indexNumber + 1];
                            _this.updateDom();
                        }
                    }
                };
                this.handleSeekEvent = function (event) {
                    _this.updateDom();
                    _this.currentVideoPercentage =
                        100.0 * _this.videoElement.currentTime / _this.duration;
                    _this.currentTime = _this.videoElement.currentTime;
                    for (var i = 0; i < _this.answers.length; i++) {
                        if (_this.currentTime >= _this.answers[i].starttime && _this.currentTime < _this.answers[i].endtime) {
                            _this.currentAnswer = _this.answers[i];
                        }
                    }
                };
                this.getRatingDescription = function (score) {
                    if (!_this.currentCompetency)
                        return '';
                    return _this.currentCompetency[score.field];
                };
                this.showFlagDialog = function (recording, event) {
                    _this.flagDialog = _this.$mdDialog
                        .show({
                        controller: FlagReviewController,
                        controllerAs: "player",
                        bindToController: true,
                        templateUrl: "views/company/dialogs/flag-interview.html",
                        parent: angular.element(document.body),
                        locals: {
                            flagReason: _this.flagReason,
                            recording: recording
                        },
                        clickOutsideToClose: true,
                        escapeToClose: true
                    });
                };
                this.flagRecording = function () { return __awaiter(_this, void 0, void 0, function () {
                    var error_41;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.recordingsService.flagRecording(this.invitationid, this.flagReason)];
                            case 1:
                                _a.sent();
                                this.$mdDialog.cancel(this.flagDialog);
                                this.showToastMessage('Record successfully flagged');
                                this.$state.reload();
                                return [3 /*break*/, 3];
                            case 2:
                                error_41 = _a.sent();
                                this.showToastMessage('There was an issue while flagging this recording');
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.showToastMessage = function (message) { return _this.$mdToast.show(_this.$mdToast.simple()
                    .textContent(message)
                    .hideDelay(10000)
                    .theme("toasttheme")); };
                var query = Modernizr.mq('(max-width: 600px)');
                if (query) {
                    this.$location.hash("player-next-button");
                    this.$anchorScroll();
                }
                else {
                    $("#player-view").height($window.innerHeight - 96);
                    $window.addEventListener("resize", function () {
                        $("#player-view").height($window.innerHeight - 96);
                    });
                }
                this.interviewId = $stateParams.interviewId;
                this.invitationid = $stateParams.invitationId;
            }
            ;
            FlagReviewController.prototype.changePlaybackSpeed = function (speed) {
                if (speed >= 0.5 && speed <= 5) {
                    var player = document.getElementById("player");
                    player.playbackRate = speed;
                    player.play();
                    this.playbackSpeed = speed;
                }
            };
            FlagReviewController.prototype.jumpToAnswer = function (answer) {
                this.currentAnswer = answer;
                this.currentAnswer.videoURL = this.getVideoURL();
                this.currentAnswer.videoType = this.getVideoType();
                this.alreadyRated = this.rating > 0;
                this.updateDom();
            };
            FlagReviewController.prototype.toggleSelect = function (answer) {
                if (answer.isChecked) {
                    this.selectedQuestions.push(answer.answerId);
                }
                else {
                    var index = this.selectedQuestions.indexOf(answer.answerId);
                    this.selectedQuestions.splice(index, 1);
                    this.allQuestionsSelected = false;
                }
            };
            FlagReviewController.prototype.toggleSelectAll = function () {
                var _this = this;
                this.answers.forEach(function (answer) {
                    answer.isChecked = !answer.isChecked;
                    _this.toggleSelect(answer);
                });
            };
            FlagReviewController.prototype.cancel = function () {
                this.$mdDialog.hide();
            };
            FlagReviewController.prototype.seek = function () {
                var newTime = Math.floor(this.currentVideoPercentage * this.duration / 100);
                if (!isNaN(newTime)) {
                    this.videoElement.currentTime = newTime || 0;
                }
            };
            FlagReviewController.prototype.play = function () {
                if (this.videoElement.paused) {
                    this.videoElement.play();
                    this.videoElement.addEventListener("timeupdate", this.handleTimeUpdateEvent, true);
                    this.videoElement.addEventListener("loadedmetadata", this.handleMetaData, true);
                    this.videoElement.addEventListener("seeking", this.handleSeekingEvent, true);
                    this.videoElement.addEventListener("seeked", this.handleSeekEvent, true);
                }
                else {
                    this.videoElement.pause();
                }
            };
            FlagReviewController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            FlagReviewController.prototype.mute = function () {
                if (this.videoElement.muted) {
                    this.videoElement.muted = false;
                }
                else {
                    this.videoElement.muted = true;
                }
            };
            FlagReviewController.prototype.secondsToMMSS = function (t) {
                if (isNaN(t)) {
                    return "00:00";
                }
                var minutes = Math.floor(t / 60.0);
                var seconds = Math.floor(t % 60);
                return ((minutes < 10 ? "0" : "") +
                    minutes +
                    ":" +
                    (seconds < 10 ? "0" : "") +
                    seconds);
            };
            FlagReviewController.prototype.goBack = function () {
                window.history.back();
            };
            FlagReviewController.prototype.getNumber = function (num) {
                return new Array(num);
            };
            FlagReviewController.prototype.getIcon = function (rating, index) {
                if (angular.isUndefined(rating.value) || rating.value < index + 1) {
                    return "star_border";
                }
                else if (rating.value >= index + 1) {
                    return "star";
                }
            };
            FlagReviewController.prototype.rated = function (rating, value) {
                rating.value = value;
            };
            FlagReviewController.$inject = [
                "$http", "$mdToast", "$window", "$scope", "$state", "$stateParams", "$location", "$anchorScroll",
                "$mdDialog", "company.interviewsService", "company.invitationsService", "company.recordingsService",
                "SessionService"
            ];
            return FlagReviewController;
        }());
        app.controller("company.FlagReviewController", FlagReviewController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var FlaggedReportController = /** @class */ (function () {
            function FlaggedReportController($http, $mdToast, session, CSVDownloadService, $state, $mdDialog, $stateParams) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.CSVDownloadService = CSVDownloadService;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$stateParams = $stateParams;
                this.orderVariable = "-createdAt";
                this.selectedPageNumber = 1;
                this.pageOptions = [10, 20, 50, 100];
                this.selectedSearchCriteria = "ALL";
                this.searchText = "";
                this.disableSearch = false;
                this.totalResults = 0;
                this.startDateSelected = null;
                this.endDateSelected = null;
                this.maxDate = new Date();
                this.showReportCrumbs = false;
                this.getReadableDate = function (date) { return new Date(date).toLocaleDateString('en-GB', {
                    day: 'numeric', month: 'short', year: 'numeric'
                }).replace(/ /g, '-'); };
                this.$onInit = function () { };
                if (this.$stateParams.reportOrigin != null || angular.isDefined(this.$stateParams.reportOrigin)) {
                    this.showReportCrumbs = true;
                }
                this.currentPage = 0;
                this.pageSize = 10;
                this.list();
            }
            FlaggedReportController.prototype.fetchOverview = function () {
                this.$state.go("root.company.dynamic-report", {
                    startDate: this.formatDate(this.startDateSelected),
                    endDate: this.formatDate(this.endDateSelected),
                    reportType: 'Flagged Interviews'
                });
            };
            FlaggedReportController.prototype.formatDate = function (dateObj) {
                var dd = dateObj.getDate().toString();
                var mm = (dateObj.getMonth() + 1).toString();
                var yyyy = dateObj.getFullYear();
                if (Number(dd) < 10) {
                    dd = '0' + dd;
                }
                if (Number(mm) < 10) {
                    mm = '0' + mm;
                }
                return yyyy + '-' + mm + '-' + dd;
            };
            FlaggedReportController.prototype.list = function () {
                var _this = this;
                var params = { page: this.currentPage, pagesize: this.pageSize };
                this.$http.get("/company/recordings/flag-invitations/reports", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                    _this.lastCalledSearch = 'list';
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            FlaggedReportController.prototype.previousPage = function () {
                var _this = this;
                this.currentPage = this.currentPage - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/recordings/flag-invitations/reports", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            FlaggedReportController.prototype.nextPage = function () {
                var _this = this;
                this.currentPage = this.currentPage + 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/recordings/flag-invitations/reports", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            FlaggedReportController.prototype.reloadPage = function () {
                var _this = this;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/recordings/flag-invitations/reports", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            FlaggedReportController.prototype.getPagesArray = function (num) {
                var array = [];
                for (var i = 1; i <= num; i++) {
                    array.push(i);
                }
                return array;
            };
            FlaggedReportController.prototype.selectedPage = function () {
                var _this = this;
                this.currentPage = this.selectedPageNumber - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.selectedPageNumber - 1, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/recordings/flag-invitations/reports", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            FlaggedReportController.prototype.resultsPerPageChanged = function () {
                this.list();
            };
            FlaggedReportController.prototype.goHome = function () {
                this.$state.go("root.company.home");
            };
            FlaggedReportController.prototype.downloadResponse = function () {
                var headersArrayList = ['applicantId', 'applicantName', 'applicantEmail', 'interviewName', 'flaggedBy', 'status', 'date', 'decisionBy', 'decisionOn'];
                if (this.allReports) {
                    this.CSVDownloadService.downloadFile(this.allReports, 'FlaggedInterviewReport', headersArrayList);
                }
            };
            FlaggedReportController.$inject = ["$http", "$mdToast", "SessionService", "company.CSVService", "$state", "$mdDialog", "$stateParams"];
            return FlaggedReportController;
        }());
        app.controller("company.FlaggedReportController", FlaggedReportController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var FlowReportController = /** @class */ (function () {
            function FlowReportController($http, $mdToast, session, CSVDownloadService, $state, $mdDialog, $stateParams) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.CSVDownloadService = CSVDownloadService;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$stateParams = $stateParams;
                this.orderVariable = "-createdAt";
                this.selectedPageNumber = 1;
                this.pageOptions = [10, 20, 50, 100];
                this.selectedSearchCriteria = "ALL";
                this.searchText = "";
                this.disableSearch = false;
                this.totalResults = 0;
                this.showReportCrumbs = false;
                this.startDateSelected = null;
                this.endDateSelected = null;
                this.maxDate = new Date();
                this.getReadableDate = function (date) { return new Date(date).toLocaleDateString('en-GB', {
                    day: 'numeric', month: 'short', year: 'numeric'
                }).replace(/ /g, '-'); };
                this.$onInit = function () { };
                if (this.$stateParams.reportOrigin != null || angular.isDefined(this.$stateParams.reportOrigin)) {
                    this.showReportCrumbs = true;
                }
                this.currentPage = 0;
                this.pageSize = 10;
                this.list();
            }
            FlowReportController.prototype.fetchOverview = function () {
                this.$state.go("root.company.dynamic-report", {
                    startDate: this.formatDate(this.startDateSelected),
                    endDate: this.formatDate(this.endDateSelected),
                    reportType: 'Flowed Interviews'
                });
            };
            FlowReportController.prototype.formatDate = function (dateObj) {
                var dd = dateObj.getDate().toString();
                var mm = (dateObj.getMonth() + 1).toString();
                var yyyy = dateObj.getFullYear();
                if (Number(dd) < 10) {
                    dd = '0' + dd;
                }
                if (Number(mm) < 10) {
                    mm = '0' + mm;
                }
                return yyyy + '-' + mm + '-' + dd;
            };
            FlowReportController.prototype.list = function () {
                var _this = this;
                var params = { page: this.currentPage, pagesize: this.pageSize };
                this.$http.get("/company/interviews/copied/reports", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                    _this.lastCalledSearch = 'list';
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            FlowReportController.prototype.previousPage = function () {
                var _this = this;
                this.currentPage = this.currentPage - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/copied/reports", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            FlowReportController.prototype.nextPage = function () {
                var _this = this;
                this.currentPage = this.currentPage + 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/copied/reports", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            FlowReportController.prototype.reloadPage = function () {
                var _this = this;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/copied/reports", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            FlowReportController.prototype.getPagesArray = function (num) {
                var array = [];
                for (var i = 1; i <= num; i++) {
                    array.push(i);
                }
                return array;
            };
            FlowReportController.prototype.selectedPage = function () {
                var _this = this;
                this.currentPage = this.selectedPageNumber - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.selectedPageNumber - 1, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/copied/reports", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            FlowReportController.prototype.resultsPerPageChanged = function () {
                this.list();
            };
            FlowReportController.prototype.goHome = function () {
                this.$state.go("root.company.home");
            };
            FlowReportController.prototype.downloadResponse = function () {
                var headersArrayList = ['applicantId', 'applicantName', 'applicantEmail', 'fromInterviewName', 'toInterviewName', 'copiedBy', 'createdAt'];
                if (this.allReports) {
                    this.CSVDownloadService.downloadFile(this.allReports, 'FlowThroughReport', headersArrayList);
                }
            };
            FlowReportController.$inject = ["$http", "$mdToast", "SessionService", "company.CSVService", "$state", "$mdDialog", "$stateParams"];
            return FlowReportController;
        }());
        app.controller("company.FlowReportController", FlowReportController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var GeneralReportsController = /** @class */ (function () {
            function GeneralReportsController($http, $mdToast, session, $state, $window) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.$state = $state;
                this.$window = $window;
                this.yearOptions = [];
                this.showingYear = "ALL";
                this.$onInit = function () {
                    _this.yearOptions = _this.range(2019, new Date().getFullYear());
                };
                this.fetchOverview();
            }
            GeneralReportsController.prototype.fetchOverview = function () {
                var _this = this;
                this.$http.get("/company/dashboard/overview").then(function (result) {
                    _this.dashboardOverview = result.data;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                });
            };
            GeneralReportsController.prototype.range = function (start, end) {
                return __spreadArray(["ALL"], Array(end - start + 1).fill(0).map(function (_, idx) { return start + idx; }));
            };
            GeneralReportsController.prototype.goToYearlyReport = function () {
                if (this.showingYear == "ALL") {
                    //Do Nothing
                }
                else if (this.showingYear == "Date Range(Dynamic Report)") {
                    this.$state.go("root.company.dynamic-report");
                }
                else {
                    this.$state.go("root.company.yearly-reports", { year: this.showingYear });
                }
            };
            GeneralReportsController.$inject = ["$http", "$mdToast", "SessionService", "$state", "$window"];
            return GeneralReportsController;
        }());
        app.controller("company.GeneralReportsController", GeneralReportsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var IndustryExpertsLibraryController = /** @class */ (function () {
            function IndustryExpertsLibraryController($http, $mdToast, $state, $stateParams, SessionService, $mdDialog, $timeout, hopscotchService) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.search = '';
                this.orderVariable = '-recordingDate';
                this.vegetables = ['Recruitment', 'Banking', 'IT', 'Healthcare', 'Aviation', 'Marketing'];
                this.questions = ['Introduction', 'Present Day – Realisation and changes of your Career Goals', 'Hiring – Which qualities do you look for when you hire?', 'Industry Changes – What changes are happening in your industry?', 'Advice to Job Seekers – What advice would you share with job seekers?'];
                this.$onInit = function () { };
                this.videos = [{ name: "Andrew Britton", industry: "Recruitment", title: "Founder Raintree Partnership", question: "Introduction", duration: "03:00", linkedin: "https://www.linkedin.com/in/andrewbrittongradgreenhouse/" }];
                this.interviewId = $stateParams.interviewId;
                this.list();
            }
            IndustryExpertsLibraryController.prototype.filter = function () {
                var _this = this;
                if (this.search != '') {
                    this.recordingsList = _.filter(this.allRecordingsList, function (obj) {
                        return obj.candidateName.toLowerCase().indexOf(_this.search.toLowerCase()) !== -1;
                    });
                }
                else {
                    this.recordingsList = this.allRecordingsList;
                }
            };
            IndustryExpertsLibraryController.prototype.list = function () {
            };
            IndustryExpertsLibraryController.prototype.milliSecondsToMMSS = function (t) {
                if (isNaN(t)) {
                    return "00:00";
                }
                t = Math.floor(t / 1000);
                var minutes = Math.floor(t / 60.0);
                var seconds = Math.floor(t % 60);
                return ((minutes < 10 ? "0" : "") +
                    minutes +
                    ":" +
                    (seconds < 10 ? "0" : "") +
                    seconds);
            };
            IndustryExpertsLibraryController.prototype.isBlank = function (s) {
                if (s) { // To appease Typescript, while converting value to truthy value.
                    return false;
                }
                else {
                    return true;
                }
            };
            IndustryExpertsLibraryController.$inject = [
                "$http",
                "$mdToast",
                "$state",
                "$stateParams",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "HopscotchService"
            ];
            return IndustryExpertsLibraryController;
        }());
        app.controller("company.IndustryExpertsLibraryController", IndustryExpertsLibraryController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var InterviewReportsController = /** @class */ (function () {
            function InterviewReportsController($state, $stateParams, $window, reportsService, CSVDownloadService) {
                var _this = this;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$window = $window;
                this.reportsService = reportsService;
                this.CSVDownloadService = CSVDownloadService;
                this.showReportCrumbs = false;
                this.showList = false;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, createdData, myChart, myChart;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _a = this;
                                return [4 /*yield*/, this.reportsService.getInterviewTypeReport(this.TYPE)];
                            case 1:
                                _a.report = _b.sent();
                                createdData = [this.report.submitted, this.report.incompleteAttempts, this.report.additionalAttempts, this.report.flagged, this.report.awaitingFeedback, this.report.deleted];
                                myChart = new Chart("myChart", {
                                    type: 'doughnut',
                                    data: {
                                        labels: ['Interviews', 'Incomplete Attempts', 'Reattempt Requests', 'Flagged', 'Awaiting Feedback', 'Deleted'],
                                        datasets: [{
                                                label: 'Invitations for ' + this.TYPE + ' Interviews',
                                                data: createdData,
                                                backgroundColor: [
                                                    '#4fa953',
                                                    '#09b2c7',
                                                    '#fd9811',
                                                    '#e73e3b',
                                                    '#09b2d9',
                                                    '#e73e9d'
                                                ],
                                                borderColor: [
                                                    'rgba(255,99,132,1)',
                                                    'rgba(54, 162, 235, 1)',
                                                    'rgba(255, 206, 86, 1)',
                                                    'rgba(75, 192, 192, 1)',
                                                    'rgba(75, 192, 192, 1)',
                                                    'rgba(75, 192, 192, 1)'
                                                ],
                                                borderWidth: 1
                                            }]
                                    },
                                    options: {
                                        cutoutPercentage: 40,
                                        responsive: false,
                                        animation: {
                                            animateRotate: true
                                        }
                                    }
                                });
                                myChart = new Chart("myChart2", {
                                    type: 'bar',
                                    data: {
                                        labels: ['Interviews', 'Incomplete Attempts', 'Reattempt Requests', 'Flagged', 'Awaiting Feedback', 'Deleted'],
                                        datasets: [{
                                                label: 'Invitations for ' + this.TYPE + ' Interviews',
                                                data: createdData,
                                                backgroundColor: [
                                                    '#4fa953',
                                                    '#09b2c7',
                                                    '#fd9811',
                                                    '#e73e3b',
                                                    '#09b2d9',
                                                    '#e73e9d'
                                                ],
                                                borderColor: [
                                                    'rgba(255,99,132,1)',
                                                    'rgba(54, 162, 235, 1)',
                                                    'rgba(255, 206, 86, 1)',
                                                    'rgba(75, 192, 192, 1)',
                                                    'rgba(75, 192, 192, 1)',
                                                    'rgba(75, 192, 192, 1)'
                                                ],
                                                borderWidth: 1
                                            }]
                                    },
                                    options: {
                                        //cutoutPercentage: 40,
                                        responsive: false,
                                    }
                                });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.getTypeStyled = function () { return _this.TYPE.charAt(0).toUpperCase() + _this.TYPE.slice(1); };
                this.toggleListMode = function () { return _this.showList = !_this.showList; };
                this.TYPE = $stateParams.type;
                if (this.$stateParams.reportOrigin != null || angular.isDefined(this.$stateParams.reportOrigin)) {
                    this.showReportCrumbs = true;
                }
            }
            InterviewReportsController.prototype.downloadSummary = function () {
                var data = [this.report];
                var headersArrayList = ['invitations', 'submitted', 'awaitingFeedback', 'additionalAttempts', 'incompleteAttempts', 'flagged', 'interviews', 'reviewers', 'deleted'];
                if (this.report) {
                    this.CSVDownloadService.downloadFile(data, this.TYPE + ' Summary Report', headersArrayList);
                }
            };
            InterviewReportsController.prototype.downloadList = function () {
                var headersArrayList = ['name', 'hasQuestions', 'hasCandidates', 'hasRecordings', 'creationDate', 'creatorName', 'creatorEmail', 'creatorRole', 'deadline', 'attemptsAllowed', 'interviewType', 'isArchived', 'invitations', 'submitted', 'awaitingFeedback', 'additionalAttempts', 'incompleteAttempts', 'flagged', 'deleted'];
                if (this.report.interviewsList) {
                    this.CSVDownloadService.downloadFile(this.report.interviewsList, this.TYPE + ' Interviews Report', headersArrayList);
                }
            };
            InterviewReportsController.$inject = [
                "$state", "$stateParams", "$window", "company.reportsService", "company.CSVService"
            ];
            return InterviewReportsController;
        }());
        app.controller("company.InterviewReportsController", InterviewReportsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var InterviewSettingsController = /** @class */ (function () {
            function InterviewSettingsController($http, $mdToast, $stateParams, SessionService, $mdDialog, $timeout, $state) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.$state = $state;
                this.$onInit = function () { };
                this.interviewid = $stateParams.interviewId;
                this.$http
                    .get("/company/ratings/check-dimensions/frozen/" + this.interviewid)
                    .then(function (result) {
                    _this.isFrozen = result.data.areFrozen;
                });
                this.$http
                    .get("/company/ratings/has-recording/" + this.interviewid)
                    .then(function (result) {
                    _this.hasRecording = result.data.hasRecording;
                });
                this.$http
                    .get("/company/ratings/rating-dimensions/" + this.interviewid)
                    .then(function (result) {
                    _this.ratingDimensions = result.data;
                    if (_this.ratingDimensions.length < 1) {
                        var ratingDimensionOne = {
                            interviewId: _this.interviewid,
                            id: null,
                            name: null,
                            scale: 5
                        };
                        var ratingDimensionTwo = {
                            interviewId: _this.interviewid,
                            id: null,
                            name: null,
                            scale: 5
                        };
                        var ratingDimensionThree = {
                            interviewId: _this.interviewid,
                            id: null,
                            name: null,
                            scale: 5
                        };
                        _this.ratingDimensions.push(ratingDimensionOne);
                        _this.ratingDimensions.push(ratingDimensionTwo);
                        _this.ratingDimensions.push(ratingDimensionThree);
                    }
                });
                this.showInviteTeamMember = false;
                this.list();
                this.showInviteTeamMember = false;
                this.list();
            }
            InterviewSettingsController.prototype.toggleInvite = function () {
                this.showInviteTeamMember = !this.showInviteTeamMember;
            };
            InterviewSettingsController.prototype.list = function () {
                var _this = this;
                this.$http.get("/company/employees/company/")
                    .then(function (result) {
                    _this.roleCompany = result.data;
                });
                this.$http.get("/company/interviews/get-all-team-members/" + this.interviewid)
                    .then(function (result) {
                    _this.employeeList = result.data;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            InterviewSettingsController.prototype.removeAll = function () {
                var _this = this;
                this.$http.put("/company/interviews/remove-access-for-all/" + this.interviewid, {})
                    .then(function (result) {
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Access Removed for all other Team Members..")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            InterviewSettingsController.prototype.grantAll = function () {
                var _this = this;
                this.$http.put("/company/interviews/give-access-for-all/" + this.interviewid, {})
                    .then(function (result) {
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Access Granted for all other Team Members..")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            InterviewSettingsController.prototype.reinvite = function (employee) {
                var _this = this;
                this.$http.put("/company/interviews/give-access-for-one/" + this.interviewid + "/" + employee.guid, {})
                    .then(function (result) {
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Access Granted..")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            InterviewSettingsController.prototype.uninvite = function (employee) {
                var _this = this;
                this.$http.put("/company/interviews/remove-access-for-one/" + this.interviewid + "/" + employee.guid, {})
                    .then(function (result) {
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Access Revoked..")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            InterviewSettingsController.prototype.addAnotherDimension = function () {
                var ratingDimension = {
                    interviewId: this.interviewid,
                    id: null,
                    name: null,
                    scale: 5
                };
                this.ratingDimensions.push(ratingDimension);
            };
            InterviewSettingsController.prototype.deleteDimension = function (index) {
                this.ratingDimensions.splice(index, 1);
            };
            InterviewSettingsController.prototype.save = function () {
                var _this = this;
                var request = this.$mdDialog
                    .confirm()
                    .title("Are you sure?")
                    .textContent("Please be aware that the dimensions for this role cannot be changed once you have begun rating candidates")
                    .ok("Save")
                    .cancel("Cancel")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http
                        .post("/company/ratings/rating-dimensions/" + _this.interviewid, _this.ratingDimensions)
                        .then(function (value) {
                        _this.$state.go("root.company.dashboard");
                    }, function (error) {
                        _this.$mdToast.showSimple(error.name + " " + error.message);
                    });
                }, function () { });
            };
            InterviewSettingsController.$inject = ["$http",
                "$mdToast",
                "$stateParams",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "$state"];
            return InterviewSettingsController;
        }());
        app.controller("company.InterviewSettingsController", InterviewSettingsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var InterviewEmployeesController = /** @class */ (function () {
            function InterviewEmployeesController($http, $mdToast, $stateParams, interviewsService, CompanyGroupsService, CompanyEmployeesService, SessionService, $mdDialog, $timeout) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.interviewsService = interviewsService;
                this.CompanyGroupsService = CompanyGroupsService;
                this.CompanyEmployeesService = CompanyEmployeesService;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.toggleInvite = function () { return _this.showInviteTeamMember = !_this.showInviteTeamMember; };
                this.addGroup = function () { return __awaiter(_this, void 0, void 0, function () {
                    var users, error_42;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this.selectedGroup)
                                    return [2 /*return*/];
                                users = {
                                    endUserIds: [],
                                    endGroupsIds: [this.selectedGroup.id]
                                };
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.interviewsService.setTeamMembers(this.interviewId, users)];
                            case 2:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 3:
                                error_42 = _a.sent();
                                this.$mdToast.showSimple("Error modifying current team members. See console for details");
                                Rollbar.error(error_42);
                                return [3 /*break*/, 4];
                            case 4:
                                this.selectedUser = null;
                                this.refresh();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.addUser = function () { return __awaiter(_this, void 0, void 0, function () {
                    var teamIds, users, error_43;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (!this.selectedUser)
                                    return [2 /*return*/];
                                teamIds = this.team.map(function (user) { return user.guid; });
                                users = {
                                    endUserIds: [this.selectedUser.employeeid],
                                    endGroupsIds: [],
                                };
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.interviewsService.setTeamMembers(this.interviewId, users)];
                            case 2:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 3:
                                error_43 = _a.sent();
                                this.$mdToast.showSimple("Error modifying current team members. See console for details");
                                Rollbar.error(error_43);
                                return [3 /*break*/, 4];
                            case 4:
                                this.selectedUser = null;
                                this.refresh();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.removeGroup = function (group) { return __awaiter(_this, void 0, void 0, function () {
                    var error_44;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.interviewsService.removeTeamGroup(this.interviewId, group.id)];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 3];
                            case 2:
                                error_44 = _a.sent();
                                this.$mdToast.show(this.$mdToast
                                    .simple()
                                    .textContent("One or more members in this group have interviews assigned to them.")
                                    .hideDelay(10000)
                                    .position("bottom left")
                                    .theme("toasttheme"));
                                Rollbar.error(error_44);
                                return [3 /*break*/, 3];
                            case 3:
                                this.refresh();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.removeUser = function (employee) { return __awaiter(_this, void 0, void 0, function () {
                    var error_45;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.interviewsService.removeTeamMembers(this.interviewId, employee.guid)];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 3];
                            case 2:
                                error_45 = _a.sent();
                                this.$mdToast.show(this.$mdToast
                                    .simple()
                                    .textContent("This reviewer already have interviews assigned to them.")
                                    .hideDelay(10000)
                                    .position("bottom left")
                                    .theme("toasttheme"));
                                //this.$mdToast.showSimple("Error removing team member. Only Interview creator can delete members.");
                                Rollbar.error(error_45);
                                return [3 /*break*/, 3];
                            case 3:
                                this.refresh();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.filterGroups = function () {
                    return _this.groups = _this.allGroups.filter(function (g) { return g.name.toLowerCase().includes(_this.groupSearch.toLowerCase()); });
                };
                this.filterUsers = function () {
                    return _this.employeeList = _this.allEmployees.filter(function (g) { return g.name.toLowerCase().includes(_this.userSearch.toLowerCase()); });
                };
                this.refreshNoReload = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _i, _b, group, _c, _d, error_46;
                    var _this = this;
                    return __generator(this, function (_e) {
                        switch (_e.label) {
                            case 0:
                                _e.trys.push([0, 7, , 8]);
                                _a = this;
                                return [4 /*yield*/, this.interviewsService.getTeamGroups(this.interviewId)];
                            case 1:
                                _a.teamGroups = _e.sent();
                                _i = 0, _b = this.teamGroups;
                                _e.label = 2;
                            case 2:
                                if (!(_i < _b.length)) return [3 /*break*/, 5];
                                group = _b[_i];
                                _c = group;
                                return [4 /*yield*/, this.CompanyGroupsService.getGroupUsers(group.id)];
                            case 3:
                                _c.users = (_e.sent());
                                _e.label = 4;
                            case 4:
                                _i++;
                                return [3 /*break*/, 2];
                            case 5:
                                _d = this;
                                return [4 /*yield*/, this.interviewsService.getTeamMembers(this.interviewId)];
                            case 6:
                                _d.team = _e.sent();
                                this.team = this.team.filter(function (employee) { return employee.hasAccess; });
                                this.employeeList = this.allEmployees
                                    .filter(function (user) { return !_this.team.find(function (employee) { return employee.guid === user.employeeid; }); });
                                this.groups = this.allGroups
                                    .filter(function (group) { return !_this.teamGroups.find(function (teamGroup) { return teamGroup.id === group.id; }); });
                                this.team = this.team
                                    .filter(function (user) { return !user.owner; })
                                    .map(function (user) { user.role = _this.getUserRole(user.guid); return user; });
                                this.selectedGroup = null;
                                this.selectedUser = null;
                                return [3 /*break*/, 8];
                            case 7:
                                error_46 = _e.sent();
                                this.$mdToast.showSimple("Error retrieving current team members. See console for details");
                                Rollbar.error(error_46);
                                return [3 /*break*/, 8];
                            case 8: return [2 /*return*/];
                        }
                    });
                }); };
                this.getUserRole = function (id) {
                    var user = _this.allEmployees.find(function (i) { return i.employeeid === id; });
                    return user.admin ? 'Admin' : user.reviewer ? 'Reviewer' : 'SuperAdmin';
                };
                this.showGroupDetails = function (group) {
                    var html = "";
                    group.users.forEach(function (user) { return html += user.fullName + " - " + user.role + "<br>"; });
                    var dialog = _this.$mdDialog.alert()
                        .title(group.name)
                        .htmlContent(html)
                        .ok("Close");
                    _this.$mdDialog.show(dialog);
                };
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b, _c, error_47;
                    return __generator(this, function (_d) {
                        switch (_d.label) {
                            case 0:
                                _d.trys.push([0, 4, , 5]);
                                _a = this;
                                return [4 /*yield*/, this.interviewsService.getInterview(this.interviewId)];
                            case 1:
                                _a.interview = (_d.sent()); //.find(i => i.guid === this.interviewId)
                                _b = this;
                                return [4 /*yield*/, this.CompanyGroupsService.getGroups()];
                            case 2:
                                _b.allGroups = _d.sent();
                                this.groups = JSON.parse(JSON.stringify(this.allGroups));
                                _c = this;
                                return [4 /*yield*/, this.CompanyEmployeesService.getEmployees()];
                            case 3:
                                _c.allEmployees = (_d.sent()).data;
                                this.employeeList = JSON.parse(JSON.stringify(this.allEmployees));
                                return [3 /*break*/, 5];
                            case 4:
                                error_47 = _d.sent();
                                this.$mdToast.showSimple("Error retrieving interview members. See console for details");
                                Rollbar.error(error_47);
                                return [3 /*break*/, 5];
                            case 5:
                                this.refreshNoReload();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.interviewId = $stateParams.interviewId;
                this.showInviteTeamMember = false;
            }
            InterviewEmployeesController.prototype.refresh = function () {
                window.location.reload();
            };
            InterviewEmployeesController.$inject = ["$http", "$mdToast", "$stateParams", "company.interviewsService",
                "company.groupsService", "company.employeesService", "SessionService", "$mdDialog", "$timeout",
            ];
            return InterviewEmployeesController;
        }());
        app.controller("company.InterviewEmployeesController", InterviewEmployeesController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var moment;
        var InterviewTypesController = /** @class */ (function () {
            function InterviewTypesController($http, $mdToast, $scope, SessionService, $state, redirectIfNotLoggedIn, $timeout, $mdDialog, CompanyInterviewsService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$state = $state;
                this.redirectIfNotLoggedIn = redirectIfNotLoggedIn;
                this.$timeout = $timeout;
                this.$mdDialog = $mdDialog;
                this.CompanyInterviewsService = CompanyInterviewsService;
                this.list = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, error_48;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 2, , 3]);
                                _a = this;
                                return [4 /*yield*/, this.CompanyInterviewsService.getInterviewTypes()];
                            case 1:
                                _a.interviewTypes = _b.sent();
                                return [3 /*break*/, 3];
                            case 2:
                                error_48 = _b.sent();
                                this.showToastMessage('Some error has happened. See console for details');
                                Rollbar.error(error_48);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.refreshList = function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this.list();
                        console.log("Refreshed");
                        return [2 /*return*/];
                    });
                }); };
                this.deleteInterviewType = function (interviewType) { return __awaiter(_this, void 0, void 0, function () {
                    var error_49;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 3, , 4]);
                                return [4 /*yield*/, this.$http.delete("/company/interviews/interview-types/" + interviewType.id)];
                            case 1:
                                _a.sent();
                                this.interviewTypes.splice(interviewType);
                                return [4 /*yield*/, this.refreshList()];
                            case 2:
                                _a.sent();
                                this.showToastMessage("Successfully deleted " + interviewType.name);
                                return [3 /*break*/, 4];
                            case 3:
                                error_49 = _a.sent();
                                this.showToastMessage('There was an issue deleting the interview type');
                                Rollbar.error(error_49);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); };
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.list()];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position("top left")
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.getReadableDate = function (date) { return new Date(date).toLocaleDateString('en-GB', {
                    day: 'numeric', month: 'short', year: 'numeric'
                }).replace(/ /g, '-'); };
                var d = new Date();
                this.now = new Date();
                this.showCreateInterviewType = false;
            }
            InterviewTypesController.prototype.cancelEdit = function () {
                this.editableInterviewType = null;
                this.showEditInterviewType = false;
            };
            InterviewTypesController.prototype.toggleCreateInterviewType = function () {
                this.showCreateInterviewType = !this.showCreateInterviewType;
            };
            InterviewTypesController.prototype.edit = function (interviewType) {
                this.editableInterviewType = interviewType;
                this.showEditInterviewType = true;
            };
            InterviewTypesController.prototype.update = function (interviewType) {
                var _this = this;
                this.$http.put("/company/interviews/interview-types/", interviewType).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Category Edited Sucessfully...")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.$state.reload();
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(error.data.message)
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                });
            };
            InterviewTypesController.prototype.createNew = function () {
                var _this = this;
                this.$http.post("/company/interviews/interview-types/", this.newInterviewType)
                    .then(function (result) {
                    _this.showCreateInterviewType = false;
                    if (_this.interviewTypes) {
                        _this.interviewTypes.push(result.data);
                    }
                    _this.showToastMessage("Successfully created " + result.data.name + " Interview Type");
                }, function (error) {
                    _this.showCreateInterviewType = false;
                    _this.showToastMessage(error.data.message);
                    Rollbar.error(error);
                });
            };
            InterviewTypesController.prototype.updateDom = function () {
                if (!this.$scope.$$phase)
                    this.$scope.$apply();
            };
            InterviewTypesController.$inject = [
                "$http",
                "$mdToast",
                "$scope",
                "SessionService",
                "$state",
                "redirectIfNotLoggedIn",
                "$timeout",
                "$mdDialog",
                "company.interviewsService"
            ];
            return InterviewTypesController;
        }());
        app.controller("company.InterviewTypesController", InterviewTypesController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var LeaderboardMultipartyController = /** @class */ (function () {
            function LeaderboardMultipartyController($http, $mdToast, $scope, SessionService, $stateParams) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$stateParams = $stateParams;
                this.orderVariable = '';
                this.$onInit = function () { };
                this.interviewId = $stateParams.interviewId;
                this.$http.get("/company/multiparty/details-by-interview/" + this.interviewId).then(function (result) {
                    _this.roleCompany = result.data;
                });
                this.$http
                    .get("/company/multiparty/rating-dimensions/" + this.interviewId)
                    .then(function (result) {
                    _this.dimensions = result.data;
                });
                $http.get("/company/multiparty/get-leaderboard/" + this.interviewId).then(function (result) {
                    _this.insertTotal(result.data);
                    _this.allData = _.cloneDeep(result.data);
                }, function (error) {
                    Rollbar.error(error);
                });
            }
            LeaderboardMultipartyController.prototype.getColor = function (index) {
                var i = index % 4;
                switch (i) {
                    case 0:
                        return "{'background': 'report-primary-500-1.0'}";
                    case 1:
                        return "{'background': 'report-accent-500-1.0'}";
                    case 2:
                        return "{'background': 'report-warn-500-1.0'}";
                    case 3:
                        return "{'background': 'report-background-500-1.0'}";
                }
            };
            LeaderboardMultipartyController.prototype.insertTotal = function (data) {
                var length = 0;
                var totalOfTotal = 0;
                data.userRatings.forEach(function (value, index) {
                    var total = 0;
                    value.ratings.forEach(function (v, i) {
                        total += v.value;
                    });
                    length++;
                    totalOfTotal += total;
                    value.ratings.unshift({
                        name: "Total",
                        value: total
                    });
                });
                this.average = totalOfTotal / length;
            };
            // public filter(): void {
            //   if (this.search != '') {
            //     this.filteredData.candidateRatings = _.cloneDeep(_.filter(this.allData.candidateRatings, (obj) => {
            //       return obj.candidateName.toLowerCase().indexOf(this.search.toLowerCase()) !== -1;
            //     }));
            //   } else {
            //     this.filteredData = _.cloneDeep(this.allData);
            //   }
            // }
            LeaderboardMultipartyController.$inject = ["$http", "$mdToast", "$scope", "SessionService", "$stateParams"];
            return LeaderboardMultipartyController;
        }());
        app.controller("company.LeaderboardMultipartyController", LeaderboardMultipartyController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var LeaderboardOnewayController = /** @class */ (function () {
            function LeaderboardOnewayController(SessionService, $stateParams, invitationsService, ratingsService, leaderboardService, $window) {
                var _this = this;
                this.SessionService = SessionService;
                this.$stateParams = $stateParams;
                this.invitationsService = invitationsService;
                this.ratingsService = ratingsService;
                this.leaderboardService = leaderboardService;
                this.$window = $window;
                this.TAGS = ["Accept", "Reject", "Waitlist"];
                this.filteredData = [];
                this.allData = [];
                this.ratingDimensions = [];
                this.overallTotal = 0;
                this.overallTotalRounded = "0";
                this.tagEdit = false;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b, allRatings;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _a = this;
                                return [4 /*yield*/, this.invitationsService.getOne(this.invitationId)];
                            case 1:
                                _a.currentInvitation = _c.sent();
                                _b = this;
                                return [4 /*yield*/, this.ratingsService.getRatingDimensions(this.invitationId)];
                            case 2:
                                _b.ratingDimensions = _c.sent();
                                this.ratingDimensions.push({ competencyName: 'total', competencyDimensionId: 'total' });
                                return [4 /*yield*/, this.ratingsService.getAllRatingsByInvitation(this.invitationId)];
                            case 3:
                                allRatings = _c.sent();
                                this.tag = allRatings[0].tag;
                                this.allData = this.getRatingFormattedData(allRatings);
                                this.filteredData = _.cloneDeep(this.allData);
                                this.overallTotal = this.allData.reduce(function (total, current) { return total + current.scores[current.scores.length - 1].value; }, 0) / this.allData.length;
                                this.overallTotalRounded = this.overallTotal.toFixed(2);
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.getRatingFormattedData = function (allRatings) {
                    var reviewerRatings = allRatings.reduce(function (total, current) { return __spreadArray(__spreadArray([], total), current.endUserRatings); }, []).filter(function (rating) { return rating; });
                    var reviewerEmails = Array.from(new Set(reviewerRatings.map(function (rating) { return rating.endUserEmail; })));
                    return reviewerEmails.map(function (email) {
                        var filter = function (rating) { return rating.endUserEmail === email; };
                        var scores = _this.ratingDimensions.map(function (ratingDimension, index) {
                            var rating = reviewerRatings
                                .filter(filter)
                                .find(function (rating) { return rating.competencyDimensionId === ratingDimension.competencyDimensionId; });
                            return { name: ratingDimension.competencyName, value: rating ? rating.rating : 0 };
                        });
                        if (scores.length > 0) {
                            scores[scores.length - 1] = {
                                name: 'total',
                                value: scores
                                    .map(function (score) { return score.value || 0; })
                                    .reduce(function (total, current) { return total + current; })
                            };
                        }
                        return {
                            name: reviewerRatings.find(filter).endUserName,
                            scores: scores,
                            comment: reviewerRatings.find(filter).comments || 'This Reviewer did not leave a comment',
                            tag: reviewerRatings.find(filter).tag || '',
                        };
                    });
                };
                this.isTotalDimension = function (index) { return _this.ratingDimensions.length - 1 === index; };
                this.getTagClass = function () { return "tag " + _this.tag; };
                this.getReviewerTagClass = function (reviewer) { return reviewer.tag ? "tag " + reviewer.tag : ''; };
                this.editTag = function () {
                    _this.tagEdit = true;
                };
                this.saveTag = function () { return __awaiter(_this, void 0, void 0, function () {
                    var error_50;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.leaderboardService.setTag(this.invitationId, this.tag)];
                            case 1:
                                _a.sent();
                                return [3 /*break*/, 3];
                            case 2:
                                error_50 = _a.sent();
                                Rollbar.error(error_50);
                                return [3 /*break*/, 3];
                            case 3:
                                this.tagEdit = false;
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.sort = function () {
                    var variable = '';
                    if (_this.orderVariable < 0) {
                        variable = _this.filteredData[0].scores[Math.abs(_this.orderVariable) - 1].name;
                        _this.filteredData.sort(function (a, b) {
                            for (var _i = 0; _i < a.scores.length; _i++) {
                                if (a.scores[_i].name === _this.filteredData[0].scores[Math.abs(_this.orderVariable) - 1].name) {
                                    if (a.scores[_i].value > b.scores[_i].value) {
                                        return 1;
                                    }
                                    else if (a.scores[_i].value == b.scores[_i].value) {
                                        return 0;
                                    }
                                    else {
                                        return -1;
                                    }
                                }
                            }
                            return 0;
                        });
                    }
                    else {
                        variable = _this.filteredData[0].scores[Math.abs(_this.orderVariable) - 1].name;
                        _this.filteredData.sort(function (a, b) {
                            for (var _i = 0; _i < a.scores.length; _i++) {
                                if (a.scores[_i].name === _this.filteredData[0].scores[Math.abs(_this.orderVariable) - 1].name) {
                                    if (a.scores[_i].value < b.scores[_i].value) {
                                        return 1;
                                    }
                                    else if (a.scores[_i].value == b.scores[_i].value) {
                                        return 0;
                                    }
                                    else {
                                        return -1;
                                    }
                                }
                            }
                            return 0;
                        });
                    }
                };
                this.interviewId = this.$stateParams.interviewId;
                this.invitationId = this.$stateParams.invitationId;
            }
            LeaderboardOnewayController.prototype.filter = function () {
                var _this = this;
                if (this.search != '') {
                    this.filteredData = _.cloneDeep(_.filter(this.allData, function (obj) {
                        return obj.name.toLowerCase().indexOf(_this.search.toLowerCase()) !== -1;
                    }));
                }
                else {
                    this.filteredData = _.cloneDeep(this.allData);
                }
            };
            LeaderboardOnewayController.$inject = ["SessionService", "$stateParams", "company.invitationsService",
                "company.ratingsService", "company.leaderboardService", "$window"];
            return LeaderboardOnewayController;
        }());
        app.controller("company.LeaderboardOnewayController", LeaderboardOnewayController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var LoginController = /** @class */ (function () {
            function LoginController($http, $mdToast, session, $state, $mdDialog, $stateParams) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$stateParams = $stateParams;
                this.password = '';
                this.$onInit = function () { };
                Rollbar.info("User is on the company login page");
            }
            LoginController.prototype.sendResetLink = function () {
                var _this = this;
                var frDTO = { userNameOrEmail: this.userNameOrEmail.toLowerCase() };
                this.$http.post("/company/password/forgot-password", frDTO).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("A link has been sent your email")
                        .hideDelay(10000)
                        .position('top left')
                        .theme("toasttheme"));
                    _this.$mdDialog.hide();
                    _this.userNameOrEmail = "";
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Request failed. Please try again")
                        .hideDelay(10000)
                        .position('top left')
                        .theme("toasttheme"));
                    _this.userNameOrEmail = "";
                    //this.$mdDialog.hide();
                });
            };
            LoginController.prototype.forgotPassword = function () {
                this.passwordDialog = this.$mdDialog.show({
                    controller: LoginController,
                    controllerAs: "home",
                    bindToController: true,
                    templateUrl: 'views/company/dialogs/forgot-password.html',
                    parent: angular.element(document.body),
                    // locals: { openInviteLink: this.openInviteLink },
                    clickOutsideToClose: true,
                    escapeToClose: true
                    // Only for -xs, -sm breakpoints.
                }).then(function () {
                    console.debug("You clicked the button to close the bottom sheet");
                })
                    .catch(function () {
                    console.debug("You clicked cancel button");
                });
            };
            LoginController.prototype.login = function (code, password) {
                var _this = this;
                if (code.indexOf('@') != -1) {
                    code = code.toLowerCase();
                }
                var dto = {
                    username: code,
                    password: password
                };
                this.$http.post("/login", dto).then(function (result) {
                    _this.session.setToken(result.headers("Authorization"));
                    if (_this.session.isCompany()) {
                        if (_this.$stateParams.promocode == null || !angular.isDefined(_this.$stateParams.planid)) {
                            _this.checkSubscriptionStatus().then(function (result) {
                                _this.session.setPlan(result.data);
                            }, function (error) {
                                Rollbar.error(error);
                            });
                            if (_this.session.blocked()) {
                                _this.$state.go("root.company.blocked", {}, {
                                    reload: true
                                });
                            }
                            var url = _this.session.isRoleSuperAdmin() || _this.session.isRoleAdmin() ? 'root.company.dashboard' :
                                _this.session.isRoleReviewer() ? 'root.company.reviewerdashboard' :
                                    'root.company.login';
                            _this.$state.go(url, {}, {
                                reload: true
                            });
                        }
                        else {
                            var plan = null;
                            _this.$http.get("/company/signup/plan/" + _this.$stateParams.planid).then(function (result) {
                                plan = result.data;
                                _this.$state.go("root.company.braintree", { plan: plan, promocode: _this.$stateParams.promocode });
                            });
                        }
                    }
                    else if (_this.session.isCandidate()) {
                        _this.$state.go("root.candidate.dashboard", {}, {
                            reload: true
                        });
                    }
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent(error.message)
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            LoginController.prototype.checkSubscriptionStatus = function () {
                return this.$http.get("/company/subscriptions/check-status");
            };
            LoginController.$inject = ["$http", "$mdToast", "SessionService", "$state", "$mdDialog", "$stateParams"];
            return LoginController;
        }());
        app.controller("company.LoginController", LoginController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var MultipartyCandidatesController = /** @class */ (function () {
            function MultipartyCandidatesController($http, $mdToast, $stateParams, SessionService, $mdDialog, $timeout) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.search = '';
                this.orderVariable = '-creationDate';
                this.$onInit = function () { };
                var d = new Date();
                this.now = new Date();
                this.timeZone = d
                    .toLocaleString("en", { timeZoneName: "short" })
                    .split(" ")
                    .pop();
                this.interviewId = $stateParams.interviewId;
                this.showInviteCandidate = false;
                this.list();
                this.$http.get("/company/details-by-interview/" + this.interviewId)
                    .then(function (result) {
                    _this.roleCompany = result.data;
                });
                this.$http.get("/company/interviews/check-open-invite/" + this.interviewId).then(function (result) {
                    _this.interviewInfo = result.data;
                    if (_this.interviewInfo.hasOpenInvite) {
                        _this.openInviteLink = window.location.protocol + "//" + window.location.host + "/#/applicant/open/" + _this.interviewId;
                    }
                    else {
                        _this.openInviteLink = '';
                    }
                });
            }
            MultipartyCandidatesController.prototype.filter = function () {
                // if (this.search != '') {
                //   this.invitations = _.filter(this.allInvitations, (obj) => {
                //     return obj.candidatename.toLowerCase().indexOf(this.search.toLowerCase()) !== -1;
                //   });
                // } else {
                //   this.invitations = this.allInvitations;
                // }
            };
            MultipartyCandidatesController.prototype.sortResultsAscending = function () {
                this.orderVariable = 'creationDate';
            };
            MultipartyCandidatesController.prototype.sortResultsDescending = function () {
                this.orderVariable = '-creationDate';
            };
            MultipartyCandidatesController.prototype.showOpenInviteLink = function () {
                this.linkDialog = this.$mdDialog.show({
                    controller: MultipartyCandidatesController,
                    controllerAs: "candidatesmultiparty",
                    bindToController: true,
                    templateUrl: 'views/company/dialogs/share-link.html',
                    parent: angular.element(document.body),
                    locals: { openInviteLink: this.openInviteLink },
                    clickOutsideToClose: true,
                    escapeToClose: true
                    // Only for -xs, -sm breakpoints.
                }).then(function () {
                    console.debug("You clicked the button to close the bottom sheet");
                })
                    .catch(function () {
                    console.debug("You clicked cancel button");
                });
            };
            MultipartyCandidatesController.prototype.copyToClipBoard = function () {
                var element = document.getElementById("unique-link");
                element.select();
                document.execCommand("Copy");
                this.$mdToast.show(this.$mdToast.simple()
                    .textContent("Copied to Clipboard")
                    .hideDelay(10000)
                    .position('top left')
                    .theme("toasttheme"));
            };
            MultipartyCandidatesController.prototype.cancel = function () {
                this.$mdDialog.hide();
            };
            MultipartyCandidatesController.prototype.toggleInviteCandidate = function () {
                this.showInviteCandidate = !this.showInviteCandidate;
            };
            MultipartyCandidatesController.prototype.list = function () {
                var _this = this;
                this.$http.get("/company/multiparty/get-events-interview/" + this.interviewId)
                    .then(function (result) {
                    _this.invitations = result.data;
                    _this.allInvitations = result.data;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            MultipartyCandidatesController.prototype.reinvite = function (invitationId) {
                var _this = this;
                this.$http.put("/company/invitations/reinvite/" + invitationId, {})
                    .then(function (result) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Invitation Sent Again")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            MultipartyCandidatesController.prototype.uninvite = function (invitation) {
                // var request = this.$mdDialog.confirm()
                //   .title("Are you sure?")
                //   .textContent("The invitation will be deleted and the candidate won't be able to record the interview")
                //   .ok("UNINVITE")
                //   .cancel("CANCEL")
                //   .theme("confirmdialog");
                // this.$mdDialog.show(request).then(() => {
                //   this.$http.delete("/company/invitations/" + invitation.guid, {})
                //     .then((result: ng.IHttpPromiseCallbackArg<{}>) => {
                //       var i = this.invitations.indexOf(invitation);
                //       this.invitations.splice(i, 1);
                //       this.$mdToast.show(
                //         this.$mdToast.simple()
                //           .textContent("Invitation Deleted")
                //           .hideDelay(10000)
                //           .position('top left')
                //           .theme("toasttheme"));
                //     }, (error) => {
                //       this.$mdToast.show(
                //         this.$mdToast.simple()
                //           .textContent(error.data.message)
                //           .hideDelay(10000)
                //           .position('top left')
                //           .theme("toasttheme"));
                //       Rollbar.error(error);
                //     });
                // }, () => { });
            };
            MultipartyCandidatesController.prototype.edit = function (invitation) {
                var _this = this;
                this.$http.put("/company/invitations/", {
                    guid: invitation.guid,
                    candidatename: invitation.candidatename,
                    candidateemail: invitation.candidateemail
                }).then(function (result) {
                    invitation.isEdit = false;
                    invitation.invitationcode = result.data.invitationcode;
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Invitation Edited Successfully")
                        .hideDelay(10000)
                        .position('top left')
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent(error.data.message)
                        .hideDelay(10000)
                        .position('top left')
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            MultipartyCandidatesController.prototype.cancelEdit = function (invitation) {
                invitation.isEdit = false;
            };
            MultipartyCandidatesController.prototype.showEdit = function (invitation) {
                invitation.isEdit = true;
            };
            MultipartyCandidatesController.prototype.activateJoinInterview = function (interview) {
                var today = new Date();
                var diffMs = interview.fromUTCDateTime - today.getTime(); // milliseconds between now & Christmas
                var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);
                var endTimeinMS = interview.fromUTCDateTime + ((interview.duration + 20) * 60 * 1000);
                var differenceInEndTimeAndNow = endTimeinMS - today.getTime();
                var fromDate = new Date(interview.fromUTCDateTime);
                if (fromDate.getFullYear() == today.getFullYear() && fromDate.getMonth() == today.getMonth() && fromDate.getDate() == today.getDate()) {
                    if (diffMins <= 15 && differenceInEndTimeAndNow >= 0) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                else {
                    return false;
                }
            };
            MultipartyCandidatesController.prototype.disableCancelAndReschedule = function (interview) {
                var today = new Date();
                var diffMs = interview.fromUTCDateTime - today.getTime(); // milliseconds between now & Christmas
                var endTimeinMS = interview.fromUTCDateTime + ((interview.duration + 20) * 60 * 1000);
                if (diffMs <= 900000) {
                    return true;
                }
                else {
                    return false;
                }
            };
            MultipartyCandidatesController.prototype.rsvp = function (eventId) {
                var _this = this;
                this.$http
                    .put("/company/multiparty/add-me/" + eventId, {})
                    .then(function (result) {
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("You have registered to attend this interview...")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            MultipartyCandidatesController.prototype.cancelInterview = function (interview) {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure?")
                    .textContent("Are you sure you wish to cancel this interview? You will not be able to undo this action")
                    .ok("Confirm")
                    .cancel("Back")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/company/multiparty/cancel-event/" + interview.id, {})
                        .then(function (result) {
                        interview.cancelled = true;
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Interview Cancelled")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    }, function (error) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Request failed. Please try again")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    });
                }, function () { });
            };
            MultipartyCandidatesController.prototype.updateMultipartyEvent = function (interview) {
                var _this = this;
                interview.fromUTCDateTime = interview.newFromUTCDateTime;
                this.$http.put("/company/multiparty/reschedule-interview", interview).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Interview Rescheduled...")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    interview.isEdit = false;
                });
            };
            MultipartyCandidatesController.prototype.create = function () {
                var _this = this;
                this.$http.post("/company/multiparty/create-event/" + this.interviewId, this.newMultipartyInterview).then(function (result) {
                    if (_this.invitations) {
                        _this.invitations.push(result.data);
                        _this.newMultipartyInterview.candidateName = '';
                        _this.newMultipartyInterview.candidateEmail = '';
                        _this.newMultipartyInterview.fromUTCDateTime = null;
                        _this.newMultipartyInterview.duration = null;
                    }
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Invitation Sent")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.showInviteCandidate = false;
                }, function (error) {
                    _this.name = '';
                    _this.email = '';
                    _this.showInviteCandidate = false;
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent(error.data.message)
                        .position('top left')
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            MultipartyCandidatesController.prototype.isSelfInvitation = function (email) {
                return this.$http.post("/company/invitations/is-self-invitation/", { email: email });
            };
            MultipartyCandidatesController.prototype.isSameDomainInvitation = function (email) {
                return this.$http.post("/company/invitations/is-same-domain-invitation/", { email: email });
            };
            MultipartyCandidatesController.prototype.isAnotherCompanyInvitation = function (email) {
                return this.$http.post("/company/invitations/is-another-company-invitation/", { email: email });
            };
            MultipartyCandidatesController.$inject = ["$http", "$mdToast", "$stateParams", "SessionService", "$mdDialog", "$timeout"];
            return MultipartyCandidatesController;
        }());
        app.controller("company.MultipartyCandidatesController", MultipartyCandidatesController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var MultipartyEventTeamController = /** @class */ (function () {
            function MultipartyEventTeamController($http, $mdToast, $stateParams, $state, SessionService, $mdDialog, $timeout, hopscotchService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.isFrozen = false;
                this.$onInit = function () { };
                this.eventId = $stateParams.eventId;
                this.$http
                    .get("/company/multiparty/has-recording/" + this.eventId)
                    .then(function (result) {
                    _this.hasRecording = result.data.hasRecording;
                });
                this.showInviteTeamMember = false;
                var d = new Date();
                this.timeZone = d
                    .toLocaleString("en", { timeZoneName: "short" })
                    .split(" ")
                    .pop();
                this.list();
                $http
                    .get("/company/multiparty/get-event-details/" + this.eventId)
                    .then(function (result) {
                    _this.eventDetails = result.data;
                });
            }
            MultipartyEventTeamController.prototype.toggleInvite = function () {
                this.showInviteTeamMember = !this.showInviteTeamMember;
            };
            MultipartyEventTeamController.prototype.list = function () {
                var _this = this;
                this.$http
                    .get("/company/employees/company/")
                    .then(function (result) {
                    _this.rolesCompany = result.data;
                    _this.$timeout(function () {
                        // this.hopscotchService.startTour(
                        //   Hopscotch.interviewTeamTour()["en"].teamTour
                        // );
                    });
                });
                this.$http
                    .get("/company/multiparty/get-company-participants/" + this.eventId)
                    .then(function (result) {
                    _this.participants = result.data;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            MultipartyEventTeamController.prototype.removeAll = function () {
                var _this = this;
                this.$http.delete("/company/multiparty/remove-all-members/" + this.eventId).then(function (result) {
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Access Removed for all other Team Members..")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            MultipartyEventTeamController.prototype.grantAll = function () {
                var _this = this;
                this.$http.put("/company/multiparty/add-all-members/" + this.eventId, {}).then(function (result) {
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Access Granted for all other Team Members..")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            MultipartyEventTeamController.prototype.invite = function (endUserId) {
                var _this = this;
                this.$http
                    .put("/company/multiparty/add-participant/" + this.eventId + "/" + endUserId, {})
                    .then(function (result) {
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Team Member Added...")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            MultipartyEventTeamController.prototype.uninvite = function (endUserId) {
                var _this = this;
                this.$http
                    .delete("/company/multiparty/remove-participant/" + this.eventId + "/" + endUserId)
                    .then(function (result) {
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Team Member Removed...")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            MultipartyEventTeamController.prototype.addAnotherDimension = function () {
                var ratingDimension = {
                    eventId: this.eventId,
                    id: null,
                    name: null,
                    scale: 5
                };
                this.ratingDimensions.push(ratingDimension);
            };
            MultipartyEventTeamController.prototype.deleteDimension = function (index) {
                this.ratingDimensions.splice(index, 1);
            };
            MultipartyEventTeamController.prototype.save = function () {
                var _this = this;
                var request = this.$mdDialog
                    .confirm()
                    .title("Are you sure?")
                    .textContent("Changing the values will change the ratings dimensions for all previous ratings dimensions.")
                    .ok("Save")
                    .cancel("Cancel")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http
                        .post("/company/multiparty/rating-dimensions/" + _this.eventId, _this.ratingDimensions)
                        .then(function (value) {
                        _this.$state.go("root.company.dashboard");
                    }, function (error) {
                        _this.$mdToast.showSimple(error.name + " " + error.message);
                    });
                }, function () { });
            };
            MultipartyEventTeamController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "$state",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "HopscotchService"
            ];
            return MultipartyEventTeamController;
        }());
        app.controller("company.MultipartyEventTeamController", MultipartyEventTeamController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var MultipartySettingsController = /** @class */ (function () {
            function MultipartySettingsController($http, $mdToast, $stateParams, $state, SessionService, $mdDialog, $timeout, hopscotchService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.hopscotchService = hopscotchService;
                this.isFrozen = false;
                this.$onInit = function () { };
                this.eventId = $stateParams.eventId;
                this.$http
                    .get("/company/multiparty/check-dimensions/frozen/" + this.eventId)
                    .then(function (result) {
                    _this.isFrozen = result.data.areFrozen;
                });
                this.$http
                    .get("/company/multiparty/has-recording/" + this.eventId)
                    .then(function (result) {
                    _this.hasRecording = result.data.hasRecording;
                });
                this.$http
                    .get("/company/multiparty/rating-dimensions/" + this.eventId)
                    .then(function (result) {
                    _this.ratingDimensions = result.data;
                    if (_this.ratingDimensions.length < 1) {
                        var ratingDimensionOne = {
                            eventId: _this.eventId,
                            id: null,
                            name: null,
                            scale: 5
                        };
                        var ratingDimensionTwo = {
                            eventId: _this.eventId,
                            id: null,
                            name: null,
                            scale: 5
                        };
                        var ratingDimensionThree = {
                            eventId: _this.eventId,
                            id: null,
                            name: null,
                            scale: 5
                        };
                        _this.ratingDimensions.push(ratingDimensionOne);
                        _this.ratingDimensions.push(ratingDimensionTwo);
                        _this.ratingDimensions.push(ratingDimensionThree);
                    }
                });
                this.showInviteTeamMember = false;
                var d = new Date();
                this.timeZone = d
                    .toLocaleString("en", { timeZoneName: "short" })
                    .split(" ")
                    .pop();
                this.list();
            }
            MultipartySettingsController.prototype.toggleInvite = function () {
                this.showInviteTeamMember = !this.showInviteTeamMember;
            };
            MultipartySettingsController.prototype.list = function () {
                var _this = this;
                this.$http.get("/company/interviews/get-all-team-members/" + this.eventId)
                    .then(function (result) {
                    _this.employeeList = result.data;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
                this.$http
                    .get("/company/employees/company/")
                    .then(function (result) {
                    _this.rolesCompany = result.data;
                    _this.$timeout(function () {
                        // this.hopscotchService.startTour(
                        //   Hopscotch.interviewTeamTour()["en"].teamTour
                        // );
                    });
                });
            };
            MultipartySettingsController.prototype.removeAll = function () {
                var _this = this;
                this.$http.put("/company/interviews/remove-access-for-all/" + this.eventId, {})
                    .then(function (result) {
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Access Removed for all other Team Members..")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            MultipartySettingsController.prototype.grantAll = function () {
                var _this = this;
                this.$http.put("/company/interviews/give-access-for-all/" + this.eventId, {})
                    .then(function (result) {
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Access Granted for all other Team Members..")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            MultipartySettingsController.prototype.reinvite = function (employee) {
                var _this = this;
                this.$http.put("/company/interviews/give-access-for-one/" + this.eventId + "/" + employee.guid, {})
                    .then(function (result) {
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Access Granted..")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            MultipartySettingsController.prototype.uninvite = function (employee) {
                var _this = this;
                this.$http.put("/company/interviews/remove-access-for-one/" + this.eventId + "/" + employee.guid, {})
                    .then(function (result) {
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Access Revoked..")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            MultipartySettingsController.prototype.addAnotherDimension = function () {
                var ratingDimension = {
                    eventId: this.eventId,
                    id: null,
                    name: null,
                    scale: 5
                };
                this.ratingDimensions.push(ratingDimension);
            };
            MultipartySettingsController.prototype.deleteDimension = function (index) {
                this.ratingDimensions.splice(index, 1);
            };
            MultipartySettingsController.prototype.save = function () {
                var _this = this;
                var request = this.$mdDialog
                    .confirm()
                    .title("Are you sure?")
                    .textContent("Changing the values will change the ratings dimensions for all previous ratings dimensions.")
                    .ok("Save")
                    .cancel("Cancel")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http
                        .post("/company/multiparty/rating-dimensions/" + _this.eventId, _this.ratingDimensions)
                        .then(function (value) {
                        _this.$state.go("root.company.dashboard");
                    }, function (error) {
                        _this.$mdToast.showSimple(error.name + " " + error.message);
                    });
                }, function () { });
            };
            MultipartySettingsController.$inject = [
                "$http",
                "$mdToast",
                "$stateParams",
                "$state",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "HopscotchService"
            ];
            return MultipartySettingsController;
        }());
        app.controller("company.MultipartySettingsController", MultipartySettingsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var MultipartyPlayerController = /** @class */ (function () {
            function MultipartyPlayerController($http, $mdToast, $window, $scope, $state, $stateParams, $location, $anchorScroll, $mdDialog) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$window = $window;
                this.$scope = $scope;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$location = $location;
                this.$anchorScroll = $anchorScroll;
                this.$mdDialog = $mdDialog;
                this.duration = 0;
                this.currentTime = 0;
                this.currentRecordingIndex = 0;
                this.showProgress = true;
                this.handleLoadedData = function (event) {
                    _this.duration = _this.videoElement.duration;
                    _this.showProgress = false;
                    _this.updateDom();
                };
                this.handleSeekingEvent = function (event) {
                    _this.showProgress = true;
                    _this.updateDom();
                };
                this.handleMetaData = function (event) {
                    _this.duration = event.target.duration;
                };
                this.handleTimeUpdateEvent = function (event) {
                    _this.currentVideoPercentage =
                        100.0 * event.target.currentTime / _this.duration;
                    _this.currentTime = event.target.currentTime;
                    _this.updateDom();
                };
                this.handleSeekEvent = function (event) {
                    _this.showProgress = false;
                    _this.updateDom();
                    _this.currentVideoPercentage =
                        100.0 * _this.videoElement.currentTime / _this.duration;
                    _this.currentTime = _this.videoElement.currentTime;
                };
                this.$onInit = function () { };
                var query = Modernizr.mq('(max-width: 600px)');
                if (query) {
                    this.$location.hash("player-next-button");
                    this.$anchorScroll();
                }
                else {
                    $("#player-view").height($window.innerHeight - 96);
                    $window.addEventListener("resize", function () {
                        $("#player-view").height($window.innerHeight - 96);
                    });
                }
                this.interview = $stateParams.interview;
                if (angular.isUndefined(this.interview.videoURL)) {
                    this.$state.go("root.company.dashboard");
                }
                if (this.interview.videoURL.search(".*webm$") == -1) {
                    this.videoType = "video/mp4";
                }
                else {
                    this.videoType = "video/webm";
                }
                this.videoElement = document.getElementById("player");
                if (is.ios() && is.safari()) {
                    this.showProgress = false;
                    this.updateDom();
                    this.videoElement.addEventListener("loadeddata", this.handleLoadedData, true);
                }
                else {
                    this.videoElement.addEventListener("loadeddata", this.handleLoadedData, true);
                }
                this.$http.get("/company/multiparty/rating-dimensions/" + this.interview.interviewId).then(function (result) {
                    _this.rating = result.data;
                    if (result.data.length < 1) {
                        _this.hasDimensionsSet = false;
                    }
                    else {
                        _this.hasDimensionsSet = true;
                    }
                });
                this.$http.get("/company/multiparty/check-rating-exists-user/" + this.interview.id)
                    .then(function (result) {
                    _this.hasAnyRatings = result.data.hasAnyRatings;
                    if (result.data.exists) {
                        _this.hasGivenRating = true;
                        _this.$http.get("/company/multiparty/get-rating-by-user/" + _this.interview.id).then(function (result) {
                            _this.userRatings = result.data;
                        });
                    }
                    else {
                        _this.hasGivenRating = false;
                    }
                });
            }
            ;
            MultipartyPlayerController.prototype.getNumber = function (num) {
                return new Array(num);
            };
            MultipartyPlayerController.prototype.showRatingsDialog = function (recording) {
                if (this.hasDimensionsSet) {
                    this.ratingsDialog = this.$mdDialog.show({
                        controller: MultipartyPlayerController,
                        controllerAs: "multipartyplayer",
                        bindToController: true,
                        templateUrl: 'views/company/dialogs/multiparty-player-rating.html',
                        parent: angular.element(document.body),
                        locals: { rating: this.rating },
                        clickOutsideToClose: true,
                        escapeToClose: true,
                        // Only for -xs, -sm breakpoints.
                    }).then(function () {
                        console.debug("You clicked the button to close the bottom sheet");
                    })
                        .catch(function () {
                        console.debug("You clicked cancel button");
                    });
                }
                else {
                    this.$mdToast.showSimple('Please set the rating dimensions in the settings for this interview');
                }
            };
            MultipartyPlayerController.prototype.rated = function (rating, value) {
                rating.value = value;
            };
            MultipartyPlayerController.prototype.getIcon = function (rating, index) {
                if (angular.isUndefined(rating.value) || rating.value < index + 1) {
                    return "star_border";
                }
                else if (rating.value >= index + 1) {
                    return "star";
                }
            };
            MultipartyPlayerController.prototype.rate = function () {
                var _this = this;
                var comments;
                if (angular.isUndefined(this.comment)) {
                    comments = " ";
                }
                else {
                    comments = this.comment;
                }
                for (var _i = 0, _a = this.rating; _i < _a.length; _i++) {
                    var rtg = _a[_i];
                    if (rtg.value == null) {
                        rtg.value = 0;
                    }
                }
                var userRating = { comment: comments, ratingDimensionDTOList: this.rating };
                this.$http
                    .post("/company/multiparty/rate/" + this.interview.id, userRating)
                    .then(function () {
                    _this.hasGivenRating = true;
                    _this.$http.get("/company/multiparty/get-rating-by-user/" + _this.interview.id).then(function (result) {
                        _this.userRatings = result.data;
                    });
                    _this.$mdDialog.hide();
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            MultipartyPlayerController.prototype.cancel = function () {
                this.$mdDialog.hide();
            };
            MultipartyPlayerController.prototype.ratedOne = function (rating, recording) {
                rating.value = 1;
            };
            MultipartyPlayerController.prototype.ratedZero = function (rating, recording) {
                rating.value = 0;
            };
            MultipartyPlayerController.prototype.ratedTwo = function (rating, recording) {
                rating.value = 2;
            };
            MultipartyPlayerController.prototype.ratedThree = function (rating, recording) {
                rating.value = 3;
            };
            MultipartyPlayerController.prototype.ratedFour = function (rating, recording) {
                rating.value = 4;
            };
            MultipartyPlayerController.prototype.ratedFive = function (rating, recording) {
                rating.value = 5;
            };
            MultipartyPlayerController.prototype.seek = function () {
                var newTime = Math.floor(this.currentVideoPercentage * this.duration / 100);
                if (!isNaN(newTime)) {
                    this.videoElement.currentTime = newTime || 0;
                }
            };
            MultipartyPlayerController.prototype.play = function () {
                if (this.videoElement.paused) {
                    this.videoElement.play();
                    this.videoElement.addEventListener("timeupdate", this.handleTimeUpdateEvent, true);
                    this.videoElement.addEventListener("loadedmetadata", this.handleMetaData, true);
                    this.videoElement.addEventListener("seeking", this.handleSeekingEvent, true);
                    this.videoElement.addEventListener("seeked", this.handleSeekEvent, true);
                }
                else {
                    this.videoElement.pause();
                }
            };
            MultipartyPlayerController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            MultipartyPlayerController.prototype.mute = function () {
                if (this.videoElement.muted) {
                    this.videoElement.muted = false;
                }
                else {
                    this.videoElement.muted = true;
                }
            };
            MultipartyPlayerController.prototype.secondsToMMSS = function (t) {
                if (isNaN(t)) {
                    return "00:00";
                }
                var minutes = Math.floor(t / 60.0);
                var seconds = Math.floor(t % 60);
                return ((minutes < 10 ? "0" : "") +
                    minutes +
                    ":" +
                    (seconds < 10 ? "0" : "") +
                    seconds);
            };
            MultipartyPlayerController.prototype.goBack = function () {
            };
            MultipartyPlayerController.$inject = [
                "$http",
                "$mdToast",
                "$window",
                "$scope",
                "$state",
                "$stateParams",
                "$location",
                "$anchorScroll",
                "$mdDialog"
            ];
            return MultipartyPlayerController;
        }());
        app.controller("company.MultipartyPlayerController", MultipartyPlayerController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var MultipartyRecordingsController = /** @class */ (function () {
            function MultipartyRecordingsController($http, $mdToast, $state, $stateParams, SessionService, $mdDialog, $timeout, $scope) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.$scope = $scope;
                this.search = '';
                this.orderVariable = '-recordingDate';
                this.$onInit = function () { };
                var d = new Date();
                this.now = new Date();
                this.timeZone = d
                    .toLocaleString("en", { timeZoneName: "short" })
                    .split(" ")
                    .pop();
                this.interviewId = $stateParams.interviewId;
                this.list();
                this.$http.get("/company/details-by-interview/" + this.interviewId)
                    .then(function (result) {
                    _this.roleCompany = result.data;
                });
            }
            MultipartyRecordingsController.prototype.ratedOne = function (rating, recording) {
                rating.value = 1;
            };
            MultipartyRecordingsController.prototype.ratedZero = function (rating, recording) {
                rating.value = 0;
            };
            MultipartyRecordingsController.prototype.ratedTwo = function (rating, recording) {
                rating.value = 2;
            };
            MultipartyRecordingsController.prototype.ratedThree = function (rating, recording) {
                rating.value = 3;
            };
            MultipartyRecordingsController.prototype.ratedFour = function (rating, recording) {
                rating.value = 4;
            };
            MultipartyRecordingsController.prototype.ratedFive = function (rating, recording) {
                rating.value = 5;
            };
            MultipartyRecordingsController.prototype.saveRating = function (recording) {
                var _this = this;
                var comments;
                if (angular.isUndefined(this.comment)) {
                    comments = " ";
                }
                else {
                    comments = this.comment;
                }
                for (var _i = 0, _a = this.ratings; _i < _a.length; _i++) {
                    var rating = _a[_i];
                    if (rating.value == null) {
                        rating.value = 0;
                    }
                }
                var userRating = { comment: comments, ratingDimensionDTOList: this.ratings };
                this.$http
                    .post("/company/multiparty/rate/" + recording.id, userRating)
                    .then(function () {
                    recording.hasRated = true;
                    _this.list();
                    _this.$http.get("/company/multiparty/get-rating-by-user/" + recording.interviewId).then(function (result) {
                        recording.userRatings = result.data;
                    });
                    _this.$mdDialog.hide();
                }, function (error) {
                    Rollbar.error(error);
                });
            };
            MultipartyRecordingsController.prototype.cancel = function () {
                this.$mdDialog.hide();
            };
            MultipartyRecordingsController.prototype.filter = function () {
                var _this = this;
                if (this.search != '') {
                    this.recordingsList = _.filter(this.allRecordingsList, function (obj) {
                        return obj.candidateName.toLowerCase().indexOf(_this.search.toLowerCase()) !== -1;
                    });
                }
                else {
                    this.recordingsList = this.allRecordingsList;
                }
            };
            MultipartyRecordingsController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            MultipartyRecordingsController.prototype.showRatingsDialog = function (recording) {
                var _this = this;
                this.$http.get("/company/multiparty/rating-dimensions/" + recording.interviewId).then(function (result) {
                    _this.ratingDimensions = result.data;
                    if (result.data.length < 1) {
                        _this.hasDimensionsSet = false;
                    }
                    else {
                        _this.hasDimensionsSet = true;
                    }
                    if (_this.hasDimensionsSet) {
                        _this.ratingsDialog = _this.$mdDialog.show({
                            controller: MultipartyRecordingsController,
                            controllerAs: "multipartyrecordings",
                            bindToController: true,
                            templateUrl: 'views/company/dialogs/multiparty-recordings-rating.html',
                            parent: angular.element(document.body),
                            locals: { ratings: _this.ratingDimensions, recording: recording },
                            clickOutsideToClose: true,
                            escapeToClose: true,
                            // Only for -xs, -sm breakpoints.
                        }).then(function () {
                            console.debug("You clicked the button to close the bottom sheet");
                        })
                            .catch(function () {
                            console.debug("You clicked cancel button");
                        });
                    }
                    else {
                        _this.$mdToast.showSimple('Please set the rating dimensions in the settings for this interview');
                    }
                });
            };
            MultipartyRecordingsController.prototype.getNumber = function (num) {
                return new Array(num);
            };
            MultipartyRecordingsController.prototype.getIcon = function (rating, index) {
                if (angular.isUndefined(rating.value) || rating.value < index + 1) {
                    return "star_border";
                }
                else if (rating.value >= index + 1) {
                    return "star";
                }
            };
            MultipartyRecordingsController.prototype.rated = function (rating, value) {
                rating.value = value;
            };
            MultipartyRecordingsController.prototype.list = function () {
                var _this = this;
                this.$http
                    .get("/company/multiparty/get-recordings/" + this.interviewId)
                    .then(function (result) {
                    _this.recordingsList = result.data;
                    _this.allRecordingsList = result.data;
                    _this.updateDom();
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            MultipartyRecordingsController.prototype.milliSecondsToMMSS = function (t) {
                if (isNaN(t)) {
                    return "00:00";
                }
                t = Math.floor(t / 1000);
                var minutes = Math.floor(t / 60.0);
                var seconds = Math.floor(t % 60);
                return ((minutes < 10 ? "0" : "") +
                    minutes +
                    ":" +
                    (seconds < 10 ? "0" : "") +
                    seconds);
            };
            MultipartyRecordingsController.prototype.isBlank = function (s) {
                if (s) { // To appease Typescript, while converting value to truthy value.
                    return false;
                }
                else {
                    return true;
                }
            };
            MultipartyRecordingsController.$inject = [
                "$http",
                "$mdToast",
                "$state",
                "$stateParams",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "$scope"
            ];
            return MultipartyRecordingsController;
        }());
        app.controller("company.MultipartyRecordingsController", MultipartyRecordingsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var MultipartyReportController = /** @class */ (function () {
            function MultipartyReportController($http, $mdToast, $scope, SessionService, $stateParams, $filter) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$stateParams = $stateParams;
                this.$filter = $filter;
                this.orderingVariable = "";
                this.$onInit = function () { };
                this.interviewId = $stateParams.interviewId;
                this.$http
                    .get("/company/multiparty/rating-dimensions/" + this.interviewId)
                    .then(function (result) {
                    _this.dimensions = result.data;
                });
                this.$http
                    .get("/company/details-by-interview/" + this.interviewId)
                    .then(function (result) {
                    _this.roleCompany = result.data;
                });
                $http.get("/company/multiparty/get-report/" + this.interviewId).then(function (result) {
                    _this.allData = _.cloneDeep(result.data);
                    _this.filteredData = _.cloneDeep(result.data);
                }, function (error) {
                    Rollbar.error(error);
                });
            }
            MultipartyReportController.prototype.sort = function () {
                var _this = this;
                var variable = "";
                if (this.orderVariable < 0) {
                    variable = this.filteredData.candidateReportDTOList[0].averageRatings[Math.abs(this.orderVariable) - 1].name;
                    this.filteredData.candidateReportDTOList.sort(function (a, b) {
                        for (var _i = 0; _i < a.averageRatings.length; _i++) {
                            if (a.averageRatings[_i].name ===
                                _this.filteredData.candidateReportDTOList[0].averageRatings[Math.abs(_this.orderVariable) - 1].name) {
                                if (a.averageRatings[_i].value > b.averageRatings[_i].value) {
                                    return 1;
                                }
                                else if (a.averageRatings[_i].value == b.averageRatings[_i].value) {
                                    return 0;
                                }
                                else {
                                    return -1;
                                }
                            }
                        }
                        return 0;
                    });
                }
                else {
                    variable = this.filteredData.candidateReportDTOList[0].averageRatings[Math.abs(this.orderVariable) - 1].name;
                    this.filteredData.candidateReportDTOList.sort(function (a, b) {
                        for (var _i = 0; _i < a.averageRatings.length; _i++) {
                            if (a.averageRatings[_i].name ===
                                _this.filteredData.candidateReportDTOList[0].averageRatings[Math.abs(_this.orderVariable) - 1].name) {
                                if (a.averageRatings[_i].value < b.averageRatings[_i].value) {
                                    return 1;
                                }
                                else if (a.averageRatings[_i].value == b.averageRatings[_i].value) {
                                    return 0;
                                }
                                else {
                                    return -1;
                                }
                            }
                        }
                        return 0;
                    });
                }
            };
            MultipartyReportController.prototype.getColor = function (index) {
                var i = index % 4;
                switch (i) {
                    case 0:
                        return "{'background': 'report-primary-500-1.0'}";
                    case 1:
                        return "{'background': 'report-accent-500-1.0'}";
                    case 2:
                        return "{'background': 'report-warn-500-1.0'}";
                    case 3:
                        return "{'background': 'report-background-500-1.0'}";
                }
            };
            MultipartyReportController.prototype.filter = function () {
                var _this = this;
                if (this.search != "") {
                    this.filteredData.candidateReportDTOList = _.cloneDeep(_.filter(this.allData.candidateReportDTOList, function (obj) {
                        return (obj.candidateName
                            .toLowerCase()
                            .indexOf(_this.search.toLowerCase()) !== -1);
                    }));
                }
                else {
                    this.filteredData = _.cloneDeep(this.allData);
                }
            };
            MultipartyReportController.$inject = [
                "$http",
                "$mdToast",
                "$scope",
                "SessionService",
                "$stateParams",
                "$filter"
            ];
            return MultipartyReportController;
        }());
        app.controller("company.MultipartyReportController", MultipartyReportController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var OnewayReportController = /** @class */ (function () {
            function OnewayReportController($http, $mdToast, $scope, SessionService, leaderboardService, ratingsService, invitationsService, $state, $stateParams, $window, reportsService, CSVDownloadService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.leaderboardService = leaderboardService;
                this.ratingsService = ratingsService;
                this.invitationsService = invitationsService;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$window = $window;
                this.reportsService = reportsService;
                this.CSVDownloadService = CSVDownloadService;
                this.TAGS = ["Accept", "Reject", "Waitlist"];
                this.tagToEdit = null;
                this.selectedTag = null;
                this.filteredData = [];
                this.allData = [];
                this.competencies = [];
                this.reviewers = [];
                this.selectedReviewer = null;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b, _c, _d, competency, _e, _f, invitation, invitationCompetencies, _loop_3, _g, _h, competency, _j, _k, competency, _loop_4, this_1, _l, _m, reviewerRating, error_51;
                    return __generator(this, function (_o) {
                        switch (_o.label) {
                            case 0:
                                _o.trys.push([0, 3, , 4]);
                                _a = this;
                                return [4 /*yield*/, this.leaderboardService.getDetailsByInterview(this.interviewId)];
                            case 1:
                                _a.roleCompany = _o.sent();
                                _b = this;
                                return [4 /*yield*/, this.ratingsService.getLeaderBoardRatings(this.interviewId)];
                            case 2:
                                _b.allData = _o.sent();
                                this.allData.sort(function (a1, a2) { return (a1.reviewed === a2.reviewed) ? 0 : a1.reviewed ? -1 : 1; });
                                if (this.allData.length > 0) {
                                    for (_c = 0, _d = this.allData[0]['competencyRatingsDTOS']; _c < _d.length; _c++) {
                                        competency = _d[_c];
                                        this.competencies.push(competency.competency);
                                    }
                                    for (_e = 0, _f = this.allData; _e < _f.length; _e++) {
                                        invitation = _f[_e];
                                        invitation.competencyRatingsDTOS = invitation.competencyRatingsDTOS || [];
                                        invitationCompetencies = [];
                                        _loop_3 = function (competency) {
                                            var findCompetency = invitation.competencyRatingsDTOS.find(function (val) { return val.competency === competency; });
                                            if (!findCompetency) {
                                                invitationCompetencies.push({
                                                    competency: competency,
                                                    average: 0,
                                                    reviewersRatingDTOS: null
                                                });
                                            }
                                            else {
                                                invitationCompetencies.push(findCompetency);
                                            }
                                        };
                                        for (_g = 0, _h = this.competencies; _g < _h.length; _g++) {
                                            competency = _h[_g];
                                            _loop_3(competency);
                                        }
                                        invitation.competencyRatingsDTOS = invitationCompetencies;
                                        for (_j = 0, _k = invitation.competencyRatingsDTOS; _j < _k.length; _j++) {
                                            competency = _k[_j];
                                            if (competency.reviewersRatingDTOS) {
                                                _loop_4 = function (reviewerRating) {
                                                    if (this_1.reviewers.findIndex(function (val) { return val.reviewerId === reviewerRating.reviewerId; }) === -1) {
                                                        this_1.reviewers.push({
                                                            reviewerId: reviewerRating.reviewerId,
                                                            reviewer: reviewerRating.reviewer
                                                        });
                                                    }
                                                };
                                                this_1 = this;
                                                for (_l = 0, _m = competency.reviewersRatingDTOS; _l < _m.length; _l++) {
                                                    reviewerRating = _m[_l];
                                                    _loop_4(reviewerRating);
                                                }
                                            }
                                        }
                                    }
                                }
                                this.competencies.push('Total');
                                this.filteredData = _.cloneDeep(this.allData);
                                return [3 /*break*/, 4];
                            case 3:
                                error_51 = _o.sent();
                                Rollbar.error(error_51);
                                return [3 /*break*/, 4];
                            case 4:
                                ;
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.getFilterTags = function () { return __spreadArray(['All', 'None'], _this.TAGS); };
                this.sort = function () {
                    _this.filteredData.sort(function (a, b) {
                        var variable = _this.competencies[Math.abs(_this.orderVariable) - 1];
                        for (var _i = 0; _i < a.competencyRatingsDTOS.length; _i++) {
                            if (variable == 'Total') {
                                if (a.total < b.total) {
                                    return _this.orderVariable < 0 ? -1 : 1;
                                }
                                else if (a.total == b.total) {
                                    return 0;
                                }
                                else {
                                    return -1;
                                }
                            }
                            else {
                                if (a.competencyRatingsDTOS[_i].competency === variable) {
                                    if (a.competencyRatingsDTOS[_i].average < b.competencyRatingsDTOS[_i].average) {
                                        return _this.orderVariable < 0 ? -1 : 1;
                                    }
                                    else if (a.competencyRatingsDTOS[_i].average == b.competencyRatingsDTOS[_i].average) {
                                        return 0;
                                    }
                                    else {
                                        return -1;
                                    }
                                }
                            }
                        }
                        return 0;
                    });
                };
                this.filterByTag = function () {
                    _this.filteredData = _this.allData.filter(function (applicant) {
                        if (_this.selectedFilterTag === 'All')
                            return true;
                        var tagValue = _this.selectedFilterTag === 'None' ? null : _this.selectedFilterTag;
                        return applicant.tag === tagValue;
                    });
                };
                this.filterByReviewer = function () {
                    if (_this.selectedReviewer === 'All') {
                        _this.filteredData = _this.allData;
                    }
                    else {
                        _this.filteredData = _.cloneDeep(_this.allData.filter(function (applicant) { return applicant.reviewersAssigned.includes(_this.selectedReviewer); }));
                        _this.filteredData = _this.filteredData.map(function (applicant) {
                            var total = 0;
                            var reviewerFlag = true;
                            for (var _a = 0, _b = applicant.competencyRatingsDTOS; _a < _b.length; _a++) {
                                var competency = _b[_a];
                                if (competency.reviewersRatingDTOS) {
                                    var reviewerR = competency.reviewersRatingDTOS.find(function (val) { return val.reviewerId === _this.selectedReviewer; });
                                    if (reviewerR) {
                                        competency.average = reviewerR.rating;
                                        total += reviewerR.rating;
                                    }
                                    else {
                                        reviewerFlag = false;
                                        competency.average = 0;
                                    }
                                }
                            }
                            applicant.total = total;
                            if (applicant.reviewersCommentDTOS) {
                                var reviewerC = applicant.reviewersCommentDTOS.find(function (val) { return val.reviewerId === _this.selectedReviewer; });
                                if (reviewerC) {
                                    applicant.comments = reviewerC.comments;
                                    applicant.tag = reviewerC.tag;
                                }
                            }
                            else {
                                applicant.comments = '';
                                applicant.tag = null;
                            }
                            if (reviewerFlag)
                                return applicant;
                        });
                        _this.filteredData = _this.filteredData.filter(function (el) {
                            return el != null;
                        });
                    }
                };
                this.getTagClass = function (candidate) { return candidate.tag ? "tag " + candidate.tag : ''; };
                this.getTagValue = function (candidate) { return candidate.tag || '+ Add Decision'; };
                this.openCandidateDetails = function (invitationId) {
                    _this.$state.go("root.company.leaderboarddetails", { invitationId: invitationId, interviewId: _this.interviewId });
                };
                this.editTag = function (candidate) {
                    _this.tagToEdit = candidate.name;
                    _this.selectedTag = candidate.tag;
                };
                this.saveTag = function (candidate) { return __awaiter(_this, void 0, void 0, function () {
                    var error_52;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 2, , 3]);
                                return [4 /*yield*/, this.leaderboardService.setTag(candidate.invitationId, this.selectedTag)];
                            case 1:
                                _a.sent();
                                this.allData.find(function (data) { return candidate.invitationId === data.invitationId; }).tag = this.selectedTag;
                                this.filteredData.find(function (data) { return candidate.invitationId === data.invitationId; }).tag = this.selectedTag;
                                return [3 /*break*/, 3];
                            case 2:
                                error_52 = _a.sent();
                                Rollbar.error(error_52);
                                return [3 /*break*/, 3];
                            case 3:
                                this.tagToEdit = null;
                                this.selectedTag = null;
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.interviewId = this.$stateParams.interviewId;
            }
            OnewayReportController.prototype.filter = function () {
                var _this = this;
                if (this.search != '') {
                    this.filteredData = _.cloneDeep(_.filter(this.allData, function (obj) {
                        return obj.name.toLowerCase().indexOf(_this.search.toLowerCase()) !== -1;
                    }));
                }
                else {
                    this.filteredData = _.cloneDeep(this.allData);
                }
            };
            OnewayReportController.prototype.exportLeaderboard = function () {
                var _this = this;
                var csvData = [];
                var filterData = [];
                if (this.selectedReviewer && this.selectedReviewer !== 'All') {
                    filterData = _.cloneDeep(this.allData.filter(function (applicant) { return applicant.reviewersAssigned.includes(_this.selectedReviewer); }));
                }
                else {
                    filterData = this.allData;
                }
                for (var _a = 0, filterData_1 = filterData; _a < filterData_1.length; _a++) {
                    var candidate = filterData_1[_a];
                    var reviewersList = [];
                    for (var _b = 0, _c = candidate.competencyRatingsDTOS; _b < _c.length; _b++) {
                        var competency = _c[_b];
                        if (competency.reviewersRatingDTOS) {
                            var _loop_5 = function (reviewerRating) {
                                if (reviewersList.findIndex(function (val) { return val.reviewerId === reviewerRating.reviewerId; }) === -1) {
                                    if (this_2.selectedReviewer && this_2.selectedReviewer !== 'All') {
                                        if (this_2.selectedReviewer === reviewerRating.reviewerId) {
                                            reviewersList.push({
                                                reviewerId: reviewerRating.reviewerId,
                                                reviewer: reviewerRating.reviewer
                                            });
                                        }
                                    }
                                    else {
                                        reviewersList.push({
                                            reviewerId: reviewerRating.reviewerId,
                                            reviewer: reviewerRating.reviewer
                                        });
                                    }
                                }
                            };
                            var this_2 = this;
                            for (var _d = 0, _e = competency.reviewersRatingDTOS; _d < _e.length; _d++) {
                                var reviewerRating = _e[_d];
                                _loop_5(reviewerRating);
                            }
                        }
                    }
                    if (reviewersList.length === 0) {
                        var row = {
                            ApplicantId: candidate.applicantId,
                            ApplicantName: candidate.name,
                            Reviewer: '',
                            Recommendation: '',
                            Comments: '',
                            Total: 0,
                            Decision: candidate.tag ? candidate.tag : '',
                            'Date of Decision': candidate.decisionOn ? this.formatDate(new Date(candidate.decisionOn)) : '',
                            DecisionBy: candidate.decisionBy ? candidate.decisionBy : ''
                        };
                        for (var _f = 0, _g = candidate.competencyRatingsDTOS; _f < _g.length; _f++) {
                            var competency = _g[_f];
                            row[competency.competency] = 0;
                        }
                        csvData.push(row);
                    }
                    var _loop_6 = function (reviewer) {
                        var row = {
                            ApplicantId: candidate.applicantId,
                            ApplicantName: candidate.name,
                            Reviewer: '',
                            Recommendation: '',
                            Comments: '',
                            Total: 0,
                            Decision: candidate.tag ? candidate.tag : '',
                            'Date of Decision': candidate.decisionOn ? this_3.formatDate(new Date(candidate.decisionOn)) : '',
                            DecisionBy: candidate.decisionBy ? candidate.decisionBy : ''
                        };
                        row['Reviewer'] = reviewer.reviewer;
                        var total = 0;
                        for (var _j = 0, _k = candidate.competencyRatingsDTOS; _j < _k.length; _j++) {
                            var competency = _k[_j];
                            var reviewerR = competency.reviewersRatingDTOS ? competency.reviewersRatingDTOS.find(function (val) { return val.reviewerId === reviewer.reviewerId; }) : '';
                            if (reviewerR) {
                                row[competency.competency] = reviewerR.rating;
                                total += reviewerR.rating;
                            }
                            else {
                                row[competency.competency] = 0;
                            }
                        }
                        row['Total'] = total;
                        var reviewerC = candidate.reviewersCommentDTOS ? candidate.reviewersCommentDTOS.find(function (val) { return val.reviewerId === reviewer.reviewerId; }) : '';
                        if (reviewerC) {
                            row['Comments'] = reviewerC.comments;
                            row['Recommendation'] = reviewerC.tag || '';
                        }
                        csvData.push(row);
                    };
                    var this_3 = this;
                    for (var _h = 0, reviewersList_1 = reviewersList; _h < reviewersList_1.length; _h++) {
                        var reviewer = reviewersList_1[_h];
                        _loop_6(reviewer);
                    }
                }
                var headersArrayList = __spreadArray(__spreadArray(['ApplicantId', 'ApplicantName', 'Reviewer'], this.competencies), ['Recommendation', 'Comments', 'Decision', 'Date of Decision', 'DecisionBy']);
                this.CSVDownloadService.downloadFile(csvData, 'ReviewerComments', headersArrayList);
            };
            OnewayReportController.prototype.formatDate = function (dateObj) {
                var dd = dateObj.getDate().toString();
                var mm = (dateObj.getMonth() + 1).toString();
                var yyyy = dateObj.getFullYear();
                if (Number(dd) < 10) {
                    dd = '0' + dd;
                }
                if (Number(mm) < 10) {
                    mm = '0' + mm;
                }
                return dd + '/' + mm + '/' + yyyy;
            };
            OnewayReportController.prototype.exportSummaryLeaderboard = function () {
                var csvData = [];
                for (var _a = 0, _b = this.allData; _a < _b.length; _a++) {
                    var candidate = _b[_a];
                    var row = {
                        ApplicantId: candidate.applicantId,
                        ApplicantName: candidate.name,
                        Total: candidate.total,
                        Decision: candidate.tag ? candidate.tag : '',
                        'Date of Decision': candidate.decisionOn ? this.formatDate(new Date(candidate.decisionOn)) : '',
                        DecisionBy: candidate.decisionBy ? candidate.decisionBy : ''
                    };
                    for (var _c = 0, _d = candidate.competencyRatingsDTOS; _c < _d.length; _c++) {
                        var competency = _d[_c];
                        row[competency.competency] = competency.average;
                    }
                    csvData.push(row);
                }
                var headersArrayList = __spreadArray(__spreadArray(['ApplicantId', 'ApplicantName'], this.competencies), ['Decision', 'Date of Decision', 'DecisionBy']);
                this.CSVDownloadService.downloadFile(csvData, 'LeaderBoardSummary', headersArrayList);
            };
            OnewayReportController.$inject = [
                "$http", "$mdToast", "$scope", "SessionService", "company.leaderboardService",
                "company.ratingsService", "company.invitationsService", "$state", "$stateParams",
                "$window", "company.reportsService", "company.CSVService"
            ];
            return OnewayReportController;
        }());
        app.controller("company.OnewayReportController", OnewayReportController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var RatingDimensionsController = /** @class */ (function () {
            function RatingDimensionsController($http, $mdToast, $stateParams, $state, SessionService, $mdDialog) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.$state = $state;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.isFrozen = false;
                this.$onInit = function () { };
                this.$http.get("/company/rating-dimension").then(function (result) {
                    _this.isFrozen = result.data.frozen;
                    if (result.data.ratingDimensions.length > 0) {
                        _this.dimensions = result.data.ratingDimensions;
                    }
                });
            }
            RatingDimensionsController.prototype.save = function () {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure?")
                    .textContent("Changing the values will change the ratings dimensions for all previous ratings dimensions.")
                    .ok("Save")
                    .cancel("Cancel")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/company/rating-dimension/", _this.dimensions).then(function (value) {
                        _this.$state.go("root.company.dashboard");
                    }, function (error) {
                        _this.$mdToast.showSimple(error.name + " " + error.message);
                    });
                }, function () { });
            };
            RatingDimensionsController.$inject = ["$http", "$mdToast", "$stateParams", "$state", "SessionService", "$mdDialog"];
            return RatingDimensionsController;
        }());
        app.controller("company.RatingDimensionsController", RatingDimensionsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var ReattemptsReportController = /** @class */ (function () {
            function ReattemptsReportController($http, $mdToast, session, CSVDownloadService, $state, $mdDialog, $stateParams) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.CSVDownloadService = CSVDownloadService;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$stateParams = $stateParams;
                this.orderVariable = "-createdAt";
                this.selectedPageNumber = 1;
                this.pageOptions = [10, 20, 50, 100];
                this.selectedSearchCriteria = "ALL";
                this.searchText = "";
                this.disableSearch = false;
                this.totalResults = 0;
                this.showReportCrumbs = false;
                this.startDateSelected = null;
                this.endDateSelected = null;
                this.maxDate = new Date();
                this.getReadableDate = function (date) { return new Date(date).toLocaleDateString('en-GB', {
                    day: 'numeric', month: 'short', year: 'numeric'
                }).replace(/ /g, '-'); };
                this.$onInit = function () { };
                if (this.$stateParams.reportOrigin != null || angular.isDefined(this.$stateParams.reportOrigin)) {
                    this.showReportCrumbs = true;
                }
                this.currentPage = 0;
                this.pageSize = 10;
                this.list();
            }
            ReattemptsReportController.prototype.fetchOverview = function () {
                this.$state.go("root.company.dynamic-report", {
                    startDate: this.formatDate(this.startDateSelected),
                    endDate: this.formatDate(this.endDateSelected),
                    reportType: 'Reattempt Requests'
                });
            };
            ReattemptsReportController.prototype.formatDate = function (dateObj) {
                var dd = dateObj.getDate().toString();
                var mm = (dateObj.getMonth() + 1).toString();
                var yyyy = dateObj.getFullYear();
                if (Number(dd) < 10) {
                    dd = '0' + dd;
                }
                if (Number(mm) < 10) {
                    mm = '0' + mm;
                }
                return yyyy + '-' + mm + '-' + dd;
            };
            ReattemptsReportController.prototype.list = function () {
                var _this = this;
                var params = { page: this.currentPage, pagesize: this.pageSize };
                this.$http.get("/company/invitations/reattempt-requests/report", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                    _this.lastCalledSearch = 'list';
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReattemptsReportController.prototype.previousPage = function () {
                var _this = this;
                this.currentPage = this.currentPage - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/invitations/reattempt-requests/report", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReattemptsReportController.prototype.nextPage = function () {
                var _this = this;
                this.currentPage = this.currentPage + 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/invitations/reattempt-requests/report", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReattemptsReportController.prototype.reloadPage = function () {
                var _this = this;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/invitations/reattempt-requests/report", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReattemptsReportController.prototype.getPagesArray = function (num) {
                var array = [];
                for (var i = 1; i <= num; i++) {
                    array.push(i);
                }
                return array;
            };
            ReattemptsReportController.prototype.selectedPage = function () {
                var _this = this;
                this.currentPage = this.selectedPageNumber - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.selectedPageNumber - 1, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/invitations/reattempt-requests/report", { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReattemptsReportController.prototype.resultsPerPageChanged = function () {
                this.list();
            };
            ReattemptsReportController.prototype.goHome = function () {
                this.$state.go("root.company.home");
            };
            ReattemptsReportController.prototype.downloadResponse = function () {
                var headersArrayList = ['applicantId', 'applicantName', 'applicantEmail', 'interviewName', 'comment', 'status', 'decisionBy', 'decisionOn'];
                if (this.allReports) {
                    this.CSVDownloadService.downloadFile(this.allReports, 'ReattemptRequestReport', headersArrayList);
                }
            };
            ReattemptsReportController.$inject = ["$http", "$mdToast", "SessionService", "company.CSVService", "$state", "$mdDialog", "$stateParams"];
            return ReattemptsReportController;
        }());
        app.controller("company.ReattemptsReportController", ReattemptsReportController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        'use strict';
        var app = Qna.getModule();
        var RejectedController = /** @class */ (function () {
            function RejectedController($http, $scope, $window, $mdToast, $state, $stateParams, SessionService, $mdDialog, $timeout, interviewsService, invitationsService, $mdMenu, roleConstants, candidateInvitationService, reportsService) {
                var _this = this;
                this.$http = $http;
                this.$scope = $scope;
                this.$window = $window;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.interviewsService = interviewsService;
                this.invitationsService = invitationsService;
                this.$mdMenu = $mdMenu;
                this.roleConstants = roleConstants;
                this.candidateInvitationService = candidateInvitationService;
                this.reportsService = reportsService;
                this.selectedInvitations = [];
                this.selectedInvitationIds = [];
                this.search = "";
                this.orderVariable = "-creationDate";
                this.filterStatus = "";
                this.reviewers = [];
                this.selectedReviewers = [];
                this.teamMembers = [];
                this.assignedCandidateReviewers = [];
                this.selectedIndexes = [];
                this.showNonAssigned = false;
                this.showSelectReviewers = false;
                this.showExtendDeadline = false;
                this.selectedPageNumber = 1;
                this.pageOptions = [10, 20, 50, 100];
                this.selectedSearchCriteria = "ALL";
                this.searchText = "";
                this.disableSearch = false;
                this.totalResults = 0;
                this.isOpen = false;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                this.selectedInvitations = [];
                                _a = this;
                                return [4 /*yield*/, this.interviewsService.getInterview(this.interviewId)];
                            case 1:
                                _a.interview = _b.sent();
                                return [4 /*yield*/, this.list()];
                            case 2:
                                _b.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.listNoPage = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _i, _b, invitation, error_53;
                    var _this = this;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                _c.trys.push([0, 2, , 3]);
                                _a = this;
                                return [4 /*yield*/, this.invitationsService.getInterviewInvitations(this.interviewId)];
                            case 1:
                                _a.allInvitations = _c.sent();
                                for (_i = 0, _b = this.allInvitations; _i < _b.length; _i++) {
                                    invitation = _b[_i];
                                    invitation.status = this.getInvitationStatus(invitation);
                                    invitation.reviewers = invitation.reviewers
                                        .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                                }
                                this.invitations = JSON.parse(JSON.stringify(this.allInvitations));
                                return [3 /*break*/, 3];
                            case 2:
                                error_53 = _c.sent();
                                this.showToastMessage('There was an issue retrieving the interview invitations');
                                Rollbar.error(error_53);
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.getInvitationStatus = function (invitation) {
                    if (invitation.completed)
                        return 'Interview Recorded';
                    if (invitation.hasAttemptedButNotCompletedRecording)
                        return 'Incomplete Recording Attempt';
                    return 'Pending Recording';
                };
                this.getStatusColor = function (invitation) {
                    return invitation.status === 'Interview Recorded' ?
                        'green' : invitation.status === 'Pending Recording' ? 'inherit' : 'red';
                };
                this.showToastMessage = function (message) { return _this.$mdToast.show(_this.$mdToast
                    .simple()
                    .textContent(message)
                    .position("top left")
                    .hideDelay(10000)
                    .theme("toasttheme")); };
                this.getReadableDate = function (date) { return new Date(date).toLocaleDateString('en-GB', {
                    day: '2-digit', month: '2-digit', year: 'numeric', timeZone: 'UTC'
                }); }; //.replace(/ /g, '-');
                this.statuses = [];
                this.statuses.push({ name: "Interview Recorded", selected: true }, { name: "Incomplete Recording Attempt", selected: true }, { name: "Pending Recording", selected: true });
                this.interviewId = $stateParams.interviewId;
                this.showInviteCandidate = false;
                if (!JSON.parse(sessionStorage.getItem("system_modules")).hasOwnProperty("Applicant ID")) {
                    this.applicantId = "None";
                }
                this.currentPage = 0;
                this.totalElements = 0;
                this.pageSize = 10;
            }
            RejectedController.prototype.list = function () {
                var _this = this;
                this.$http.get("/company/invitations/rejected/" + this.interviewId, { params: { page: this.currentPage, pagesize: this.pageSize } }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    _this.lastCalledSearch = 'list';
                    _this.totalResults = result.data.totalElements;
                    for (var _i = 0, _a = _this.invitations; _i < _a.length; _i++) {
                        var invitation = _a[_i];
                        invitation.status = _this.getInvitationStatus(invitation);
                        invitation.reviewers = invitation.reviewers
                            .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                    }
                }, function (error) {
                    _this.showToastMessage('There was an issue retrieving the interview invitations');
                    Rollbar.error(error);
                });
            };
            RejectedController.prototype.previousPage = function () {
                var _this = this;
                this.currentPage = this.currentPage - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/invitations/rejected/" + this.interviewId, { params: params }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    for (var _i = 0, _a = _this.invitations; _i < _a.length; _i++) {
                        var invitation = _a[_i];
                        invitation.status = _this.getInvitationStatus(invitation);
                        invitation.reviewers = invitation.reviewers
                            .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            RejectedController.prototype.nextPage = function () {
                var _this = this;
                this.currentPage = this.currentPage + 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/invitations/rejected/" + this.interviewId, { params: params }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    for (var _i = 0, _a = _this.invitations; _i < _a.length; _i++) {
                        var invitation = _a[_i];
                        invitation.status = _this.getInvitationStatus(invitation);
                        invitation.reviewers = invitation.reviewers
                            .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            RejectedController.prototype.reloadPage = function () {
                var _this = this;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/invitations/rejected/" + this.interviewId, { params: params }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    for (var _i = 0, _a = _this.invitations; _i < _a.length; _i++) {
                        var invitation = _a[_i];
                        invitation.status = _this.getInvitationStatus(invitation);
                        invitation.reviewers = invitation.reviewers
                            .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            RejectedController.prototype.getPagesArray = function (num) {
                var array = [];
                for (var i = 1; i <= num; i++) {
                    array.push(i);
                }
                return array;
            };
            RejectedController.prototype.selectedPage = function () {
                var _this = this;
                this.currentPage = this.selectedPageNumber - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.selectedPageNumber - 1, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/invitations/rejected/" + this.interviewId, { params: params }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    for (var _i = 0, _a = _this.invitations; _i < _a.length; _i++) {
                        var invitation = _a[_i];
                        invitation.status = _this.getInvitationStatus(invitation);
                        invitation.reviewers = invitation.reviewers
                            .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            RejectedController.prototype.resultsPerPageChanged = function () {
                this.list();
            };
            RejectedController.prototype.filter = function () {
                var _this = this;
                if (this.search != "") {
                    this.invitations = _.filter(this.allInvitations, function (obj) {
                        return (obj.candidatename
                            .toLowerCase()
                            .indexOf(_this.search.toLowerCase()) !== -1 ||
                            obj.candidateemail
                                .toLowerCase()
                                .indexOf(_this.search.toLowerCase()) !== -1);
                    });
                }
                else {
                    this.invitations = this.allInvitations;
                }
            };
            RejectedController.prototype.sortResultsAscending = function () {
                this.orderVariable = "creationDate";
            };
            RejectedController.prototype.sortResultsDescending = function () {
                this.orderVariable = "-creationDate";
            };
            RejectedController.prototype.clearSearch = function () {
                this.disableSearch = false;
                this.searchText = "";
                this.selectedSearchCriteria = "ALL";
                this.currentPage = 0;
                this.list();
            };
            RejectedController.prototype.searchInvitations = function () {
                var _this = this;
                this.currentPage = 0;
                this.disableSearch = true;
                this.$http.get("/company/invitations/rejected/" + this.interviewId, { params: { page: this.currentPage, pagesize: this.pageSize, search: this.selectedSearchCriteria, searchtext: this.searchText } }).then(function (result) {
                    var recordingList = result.data.invitationDTOS;
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.totalElements = result.data.totalElements;
                    _this.lastCalledSearch = 'search';
                    _this.totalResults = result.data.totalElements;
                    for (var _i = 0, _a = _this.invitations; _i < _a.length; _i++) {
                        var invitation = _a[_i];
                        invitation.status = _this.getInvitationStatus(invitation);
                        invitation.reviewers = invitation.reviewers
                            .filter(function (reviewer) { return reviewer.role === _this.roleConstants.identifiers.REVIEWER; });
                    }
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            RejectedController.prototype.copyToClipBoard = function () {
                var element = document.getElementById("unique-link");
                element.select();
                document.execCommand("Copy");
                this.$mdToast.show(this.$mdToast
                    .simple()
                    .textContent("Copied to Clipboard")
                    .hideDelay(10000)
                    .position("top left")
                    .theme("toasttheme"));
            };
            RejectedController.prototype.goBackToPreviousPage = function () {
                this.$window.history.back();
            };
            RejectedController.$inject = [
                "$http",
                "$scope",
                "$window",
                "$mdToast",
                "$state",
                "$stateParams",
                "SessionService",
                "$mdDialog",
                "$timeout",
                "company.interviewsService",
                "company.invitationsService",
                "$mdMenu",
                "roleConstants",
                "candidate.invitationsService",
                "company.reportsService"
            ];
            return RejectedController;
        }());
        app.controller("company.RejectedController", RejectedController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var ResetPasswordController = /** @class */ (function () {
            function ResetPasswordController($http, $mdToast, session, $state, $stateParams) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$onInit = function () { };
                this.token = this.$stateParams.token;
                this.code = "";
            }
            ResetPasswordController.prototype.resetPassword = function () {
                var _this = this;
                var rpDTO = { token: this.token, newPassword: this.confirmPassword };
                this.$http.post("/company/password/reset-password", rpDTO).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Password Reset Successfully")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.$state.go("root.company.home", {}, {
                        reload: true
                    });
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Password Reset Failed")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.$state.go("root.company.home", {}, {
                        reload: true
                    });
                });
            };
            ResetPasswordController.$inject = ["$http", "$mdToast", "SessionService", "$state", "$stateParams"];
            return ResetPasswordController;
        }());
        app.controller("company.ResetPasswordController", ResetPasswordController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var moment;
        var ReviewerCommentsController = /** @class */ (function () {
            function ReviewerCommentsController($http, $scope, SessionService, $state, $stateParams, invitationsService, CSVDownloadService) {
                var _this = this;
                this.$http = $http;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.invitationsService = invitationsService;
                this.CSVDownloadService = CSVDownloadService;
                this.reviews = [];
                this.response = [];
                this.interviews = [];
                this.selectedInterview = null;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var reviews, finalData, _loop_7, this_4, _i, _a, review;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0: return [4 /*yield*/, this.$http.get("/company/ratings/get-reviewer-ratings/" + this.reviewerId + "/")];
                            case 1:
                                reviews = (_b.sent()).data;
                                this.response = JSON.parse(JSON.stringify(reviews));
                                finalData = [];
                                _loop_7 = function (review) {
                                    if (this_4.interviewId !== 'all' && review.interviewId !== this_4.interviewId) {
                                        return "continue";
                                    }
                                    var interview = finalData.find(function (val) { return val.interviewName === review.interviewName; });
                                    if (!this_4.interviews.find(function (val) { return val.interviewName === review.interviewName; })) {
                                        this_4.interviews.push({
                                            interviewName: review.interviewName,
                                            interviewId: review.interviewId,
                                        });
                                    }
                                };
                                this_4 = this;
                                for (_i = 0, _a = this.response; _i < _a.length; _i++) {
                                    review = _a[_i];
                                    _loop_7(review);
                                }
                                this.selectedInterview = this.interviewId;
                                this.filter();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.getTagClass = function (review) { return review.tag ? "tag " + review.tag : ''; };
                this.reviewerId = $stateParams.reviewerId;
                this.interviewId = $stateParams.interviewId;
            }
            ReviewerCommentsController.prototype.back = function () {
                window.history.back();
            };
            ReviewerCommentsController.prototype.filter = function () {
                console.log({ selectedInterview: this.selectedInterview });
                var finalData = [];
                var _loop_8 = function (review) {
                    if (this_5.selectedInterview !== 'all' && review.interviewId !== this_5.selectedInterview) {
                        return "continue";
                    }
                    var interview = finalData.find(function (val) { return val.interviewName === review.interviewName; });
                    var invitation = {
                        name: review.name,
                        applicantId: review.applicantId,
                        competencies: review.competencyRatingDTOS,
                        completed: review.completed,
                        reviewed: review.reviewed,
                        comments: review.comments,
                        tag: review.tag
                    };
                    if (!interview) {
                        finalData.push({
                            interviewName: review.interviewName,
                            interviewType: review.interviewType,
                            invitations: [invitation]
                        });
                    }
                    else {
                        interview.invitations.push(invitation);
                    }
                };
                var this_5 = this;
                for (var _i = 0, _a = this.response; _i < _a.length; _i++) {
                    var review = _a[_i];
                    _loop_8(review);
                }
                for (var _b = 0, finalData_1 = finalData; _b < finalData_1.length; _b++) {
                    var data = finalData_1[_b];
                    data.invitations.sort(function (a1, a2) { return (a1.reviewed === a2.reviewed) ? 0 : a1.reviewed ? -1 : 1; });
                }
                this.reviews = finalData;
            };
            ReviewerCommentsController.prototype.downloadResponse = function () {
                var csvData = [];
                for (var _i = 0, _a = this.response; _i < _a.length; _i++) {
                    var review = _a[_i];
                    if (this.selectedInterview !== 'all' && review.interviewId !== this.selectedInterview) {
                        continue;
                    }
                    var row = {
                        InterviewName: review.interviewName,
                        InterviewType: review.interviewType,
                        ApplicantName: review.name,
                        ApplicantId: review.applicantId,
                        RecordingCompleted: review.completed ? 'Y' : 'N',
                        Reviewed: review.reviewed ? 'Y' : 'N',
                        Competency: '',
                        Recommendation: review.tag ? review.tag : '',
                        Comments: review.comments
                    };
                    var competencyData = '';
                    for (var _b = 0, _c = review.competencyRatingDTOS; _b < _c.length; _b++) {
                        var competency = _c[_b];
                        competencyData += '\n' + competency.competency + ' - ' + competency.rating;
                    }
                    row['Competency'] = competencyData.substr(1);
                    csvData.push(row);
                }
                var headersArrayList = ['InterviewName', 'InterviewType', 'ApplicantName', 'ApplicantId', 'RecordingCompleted', 'Reviewed', 'Competency', 'Recommendation', 'Comments'];
                this.CSVDownloadService.downloadFile(csvData, 'ReviewerComments', headersArrayList);
            };
            ReviewerCommentsController.prototype.updateDom = function () { if (!this.$scope.$$phase)
                this.$scope.$apply(); };
            ReviewerCommentsController.$inject = ["$http", "$scope", "SessionService", "$state", "$stateParams", "candidate.invitationsService", "company.CSVService"];
            return ReviewerCommentsController;
        }());
        app.controller("company.ReviewerCommentsController", ReviewerCommentsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var ReviewersController = /** @class */ (function () {
            function ReviewersController($http, $mdToast, $stateParams, SessionService, $mdDialog, CompanyEmployeesService, CompanyGroupsService, roleConstants) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.CompanyEmployeesService = CompanyEmployeesService;
                this.CompanyGroupsService = CompanyGroupsService;
                this.roleConstants = roleConstants;
                this.search = "";
                this.roles = [
                    {
                        label: this.roleConstants.names.SUPER_ADMIN,
                        value: this.roleConstants.identifiers.SUPER_ADMIN,
                        userCanInvite: this.SessionService.isRoleSuperAdmin()
                    },
                    {
                        label: this.roleConstants.names.ADMIN,
                        value: this.roleConstants.identifiers.ADMIN,
                        userCanInvite: this.SessionService.hasAdminPermissions()
                    },
                    {
                        label: this.roleConstants.names.REVIEWER,
                        value: this.roleConstants.identifiers.REVIEWER,
                        userCanInvite: this.SessionService.hasAdminPermissions()
                    }
                ];
                this.sortableFields = [
                    {
                        label: 'Role',
                        directions: [
                            { label: 'All', value: '' },
                            { label: this.roleConstants.names.SUPER_ADMIN, value: '-superAdmin' },
                            { label: this.roleConstants.names.ADMIN, value: '-admin' },
                            { label: this.roleConstants.names.REVIEWER, value: '-reviewer' }
                        ]
                    }
                ];
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position('top left')
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.resetInviteUserData = function () {
                    _this.name = null;
                    _this.email = null;
                    _this.role = null;
                };
                this.filter = function (employee) { return _this.search == '' ? true : employee.name.toLowerCase().includes(_this.search.toLowerCase()); };
                this.filterGroups = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (!(this.groupSearch != null)) return [3 /*break*/, 2];
                                return [4 /*yield*/, this.CompanyGroupsService.searchGroups(this.groupSearch)];
                            case 1:
                                _a = _b.sent();
                                return [3 /*break*/, 4];
                            case 2: return [4 /*yield*/, this.CompanyGroupsService.getGroups()];
                            case 3:
                                _a = _b.sent();
                                _b.label = 4;
                            case 4: return [2 /*return*/, _a];
                        }
                    });
                }); };
                this.canCreateUser = function (createForm) { return createForm.$valid && _this.role != null; };
                this.getAvailableRoles = function () { return _this.roles.filter(function (role) { return role.userCanInvite; }); };
                this.getRole = function (employee) { return employee.superAdmin ? 'SuperAdmin' : employee.admin ? 'Admin' : 'Reviewer'; };
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _a = this;
                                return [4 /*yield*/, this.CompanyGroupsService.getGroups()];
                            case 1:
                                _a.groups = _b.sent();
                                this.showInviteTeamMember = false;
                                this.list();
                                return [2 /*return*/];
                        }
                    });
                }); };
            }
            ReviewersController.prototype.toggleInvite = function () {
                this.showInviteTeamMember = !this.showInviteTeamMember;
            };
            ReviewersController.prototype.list = function () {
                var _this = this;
                this.$http.get("/company/employees/company/")
                    .then(function (result) {
                    _this.roleCompany = result.data;
                });
                this.$http.get("/company/employees/reviewers/")
                    .then(function (result) {
                    _this.allEmployees = result.data;
                    _this.employeeList = _this.allEmployees;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReviewersController.prototype.reinvite = function (employeeid) {
                var _this = this;
                this.$http.get("/company/employees/reinvite/" + employeeid)
                    .then(function (result) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Invitation Sent Again to the Registered email id")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReviewersController.prototype.uninvite = function (employee) {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure?")
                    .textContent("The team member will be removed and won't be able to login.This is an irreversible action")
                    .ok("REMOVE")
                    .cancel("CANCEL")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.delete("/company/employees/delete/" + employee.employeeid, {})
                        .then(function (result) {
                        var i = _this.employeeList.indexOf(employee);
                        _this.employeeList.splice(i, 1);
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Team Member Removed")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    }, function (error) {
                        _this.$mdToast.showSimple("Some error has happened. See console for details");
                        Rollbar.error(error);
                    });
                }, function () { });
            };
            ReviewersController.prototype.create = function () {
                var _this = this;
                var employeeData = { name: this.name, email: this.email, role: this.role };
                this.CompanyEmployeesService.inviteEmployee(employeeData)
                    .then(function (result) { return __awaiter(_this, void 0, void 0, function () {
                    var error_54;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (this.employeeList) {
                                    this.allEmployees = __spreadArray(__spreadArray([], this.allEmployees), [result.data]);
                                    this.employeeList = this.allEmployees;
                                    this.resetInviteUserData();
                                }
                                if (!this.selectedGroup) return [3 /*break*/, 4];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.CompanyGroupsService.addUsersToGroup(this.selectedGroup.id, [result.data.employeeid])];
                            case 2:
                                _a.sent();
                                return [3 /*break*/, 4];
                            case 3:
                                error_54 = _a.sent();
                                this.showToastMessage('There was an issue adding the user to the group');
                                Rollbar.error(error_54);
                                return [3 /*break*/, 4];
                            case 4:
                                this.showToastMessage("Invitation Sent");
                                this.showInviteTeamMember = false;
                                return [2 /*return*/];
                        }
                    });
                }); }, function (error) {
                    _this.showInviteTeamMember = false;
                    _this.resetInviteUserData();
                    _this.showToastMessage(error.data.message);
                    Rollbar.error(error);
                });
            };
            ReviewersController.$inject = ["$http", "$mdToast", "$stateParams", "SessionService", "$mdDialog", "company.employeesService", "company.groupsService", "roleConstants"];
            return ReviewersController;
        }());
        app.controller("company.ReviewersController", ReviewersController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var SearchController = /** @class */ (function () {
            function SearchController($http, $mdToast, session, $state, $mdDialog, hopscotchService, $stateParams) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.hopscotchService = hopscotchService;
                this.$stateParams = $stateParams;
                this.showSearchResults = false;
                this.seachResultCount = 0;
                this.orderVariable = "-creationDate";
                this.selectedPageNumber = 1;
                this.pageOptions = [10, 20, 50, 100];
                this.setEditable = function (invitation) {
                    invitation.isEdit = true;
                    _this.editableExpiry = new Date(invitation.invitationExpiry);
                };
                this.openCandidateRating = function (invitation) {
                    _this.$state.go("root.company.candidatedetails", {
                        interviewId: invitation.interviewid,
                        applicationId: invitation.guid
                    }, { reload: true });
                };
                this.getReadableDate = function (date) { return new Date(date).toLocaleDateString('en-GB', {
                    day: 'numeric', month: 'short', year: 'numeric', timeZone: 'UTC'
                }).replace(/ /g, '-'); };
                this.$onInit = function () { };
                this.currentPage = 0;
                this.pageSize = 10;
            }
            SearchController.prototype.searchNoPage = function (searchParam) {
                var _this = this;
                this.$http.get("/company/invitations/search/" + this.search_param).then(function (result) {
                    _this.allInvitations = result.data;
                    for (var _i = 0, _a = _this.allInvitations; _i < _a.length; _i++) {
                        var inv = _a[_i];
                        if (inv.hasrecording) {
                            inv.status = "Interview Recorded";
                        }
                        else if (inv.hasAttemptedButNotCompletedRecording) {
                            inv.status = "Incomplete Recording Attempt";
                        }
                        else {
                            inv.status = "Pending Recording";
                        }
                    }
                    _this.searchResults = _this.allInvitations;
                    _this.seachResultCount = _this.allInvitations.length;
                    _this.showSearchResults = true;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            SearchController.prototype.search = function () {
                var _this = this;
                this.$http.get("/company/invitations/search/paged/" + this.search_param, { params: { page: this.currentPage, pagesize: this.pageSize } }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.lastCalledSearch = 'list';
                    _this.totalResults = result.data.totalElements;
                    for (var _i = 0, _a = _this.allInvitations; _i < _a.length; _i++) {
                        var inv = _a[_i];
                        if (inv.hasrecording) {
                            inv.status = "Interview Recorded";
                        }
                        else if (inv.hasAttemptedButNotCompletedRecording) {
                            inv.status = "Incomplete Recording Attempt";
                        }
                        else {
                            inv.status = "Pending Recording";
                        }
                    }
                    _this.searchResults = _this.allInvitations;
                    _this.seachResultCount = _this.allInvitations.length;
                    _this.showSearchResults = true;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            SearchController.prototype.previousPage = function () {
                var _this = this;
                this.currentPage = this.currentPage - 1;
                var params = { page: this.currentPage, pagesize: this.pageSize };
                this.$http.get("/company/invitations/search/paged/" + this.search_param, { params: params }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                    for (var _i = 0, _a = _this.allInvitations; _i < _a.length; _i++) {
                        var inv = _a[_i];
                        if (inv.hasrecording) {
                            inv.status = "Interview Recorded";
                        }
                        else if (inv.hasAttemptedButNotCompletedRecording) {
                            inv.status = "Incomplete Recording Attempt";
                        }
                        else {
                            inv.status = "Pending Recording";
                        }
                    }
                    _this.searchResults = _this.allInvitations;
                    _this.seachResultCount = _this.allInvitations.length;
                    _this.showSearchResults = true;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            SearchController.prototype.nextPage = function () {
                var _this = this;
                this.currentPage = this.currentPage + 1;
                var params = { page: this.currentPage, pagesize: this.pageSize };
                this.$http.get("/company/invitations/search/paged/" + this.search_param, { params: params }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                    for (var _i = 0, _a = _this.allInvitations; _i < _a.length; _i++) {
                        var inv = _a[_i];
                        if (inv.hasrecording) {
                            inv.status = "Interview Recorded";
                        }
                        else if (inv.hasAttemptedButNotCompletedRecording) {
                            inv.status = "Incomplete Recording Attempt";
                        }
                        else {
                            inv.status = "Pending Recording";
                        }
                    }
                    _this.searchResults = _this.allInvitations;
                    _this.seachResultCount = _this.allInvitations.length;
                    _this.showSearchResults = true;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            SearchController.prototype.reloadPage = function () {
                var _this = this;
                var params = { page: this.currentPage, pagesize: this.pageSize };
                this.$http.get("/company/invitations/search/paged/" + this.search_param, { params: params }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                    for (var _i = 0, _a = _this.allInvitations; _i < _a.length; _i++) {
                        var inv = _a[_i];
                        if (inv.hasrecording) {
                            inv.status = "Interview Recorded";
                        }
                        else if (inv.hasAttemptedButNotCompletedRecording) {
                            inv.status = "Incomplete Recording Attempt";
                        }
                        else {
                            inv.status = "Pending Recording";
                        }
                    }
                    _this.searchResults = _this.allInvitations;
                    _this.seachResultCount = _this.allInvitations.length;
                    _this.showSearchResults = true;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            SearchController.prototype.getPagesArray = function (num) {
                var array = [];
                for (var i = 1; i <= num; i++) {
                    array.push(i);
                }
                return array;
            };
            SearchController.prototype.selectedPage = function () {
                var _this = this;
                this.currentPage = this.selectedPageNumber - 1;
                this.$http.get("/company/invitations/search/paged/" + this.search_param, { params: { page: this.selectedPageNumber - 1, pagesize: this.pageSize } }).then(function (result) {
                    _this.invitations = result.data.invitationDTOS;
                    _this.allInvitations = __spreadArray([], result.data.invitationDTOS);
                    _this.totalPages = result.data.totalPages;
                    for (var _i = 0, _a = _this.allInvitations; _i < _a.length; _i++) {
                        var inv = _a[_i];
                        if (inv.hasrecording) {
                            inv.status = "Interview Recorded";
                        }
                        else if (inv.hasAttemptedButNotCompletedRecording) {
                            inv.status = "Incomplete Recording Attempt";
                        }
                        else {
                            inv.status = "Pending Recording";
                        }
                    }
                    _this.searchResults = _this.allInvitations;
                    _this.seachResultCount = _this.allInvitations.length;
                    _this.showSearchResults = true;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            SearchController.prototype.reinvite = function (invitationId) {
                var _this = this;
                this.$http.put("/company/invitations/reinvite/" + invitationId, {}).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Invitation Sent Again")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            SearchController.prototype.uninvite = function (invitation) {
                var _this = this;
                var request = this.$mdDialog
                    .confirm()
                    .title("Are you sure?")
                    .textContent("The invitation will be deleted and the candidate won't be able to record the interview")
                    .ok("UNINVITE")
                    .cancel("CANCEL")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.delete("/company/invitations/" + invitation.guid, {}).then(function (result) {
                        var i = _this.searchResults.indexOf(invitation);
                        _this.searchResults.splice(i, 1);
                        _this.$mdToast.show(_this.$mdToast
                            .simple()
                            .textContent("Invitation Deleted")
                            .hideDelay(10000)
                            .position("top left")
                            .theme("toasttheme"));
                    }, function (error) {
                        _this.$mdToast.show(_this.$mdToast
                            .simple()
                            .textContent(error.data.message)
                            .hideDelay(10000)
                            .position("top left")
                            .theme("toasttheme"));
                        Rollbar.error(error);
                    });
                }, function () { });
            };
            SearchController.prototype.edit = function (invitation) {
                var _this = this;
                this.$http
                    .put("/company/invitations/", {
                    guid: invitation.guid,
                    candidatename: invitation.candidatename,
                    candidateemail: invitation.candidateemail,
                    invitationExpiry: this.editableExpiry
                })
                    .then(function (result) {
                    invitation.isEdit = false;
                    invitation.invitationcode = result.data.invitationcode;
                    invitation.invitationExpiry = result.data.invitationExpiry;
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Invitation Edited Successfully")
                        .hideDelay(10000)
                        .position("top left")
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(error.data.message)
                        .hideDelay(10000)
                        .position("top left")
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            SearchController.prototype.cancelEdit = function (invitation) {
                invitation.isEdit = false;
            };
            SearchController.prototype.refresh = function () {
                window.location.reload();
            };
            SearchController.$inject = ["$http", "$mdToast", "SessionService", "$state", "$mdDialog", "HopscotchService", "$stateParams"];
            return SearchController;
        }());
        app.controller("company.SearchController", SearchController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var SingleInterviewReportsController = /** @class */ (function () {
            function SingleInterviewReportsController($state, $stateParams, session, $window, reportsService, CSVDownloadService) {
                var _this = this;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.session = session;
                this.$window = $window;
                this.reportsService = reportsService;
                this.CSVDownloadService = CSVDownloadService;
                this.showReportCrumbs = false;
                this.showList = false;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, sumHead, takeOuts, createdData, myChart, myChart;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _a = this;
                                return [4 /*yield*/, this.reportsService.getSingleInterviewReport(this.interviewId)];
                            case 1:
                                _a.report = _b.sent();
                                sumHead = Object.keys(this.report.interview);
                                takeOuts = ["guid", "archived", "hasQuestions", "hasCandidates", "hasRecordings"];
                                takeOuts.forEach(function (element) {
                                    sumHead.splice(sumHead.indexOf(element), 1);
                                });
                                this.summaryHeader = sumHead;
                                this.invitationsHeader = this.report.invitationsList.length > 0 ? Object.keys(this.report.invitationsList[0]) : [];
                                this.reattemptHeader = this.report.reattemptList.length > 0 ? Object.keys(this.report.reattemptList[0]) : [];
                                this.flaggedHeader = this.report.flaggedList.length > 0 ? Object.keys(this.report.flaggedList[0]) : [];
                                this.flowedHeader = this.report.flowedList.length > 0 ? Object.keys(this.report.flowedList[0]) : [];
                                if (this.session.isRoleAdmin()) {
                                    this.flowedHeader.splice(this.flowedHeader.indexOf("fromInterview"), 1); //remove from
                                }
                                createdData = [this.report.interview.invitations, this.report.interview.incompleteAttempts, this.report.interview.reattemptRequests, this.report.interview.flagged, this.report.interview.awaitingFeedback, this.report.interview.deleted];
                                myChart = new Chart("myChart", {
                                    type: 'doughnut',
                                    data: {
                                        labels: ['Invitations', 'Incomplete Attempts', 'Reattempt Requests', 'Flagged', 'Awaiting Feedback', 'Deleted'],
                                        datasets: [{
                                                label: 'Invitations for ' + this.report.interview.name + '',
                                                data: createdData,
                                                backgroundColor: [
                                                    '#4fa953',
                                                    '#09b2c7',
                                                    '#fd9811',
                                                    '#e73e3b',
                                                    '#09b2d9',
                                                    '#e73e9d'
                                                ],
                                                borderColor: [
                                                    'rgba(255,99,132,1)',
                                                    'rgba(54, 162, 235, 1)',
                                                    'rgba(255, 206, 86, 1)',
                                                    'rgba(75, 192, 192, 1)',
                                                    'rgba(75, 192, 192, 1)',
                                                    'rgba(75, 192, 192, 1)'
                                                ],
                                                borderWidth: 1
                                            }]
                                    },
                                    options: {
                                        cutoutPercentage: 40,
                                        responsive: false,
                                        animation: {
                                            animateRotate: true
                                        }
                                    }
                                });
                                myChart = new Chart("myChart2", {
                                    type: 'bar',
                                    data: {
                                        labels: ['Invitations', 'Incomplete Attempts', 'Reattempt Requests', 'Flagged', 'Awaiting Feedback', 'Deleted'],
                                        datasets: [{
                                                label: 'Invitations for ' + this.report.interview.name + '',
                                                data: createdData,
                                                backgroundColor: [
                                                    '#4fa953',
                                                    '#09b2c7',
                                                    '#fd9811',
                                                    '#e73e3b',
                                                    '#09b2d9',
                                                    '#e73e9d'
                                                ],
                                                borderColor: [
                                                    'rgba(255,99,132,1)',
                                                    'rgba(54, 162, 235, 1)',
                                                    'rgba(255, 206, 86, 1)',
                                                    'rgba(75, 192, 192, 1)',
                                                    'rgba(75, 192, 192, 1)',
                                                    'rgba(75, 192, 192, 1)'
                                                ],
                                                borderWidth: 1
                                            }]
                                    },
                                    options: {
                                        //cutoutPercentage: 40,
                                        responsive: false,
                                    }
                                });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.toggleListMode = function () { return _this.showList = !_this.showList; };
                this.interviewId = this.$stateParams.interviewId;
                if (this.$stateParams.reportOrigin != null || angular.isDefined(this.$stateParams.reportOrigin)) {
                    this.showReportCrumbs = true;
                }
            }
            SingleInterviewReportsController.prototype.downloadSummary = function () {
                var data = [this.report.interview];
                var headersArrayList = this.summaryHeader;
                if (this.report) {
                    this.CSVDownloadService.downloadFile(data, this.report.interview.name + ' Summary Report', headersArrayList);
                }
            };
            SingleInterviewReportsController.prototype.downloadList = function (list, headersArrayList, title) {
                console.log(headersArrayList);
                if (list) {
                    this.CSVDownloadService.downloadFile(list, title, headersArrayList);
                }
            };
            SingleInterviewReportsController.$inject = [
                "$state", "$stateParams", "SessionService", "$window", "company.reportsService", "company.CSVService"
            ];
            return SingleInterviewReportsController;
        }());
        app.controller("company.SingleInterviewReportsController", SingleInterviewReportsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var SlateLogsController = /** @class */ (function () {
            function SlateLogsController($http, $mdToast, session, $state, $mdDialog, $stateParams) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$stateParams = $stateParams;
                this.orderVariable = "-applicantName";
                this.selectedPageNumber = 1;
                this.pageOptions = [10, 20, 50, 100];
                this.selectedSearchCriteria = "ALL";
                this.searchText = "";
                this.disableSearch = false;
                this.totalResults = 0;
                this.$onInit = function () { };
                this.currentPage = 0;
                this.pageSize = 10;
                this.list();
            }
            SlateLogsController.prototype.list = function () {
                var _this = this;
                var params = { page: this.currentPage, pagesize: this.pageSize };
                this.$http.get("/slate/logs/paged", { params: params }).then(function (result) {
                    //this.logs = result.data;
                    _this.logs = result.data.logs;
                    _this.allLogs = __spreadArray([], result.data.logs);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                    _this.lastCalledSearch = 'list';
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            SlateLogsController.prototype.previousPage = function () {
                var _this = this;
                this.currentPage = this.currentPage - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/slate/logs/paged", { params: params }).then(function (result) {
                    _this.logs = result.data.logs;
                    _this.allLogs = __spreadArray([], result.data.logs);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            SlateLogsController.prototype.nextPage = function () {
                var _this = this;
                this.currentPage = this.currentPage + 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/slate/logs/paged", { params: params }).then(function (result) {
                    _this.logs = result.data.logs;
                    _this.allLogs = __spreadArray([], result.data.logs);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            SlateLogsController.prototype.reloadPage = function () {
                var _this = this;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/slate/logs/paged", { params: params }).then(function (result) {
                    _this.logs = result.data.logs;
                    _this.allLogs = __spreadArray([], result.data.logs);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            SlateLogsController.prototype.getPagesArray = function (num) {
                var array = [];
                for (var i = 1; i <= num; i++) {
                    array.push(i);
                }
                return array;
            };
            SlateLogsController.prototype.selectedPage = function () {
                var _this = this;
                this.currentPage = this.selectedPageNumber - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.selectedPageNumber - 1, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/slate/logs/paged", { params: params }).then(function (result) {
                    _this.logs = result.data.logs;
                    _this.allLogs = __spreadArray([], result.data.logs);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            SlateLogsController.prototype.resultsPerPageChanged = function () {
                this.list();
            };
            SlateLogsController.prototype.goHome = function () {
                this.$state.go("root.company.home");
            };
            SlateLogsController.$inject = ["$http", "$mdToast", "SessionService", "$state", "$mdDialog", "$stateParams"];
            return SlateLogsController;
        }());
        app.controller("company.SlateLogsController", SlateLogsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var UpcomingInterviewsController = /** @class */ (function () {
            function UpcomingInterviewsController($http, $mdToast, $stateParams, SessionService, $mdDialog, $timeout) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$stateParams = $stateParams;
                this.SessionService = SessionService;
                this.$mdDialog = $mdDialog;
                this.$timeout = $timeout;
                this.search = '';
                this.orderVariable = '-creationDate';
                this.$onInit = function () { };
                var d = new Date();
                this.now = new Date();
                this.timeZone = d
                    .toLocaleString("en", { timeZoneName: "short" })
                    .split(" ")
                    .pop();
                this.showInviteCandidate = false;
                this.list();
                this.$http.get("/company/interviews/check-open-invite/" + this.interviewId).then(function (result) {
                    _this.interviewInfo = result.data;
                    if (_this.interviewInfo.hasOpenInvite) {
                        _this.openInviteLink = window.location.protocol + "//" + window.location.host + "/#/applicant/open/" + _this.interviewId;
                    }
                    else {
                        _this.openInviteLink = '';
                    }
                });
            }
            UpcomingInterviewsController.prototype.filter = function () {
                // if (this.search != '') {
                //   this.invitations = _.filter(this.allInvitations, (obj) => {
                //     return obj.candidatename.toLowerCase().indexOf(this.search.toLowerCase()) !== -1;
                //   });
                // } else {
                //   this.invitations = this.allInvitations;
                // }
            };
            UpcomingInterviewsController.prototype.sortResultsAscending = function () {
                this.orderVariable = 'creationDate';
            };
            UpcomingInterviewsController.prototype.sortResultsDescending = function () {
                this.orderVariable = '-creationDate';
            };
            UpcomingInterviewsController.prototype.showOpenInviteLink = function () {
                this.linkDialog = this.$mdDialog.show({
                    controller: UpcomingInterviewsController,
                    controllerAs: "candidatesmultiparty",
                    bindToController: true,
                    templateUrl: 'views/company/dialogs/share-link.html',
                    parent: angular.element(document.body),
                    locals: { openInviteLink: this.openInviteLink },
                    clickOutsideToClose: true,
                    escapeToClose: true
                    // Only for -xs, -sm breakpoints.
                }).then(function () {
                    console.debug("You clicked the button to close the bottom sheet");
                })
                    .catch(function () {
                    console.debug("You clicked cancel button");
                });
            };
            UpcomingInterviewsController.prototype.copyToClipBoard = function () {
                var element = document.getElementById("unique-link");
                element.select();
                document.execCommand("Copy");
                this.$mdToast.show(this.$mdToast.simple()
                    .textContent("Copied to Clipboard")
                    .hideDelay(10000)
                    .position('top left')
                    .theme("toasttheme"));
            };
            UpcomingInterviewsController.prototype.cancel = function () {
                this.$mdDialog.hide();
            };
            UpcomingInterviewsController.prototype.toggleInviteCandidate = function () {
                this.showInviteCandidate = !this.showInviteCandidate;
            };
            UpcomingInterviewsController.prototype.list = function () {
                var _this = this;
                this.$http.get("/company/multiparty/get-events-today")
                    .then(function (result) {
                    _this.invitations = result.data;
                    _this.allInvitations = result.data;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            UpcomingInterviewsController.prototype.reinvite = function (invitationId) {
                var _this = this;
                this.$http.put("/company/invitations/reinvite/" + invitationId, {})
                    .then(function (result) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Invitation Sent Again")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            UpcomingInterviewsController.prototype.uninvite = function (invitation) {
                // var request = this.$mdDialog.confirm()
                //   .title("Are you sure?")
                //   .textContent("The invitation will be deleted and the candidate won't be able to record the interview")
                //   .ok("UNINVITE")
                //   .cancel("CANCEL")
                //   .theme("confirmdialog");
                // this.$mdDialog.show(request).then(() => {
                //   this.$http.delete("/company/invitations/" + invitation.guid, {})
                //     .then((result: ng.IHttpPromiseCallbackArg<{}>) => {
                //       var i = this.invitations.indexOf(invitation);
                //       this.invitations.splice(i, 1);
                //       this.$mdToast.show(
                //         this.$mdToast.simple()
                //           .textContent("Invitation Deleted")
                //           .hideDelay(10000)
                //           .position('top left')
                //           .theme("toasttheme"));
                //     }, (error) => {
                //       this.$mdToast.show(
                //         this.$mdToast.simple()
                //           .textContent(error.data.message)
                //           .hideDelay(10000)
                //           .position('top left')
                //           .theme("toasttheme"));
                //       Rollbar.error(error);
                //     });
                // }, () => { });
            };
            UpcomingInterviewsController.prototype.edit = function (invitation) {
                var _this = this;
                this.$http.put("/company/invitations/", {
                    guid: invitation.guid,
                    candidatename: invitation.candidatename,
                    candidateemail: invitation.candidateemail
                }).then(function (result) {
                    invitation.isEdit = false;
                    invitation.invitationcode = result.data.invitationcode;
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Invitation Edited Successfully")
                        .hideDelay(10000)
                        .position('top left')
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent(error.data.message)
                        .hideDelay(10000)
                        .position('top left')
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            UpcomingInterviewsController.prototype.cancelEdit = function (invitation) {
                invitation.isEdit = false;
            };
            UpcomingInterviewsController.prototype.showEdit = function (invitation) {
                invitation.isEdit = true;
            };
            UpcomingInterviewsController.prototype.activateJoinInterview = function (interview) {
                var today = new Date();
                var diffMs = interview.fromUTCDateTime - today.getTime(); // milliseconds between now & Christmas
                var diffMins = Math.round(((diffMs % 86400000) % 3600000) / 60000);
                var endTimeinMS = interview.fromUTCDateTime + ((interview.duration + 20) * 60 * 1000);
                var differenceInEndTimeAndNow = endTimeinMS - today.getTime();
                var fromDate = new Date(interview.fromUTCDateTime);
                if (fromDate.getFullYear() == today.getFullYear() && fromDate.getMonth() == today.getMonth() && fromDate.getDate() == today.getDate()) {
                    if (diffMins <= 15 && differenceInEndTimeAndNow >= 0) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                else {
                    return false;
                }
            };
            UpcomingInterviewsController.prototype.disableCancelAndReschedule = function (interview) {
                var today = new Date();
                var diffMs = interview.fromUTCDateTime - today.getTime(); // milliseconds between now & Christmas
                var endTimeinMS = interview.fromUTCDateTime + ((interview.duration + 20) * 60 * 1000);
                if (diffMs <= 900000) {
                    return true;
                }
                else {
                    return false;
                }
            };
            UpcomingInterviewsController.prototype.rsvp = function (eventId) {
                var _this = this;
                this.$http
                    .put("/company/multiparty/add-me/" + eventId, {})
                    .then(function (result) {
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("You have registered to attend this interview...")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            UpcomingInterviewsController.prototype.cancelInterview = function (interview) {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure?")
                    .textContent("Are you sure you wish to cancel this interview? You will not be able to undo this action")
                    .ok("Confirm")
                    .cancel("Back")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/company/multiparty/cancel-event/" + interview.id, {})
                        .then(function (result) {
                        interview.cancelled = true;
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Interview Cancelled")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    }, function (error) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Request failed. Please try again")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    });
                }, function () { });
            };
            UpcomingInterviewsController.prototype.updateMultipartyEvent = function (interview) {
                var _this = this;
                interview.fromUTCDateTime = interview.newFromUTCDateTime;
                this.$http.put("/company/multiparty/reschedule-interview", interview).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent("Interview Rescheduled...")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    interview.isEdit = false;
                });
            };
            UpcomingInterviewsController.prototype.create = function () {
                var _this = this;
                this.$http.post("/company/multiparty/create-event/" + this.interviewId, this.newMultipartyInterview).then(function (result) {
                    if (_this.invitations) {
                        _this.invitations.push(result.data);
                        _this.newMultipartyInterview.candidateName = '';
                        _this.newMultipartyInterview.candidateEmail = '';
                        _this.newMultipartyInterview.fromUTCDateTime = null;
                        _this.newMultipartyInterview.duration = null;
                    }
                    _this.list();
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Invitation Sent")
                        .position("top left")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    _this.showInviteCandidate = false;
                }, function (error) {
                    _this.name = '';
                    _this.email = '';
                    _this.showInviteCandidate = false;
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent(error.data.message)
                        .position('top left')
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    Rollbar.error(error);
                });
            };
            UpcomingInterviewsController.prototype.isSelfInvitation = function (email) {
                return this.$http.post("/company/invitations/is-self-invitation/", { email: email });
            };
            UpcomingInterviewsController.prototype.isSameDomainInvitation = function (email) {
                return this.$http.post("/company/invitations/is-same-domain-invitation/", { email: email });
            };
            UpcomingInterviewsController.prototype.isAnotherCompanyInvitation = function (email) {
                return this.$http.post("/company/invitations/is-another-company-invitation/", { email: email });
            };
            UpcomingInterviewsController.$inject = ["$http", "$mdToast", "$stateParams", "SessionService", "$mdDialog", "$timeout"];
            return UpcomingInterviewsController;
        }());
        app.controller("company.UpcomingInterviewsController", UpcomingInterviewsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var UpgradeController = /** @class */ (function () {
            function UpgradeController($http, SessionService, $state, $mdDialog, $scope) {
                var _this = this;
                this.$http = $http;
                this.SessionService = SessionService;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$scope = $scope;
                this.$onInit = function () { };
                this.monthlyPlans = [];
                this.yearlyPlans = [];
                this.getPlans().then(function (result) {
                    angular.forEach(result.data, function (v, k) {
                        if (v.planExpiryMonths === 12) {
                            _this.yearlyPlans.push(v);
                        }
                        else {
                            _this.monthlyPlans.push(v);
                        }
                    });
                }, function (error) {
                    Rollbar.error(error);
                });
                this.checkStatus().then(function (result) {
                    _this.companySubscriptionStatus = result.data;
                    _this.updateDom();
                    if (_this.companySubscriptionStatus.hasActiveSubscription) {
                        _this.fetchCurrent().then(function (result) {
                            _this.companySubscription = result.data;
                            if (_this.companySubscription.planName === 'Pro Trial' && !_this.companySubscription.trialPeriod) {
                                _this.planName = 'Pro';
                            }
                            else if (_this.companySubscription.isBespoke) {
                                _this.planName = 'BeSpoke';
                            }
                            else {
                                _this.planName = _this.companySubscription.planName;
                            }
                        }, function (error) {
                            Rollbar.error(error);
                        });
                    }
                    else {
                    }
                }, function (error) {
                    Rollbar.error(error);
                });
            }
            UpgradeController.prototype.checkStatus = function () {
                return this.$http.get("/company/subscriptions/check-status");
            };
            UpgradeController.prototype.cancelTrial = function () {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure you wish to cancel?")
                    .htmlContent("<p>If you proceed to upgrade your current trial plan will get cancelled")
                    .ok("Ok")
                    .cancel("Go Back")
                    .theme("confirmdialog");
                var confirm = this.$mdDialog.confirm()
                    .title("Trial Cancelled")
                    .textContent("Your trial plan has been cancelled please choose a new plan")
                    .ok("Ok")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/company/subscriptions/cancel-trial", {}).then(function (result) {
                        _this.refreshToken().then(function (result) {
                            _this.$mdDialog.show(confirm).then(function () {
                                _this.$state.go("root.company.plan-manager", {}, {
                                    reload: true
                                });
                            }, function () {
                            });
                        });
                    });
                }, function () { });
            };
            UpgradeController.prototype.getPlans = function () {
                return this.$http.get("/company/subscriptions/plans");
            };
            UpgradeController.prototype.refreshToken = function () {
                var _this = this;
                var promise = this.$http.get("/me/refresh-token");
                promise.then(function (result) {
                    _this.SessionService.setToken(result.headers("Authorization"));
                }, function (error) {
                    Rollbar.error(JSON.stringify(error));
                });
                return promise;
            };
            UpgradeController.prototype.fetchCurrent = function () {
                return this.$http.get("/company/subscriptions/fetch-current");
            };
            UpgradeController.prototype.cancel = function (braintreeSubscriptionId) {
                var _this = this;
                var request = this.$mdDialog.confirm()
                    .title("Are you sure you wish to cancel?")
                    .htmlContent("<p>If you proceed to cancel, your video recordings will be lost at the end of your plan. Please read the Cancellation Policy in <a class=\"md-accent\" href=\"https://5qlive.com/employers-terms/\" target=\"_blank\">Terms & Conditions</a> for further details.</p>")
                    .ok("Cancel Subscription")
                    .cancel("Go Back")
                    .theme("confirmdialog");
                var confirm = this.$mdDialog.confirm()
                    .title("Cancellation Successful")
                    .textContent("Your Plan has been cancelled. You will not be charged again")
                    .ok("Ok")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.put("/company/subscriptions/cancel-subscription/" + braintreeSubscriptionId, {}).then(function (request) {
                        _this.$mdDialog.show(confirm).then(function () {
                            _this.$state.go("root.company.plan-manager", {}, {
                                reload: true
                            });
                        }, function () { });
                    }, function (error) {
                        Rollbar.error(error);
                    });
                }, function () { });
            };
            UpgradeController.prototype.subscribe = function (plan) {
                var _this = this;
                if (this.SessionService.isCompany()) {
                    this.$http.put("/company/subscriptions/cancel-trial", {}).then(function (result) {
                        _this.refreshToken().then(function (result) {
                            _this.$state.go("root.company.braintree", { plan: plan });
                        });
                    });
                }
                else {
                    this.$state.go("root.company.signup", { plan: plan });
                }
            };
            UpgradeController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            UpgradeController.prototype.getColor = function (index) {
                var i = index % 4;
                switch (i) {
                    case 0:
                        return "{'color': 'report-accent-500-1.0'}";
                    case 1:
                        return "{'color': 'report-warn-500-1.0'}";
                    case 2:
                        return "{'color': 'report-background-500-1.0'}";
                    case 3:
                        return "{'color': 'report-warn-500-1.0'}";
                }
            };
            UpgradeController.$inject = ["$http", "SessionService", "$state", "$mdDialog", "$scope"];
            return UpgradeController;
        }());
        app.controller("company.UpgradeController", UpgradeController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Candidate;
    (function (Candidate) {
        "use strict";
        var app = Qna.getModule();
        var UserAccountController = /** @class */ (function () {
            function UserAccountController($http, $mdToast, $mdDialog, session, $state, $stateParams, userService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$mdDialog = $mdDialog;
                this.session = session;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.userService = userService;
                this.editInfo = {}; //{name:"", fullname:"", email:"", password:""};
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _a = this;
                                return [4 /*yield*/, this.userService.getGroups()];
                            case 1:
                                _a.userGroups = _b.sent();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.editInfo.name = this.session.getName();
                this.editInfo.fullname = this.session.getFullName();
                this.editInfo.email = this.session.getEmail();
                this.editInfo.password = "";
            }
            UserAccountController.prototype.toggleShowEditInfo = function () {
                this.showEditInfo = !this.showEditInfo;
            };
            UserAccountController.prototype.toggleShowDeleteAccount = function () {
                this.showDeleteAccount = !this.showDeleteAccount;
            };
            UserAccountController.prototype.updateInformation = function () {
                var _this = this;
                this.$http.post("/user/detail/", this.editInfo).then(function (result) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Your details have been successfully updated.")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                    sessionStorage.removeItem("logo");
                    sessionStorage.removeItem("token");
                    _this.$state.go("root.company.home", {}, {
                        reload: true
                    });
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent("Failed to update user details. Please try again.")
                        .hideDelay(10000)
                        .theme("toasttheme"));
                });
            };
            UserAccountController.prototype.deleteAccount = function () {
                var _this = this;
                var cPDTO = { confirmPassword: this.confirmPassword };
                var request = this.$mdDialog.confirm()
                    .title("Are you sure?")
                    .textContent("You will lose all access to the system if you continue.")
                    .ok("Yes, Delete My Account")
                    .cancel("CANCEL")
                    .theme("confirmdialog");
                this.$mdDialog.show(request).then(function () {
                    _this.$http.post("/user/detail/delete-account", cPDTO).then(function (result) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Account deleted succesfully")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                        sessionStorage.removeItem("logo");
                        sessionStorage.removeItem("token");
                        _this.$state.go("root.company.home", {}, {
                            reload: true
                        });
                    }, function (error) {
                        _this.$mdToast.show(_this.$mdToast.simple()
                            .textContent("Failed to delete account. Please try again.")
                            .hideDelay(10000)
                            .theme("toasttheme"));
                    });
                }, function () { });
            };
            UserAccountController.$inject = ["$http", "$mdToast", "$mdDialog", "SessionService", "$state", "$stateParams", "user.userService"];
            return UserAccountController;
        }());
        app.controller("company.UserAccountController", UserAccountController);
    })(Candidate = Qna.Candidate || (Qna.Candidate = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var UserReportsController = /** @class */ (function () {
            function UserReportsController($http, $mdToast, session, CSVDownloadService, $state, $mdDialog, $stateParams) {
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.CSVDownloadService = CSVDownloadService;
                this.$state = $state;
                this.$mdDialog = $mdDialog;
                this.$stateParams = $stateParams;
                this.USERTYPE = "Applicants";
                this.orderVariable = "-createdAt";
                this.selectedPageNumber = 1;
                this.pageOptions = [10, 20, 50, 100];
                this.selectedSearchCriteria = "ALL";
                this.searchText = "";
                this.disableSearch = false;
                this.totalResults = 0;
                this.showReportCrumbs = false;
                this.getReadableDate = function (date) { return new Date(date).toLocaleDateString('en-GB', {
                    day: 'numeric', month: 'short', year: 'numeric'
                }).replace(/ /g, '-'); };
                this.$onInit = function () { };
                if (this.$stateParams.reportOrigin != null || angular.isDefined(this.$stateParams.reportOrigin)) {
                    this.showReportCrumbs = true;
                }
                this.USERTYPE = $stateParams.type;
                this.currentPage = 0;
                this.pageSize = 10;
                this.list();
            }
            UserReportsController.prototype.list = function () {
                var _this = this;
                var params = { page: this.currentPage, pagesize: this.pageSize };
                this.$http.get("/user/detail/reports/" + this.USERTYPE, { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                    _this.lastCalledSearch = 'list';
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            UserReportsController.prototype.previousPage = function () {
                var _this = this;
                this.currentPage = this.currentPage - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/user/detail/reports/" + this.USERTYPE, { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            UserReportsController.prototype.nextPage = function () {
                var _this = this;
                this.currentPage = this.currentPage + 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/user/detail/reports/" + this.USERTYPE, { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            UserReportsController.prototype.reloadPage = function () {
                var _this = this;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/user/detail/reports/" + this.USERTYPE, { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            UserReportsController.prototype.getPagesArray = function (num) {
                var array = [];
                for (var i = 1; i <= num; i++) {
                    array.push(i);
                }
                return array;
            };
            UserReportsController.prototype.selectedPage = function () {
                var _this = this;
                this.currentPage = this.selectedPageNumber - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.selectedPageNumber - 1, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/user/detail/reports/" + this.USERTYPE, { params: params }).then(function (result) {
                    _this.reports = result.data.reports;
                    _this.allReports = __spreadArray([], result.data.reports);
                    _this.totalPages = result.data.totalPages;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            UserReportsController.prototype.resultsPerPageChanged = function () {
                this.list();
            };
            UserReportsController.prototype.goHome = function () {
                this.$state.go("root.company.home");
            };
            UserReportsController.prototype.downloadResponse = function () {
                var headersArrayList = ['fullname', 'email', 'createdAt', 'updatedAt']; //'username',
                if (this.allReports) {
                    this.CSVDownloadService.downloadFile(this.allReports, this.USERTYPE + ' Report', headersArrayList);
                }
            };
            UserReportsController.$inject = ["$http", "$mdToast", "SessionService", "company.CSVService", "$state", "$mdDialog", "$stateParams"];
            return UserReportsController;
        }());
        app.controller("company.UserReportsController", UserReportsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var YearlyReportsController = /** @class */ (function () {
            function YearlyReportsController($http, $mdToast, session, $state, $stateParams, $window, CSVDownloadService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.session = session;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$window = $window;
                this.CSVDownloadService = CSVDownloadService;
                this.yearOptions = [];
                this.showingYear = "ALL";
                this.interviewsHeader = [];
                this.invitationsHeader = [];
                this.reattemptHeader = [];
                this.flaggedHeader = [];
                this.flowedHeader = [];
                this.interviewTypesHeader = [];
                this.summaryHeader = [];
                this.$onInit = function () {
                    _this.yearOptions = _this.range(2019, new Date().getFullYear());
                };
                if (this.$stateParams.year != null || angular.isDefined(this.$stateParams.year)) {
                    this.showingYear = this.$stateParams.year;
                }
                else {
                    this.showingYear = new Date().getFullYear();
                }
                this.fetchOverview();
            }
            YearlyReportsController.prototype.fetchOverview = function () {
                var _this = this;
                this.$http.get("/company/dashboard/overview/yearly/" + this.showingYear).then(function (result) {
                    _this.dashboardOverview = result.data;
                    var sumHead = Object.keys(_this.dashboardOverview);
                    var takeOuts = ["interviewTypesReports", "userTypeReports", "deviceTypesReports", "interviewsList", "invitationsList", "reattemptList", "flaggedList", "flowedList"];
                    takeOuts.forEach(function (element) {
                        sumHead.splice(sumHead.indexOf(element), 1);
                    });
                    _this.summaryHeader = sumHead;
                    _this.interviewsHeader = _this.dashboardOverview.interviewsList.length > 0 ? Object.keys(_this.dashboardOverview.interviewsList[0]) : [];
                    _this.invitationsHeader = _this.dashboardOverview.invitationList.length > 0 ? Object.keys(_this.dashboardOverview.invitationList[0]) : [];
                    _this.reattemptHeader = _this.dashboardOverview.reattemptList.length > 0 ? Object.keys(_this.dashboardOverview.reattemptList[0]) : [];
                    _this.flaggedHeader = _this.dashboardOverview.flaggedList.length > 0 ? Object.keys(_this.dashboardOverview.flaggedList[0]) : [];
                    _this.flowedHeader = _this.dashboardOverview.flowedList.length > 0 ? Object.keys(_this.dashboardOverview.flowedList[0]) : [];
                    //this.interviewTypesHeader = this.dashboardOverview.interviewTypesReports.length > 0 ? Object.keys(this.dashboardOverview.interviewTypesReports[0]) : [];
                    _this.interviewTypesHeader = ["interviewTypeName", "totalInterviewCount", "totalInvitationCount"];
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                });
            };
            YearlyReportsController.prototype.range = function (start, end) {
                return __spreadArray(["ALL"], Array(end - start + 1).fill(0).map(function (_, idx) { return start + idx; }));
            };
            YearlyReportsController.prototype.goToYearlyReport = function () {
                if (this.showingYear == "ALL") {
                    this.$state.go("root.company.general-reports");
                }
                else if (this.showingYear == "Date Range(Dynamic Report)") {
                    this.$state.go("root.company.dynamic-report");
                }
                else {
                    this.$state.go("root.company.yearly-reports", { year: this.showingYear });
                }
            };
            YearlyReportsController.prototype.downloadSummary = function () {
                var data = [this.dashboardOverview];
                var headersArrayList = this.summaryHeader;
                if (this.dashboardOverview) {
                    this.CSVDownloadService.downloadFile(data, this.showingYear + ' Summary Report', headersArrayList);
                }
            };
            YearlyReportsController.prototype.downloadList = function (list, headersArrayList, title) {
                console.log(headersArrayList);
                if (list) {
                    this.CSVDownloadService.downloadFile(list, title, headersArrayList);
                }
            };
            YearlyReportsController.$inject = ["$http", "$mdToast", "SessionService", "$state", "$stateParams", "$window", "company.CSVService"];
            return YearlyReportsController;
        }());
        app.controller("company.YearlyReportsController", YearlyReportsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var GroupsDetailsController = /** @class */ (function () {
            function GroupsDetailsController($scope, CompanyGroupsService, $state, $stateParams, $window, $mdToast, DialogService, redirectIfNotLoggedIn, roleConstants) {
                var _this = this;
                this.$scope = $scope;
                this.CompanyGroupsService = CompanyGroupsService;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$window = $window;
                this.$mdToast = $mdToast;
                this.DialogService = DialogService;
                this.redirectIfNotLoggedIn = redirectIfNotLoggedIn;
                this.roleConstants = roleConstants;
                this.groupId = null;
                this.newGroupMode = false;
                this.isEditing = false;
                this.employees = [];
                this.allEmployees = [];
                this.allEmployeesIds = [];
                this.filteredEmployees = [];
                this.groupUsers = [];
                this.groupEmployeeIds = [];
                this.showEmployeeColumns = ['fullName', 'email', 'roleName'];
                this.editEmployeeColumns = ['name', 'email', 'roleName'];
                this.search = "";
                this.selectedIndexes = [];
                this.$onInit = function () {
                    if (!_this.allEmployees.length || (!_this.group && !_this.newGroupMode))
                        _this.$state.go('root.company.groups');
                    if (!_this.newGroupMode) {
                        _this.employees = _this.group.endUserDTOList.map(function (employee) {
                            var matchingEmployee = _this.allEmployees.find(function (currentEmployee) { return currentEmployee.employeeid === employee.id; });
                            if (matchingEmployee && matchingEmployee.roleName) {
                                employee.roleName = matchingEmployee.roleName;
                            }
                            return employee;
                        }) || [];
                    }
                    _this.groupEmployeeIds = _this.newGroupMode ? [] : _this.employees.map(function (employee) { return employee.id; });
                    _this.allEmployees.forEach(function (employee) {
                        if (_this.groupEmployeeIds.indexOf(employee.employeeid) != -1) {
                            employee.checked = true;
                        }
                    });
                    _this.selectedIndexes = _this.getSelected();
                    _this.$scope.$on('groups-listChanged', function (event, _a) {
                        var checked = _a.checked, unchecked = _a.unchecked;
                        return __awaiter(_this, void 0, void 0, function () {
                            var _this = this;
                            return __generator(this, function (_b) {
                                checked.forEach(function (c) { return _this.allEmployees.find(function (e) { return e.employeeid === c.employeeid; }).checked = true; });
                                unchecked.forEach(function (u) { return _this.allEmployees.find(function (e) { return e.employeeid === u.employeeid; }).checked = false; });
                                return [2 /*return*/];
                            });
                        });
                    });
                };
                this.toggleEditionMode = function () {
                    _this.isEditing = !_this.isEditing;
                };
                this.cancelEdition = function () {
                    _this.isEditing = false;
                    _this.group = _this.initialGroup;
                    _this.allEmployees = JSON.parse(JSON.stringify(_this.employees));
                };
                this.getSelected = function () { return _this.allEmployees
                    .filter(function (e) { return e.checked; })
                    .map(function (e) { return _this.filteredEmployees.findIndex(function (f) { return f.employeeid === e.employeeid; }); })
                    .filter(function (indexes) { return indexes >= 0; }); };
                this.createGroup = function () { return __awaiter(_this, void 0, void 0, function () {
                    var groupData, createdGroup, addUserIds, error_55;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                groupData = {
                                    name: this.group.name,
                                    description: this.group.description,
                                };
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 4, , 5]);
                                return [4 /*yield*/, this.CompanyGroupsService.createGroup(groupData)];
                            case 2:
                                createdGroup = _a.sent();
                                addUserIds = this.allEmployees
                                    .filter(function (user) { return user.checked; })
                                    .map(function (user) { return user.employeeid; });
                                return [4 /*yield*/, this.CompanyGroupsService.addUsersToGroup(createdGroup.id, addUserIds)];
                            case 3:
                                _a.sent();
                                this.showToastMessage("Group " + createdGroup.name + " successfully created");
                                this.navigateToGroupsPage();
                                return [3 /*break*/, 5];
                            case 4:
                                error_55 = _a.sent();
                                this.showToastMessage('There was an issue creating the group');
                                Rollbar.error(error_55);
                                return [3 /*break*/, 5];
                            case 5: return [2 /*return*/];
                        }
                    });
                }); };
                this.updateGroup = function () { return __awaiter(_this, void 0, void 0, function () {
                    var addUserIds, removeUserIds, _i, _a, employee, _b, removeUserIds_1, removeUser, error_56;
                    return __generator(this, function (_c) {
                        switch (_c.label) {
                            case 0:
                                addUserIds = [];
                                removeUserIds = [];
                                for (_i = 0, _a = this.allEmployees; _i < _a.length; _i++) {
                                    employee = _a[_i];
                                    if (employee.checked && this.groupEmployeeIds.indexOf(employee.employeeid) === -1)
                                        addUserIds.push(employee.employeeid);
                                    if (!employee.checked && this.groupEmployeeIds.indexOf(employee.employeeid) !== -1)
                                        removeUserIds.push(employee.employeeid);
                                }
                                _c.label = 1;
                            case 1:
                                _c.trys.push([1, 7, , 8]);
                                return [4 /*yield*/, this.CompanyGroupsService.addUsersToGroup(this.group.id, addUserIds)];
                            case 2:
                                _c.sent();
                                if (!(removeUserIds.length !== 0)) return [3 /*break*/, 6];
                                _b = 0, removeUserIds_1 = removeUserIds;
                                _c.label = 3;
                            case 3:
                                if (!(_b < removeUserIds_1.length)) return [3 /*break*/, 6];
                                removeUser = removeUserIds_1[_b];
                                return [4 /*yield*/, this.CompanyGroupsService.removeUserFromGroup(this.group.id, removeUser)];
                            case 4:
                                _c.sent();
                                _c.label = 5;
                            case 5:
                                _b++;
                                return [3 /*break*/, 3];
                            case 6:
                                this.navigateToGroupsPage();
                                return [3 /*break*/, 8];
                            case 7:
                                error_56 = _c.sent();
                                this.showToastMessage('There was an modifying the group users');
                                Rollbar.error(error_56);
                                return [3 /*break*/, 8];
                            case 8: return [2 /*return*/];
                        }
                    });
                }); };
                this.canSave = function () {
                    if (_this.newGroupMode)
                        return true;
                    for (var _i = 0, _a = _this.allEmployees; _i < _a.length; _i++) {
                        var employee = _a[_i];
                        if (employee.checked && _this.groupEmployeeIds.indexOf(employee.employeeid) === -1)
                            return true;
                        if (!employee.checked && _this.groupEmployeeIds.indexOf(employee.employeeid) !== -1)
                            return true;
                    }
                    return false;
                };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.showConfirmDeletionDialog = function () {
                    var deleteGroup = function () {
                        _this.CompanyGroupsService.deleteGroup(_this.group.id)
                            .then(function (result) {
                            if (result.status === 200) {
                                _this.showToastMessage("Successfully delete group " + _this.group.name);
                                _this.navigateToGroupsPage();
                                return;
                            }
                            _this.showToastMessage('There was an issue deleting the group');
                        })
                            .catch(function (error) { return _this.showToastMessage('There was an issue deleting the group'); });
                    };
                    var dialog = _this.DialogService.buildDialog({
                        title: "Are you sure you want to delete " + _this.group.name + " group?",
                        okText: 'Yes',
                        cancelText: 'No'
                    });
                    _this.DialogService.showDialog({ dialog: dialog, onOk: deleteGroup });
                };
                this.filter = function () {
                    _this.filteredEmployees = _this.allEmployees.filter(function (e) { return e.name.toLowerCase().includes(_this.search.toLowerCase()); });
                    _this.selectedIndexes = _this.getSelected();
                };
                this.navigateToGroupsPage = function () { return setTimeout(function () { return _this.$state.go('root.company.groups'); }, 1500); };
                this.goBack = function () { return _this.$window.history.back(); };
                this.employees = this.$stateParams.employees || [];
                this.employees.forEach(function (employee) {
                    var roleStr = "No Priviledge";
                    if (employee.superAdmin)
                        roleStr == "No Priviledge" ? roleStr = _this.roleConstants.names.SUPER_ADMIN : roleStr = roleStr + ', ' + _this.roleConstants.names.SUPER_ADMIN;
                    if (employee.admin)
                        roleStr == "No Priviledge" ? roleStr = _this.roleConstants.names.ADMIN : roleStr = roleStr + ', ' + _this.roleConstants.names.ADMIN;
                    if (employee.reviewer)
                        roleStr == "No Priviledge" ? roleStr = _this.roleConstants.names.REVIEWER : roleStr = roleStr + ', ' + _this.roleConstants.names.REVIEWER;
                    employee.roleName = roleStr;
                });
                this.allEmployees = JSON.parse(JSON.stringify(this.employees));
                this.filteredEmployees = JSON.parse(JSON.stringify(this.employees));
                this.allEmployeesIds = this.allEmployees.map(function (employee) { return employee.employeeid; });
                this.group = this.$stateParams.group || null;
                this.initialGroup = JSON.parse(JSON.stringify(this.group));
                if (this.group === null)
                    this.newGroupMode = true;
            }
            GroupsDetailsController.$inject = [
                "$scope",
                "company.groupsService",
                "$state",
                "$stateParams",
                "$window",
                "$mdToast",
                "DialogService",
                "redirectIfNotLoggedIn",
                "roleConstants"
            ];
            return GroupsDetailsController;
        }());
        app.controller("company.GroupsDetailsController", GroupsDetailsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var GroupsController = /** @class */ (function () {
            function GroupsController($scope, $mdToast, $state, CompanyGroupsService, CompanyEmployeesService, DialogService, redirectIfNotLoggedIn) {
                var _this = this;
                this.$scope = $scope;
                this.$mdToast = $mdToast;
                this.$state = $state;
                this.CompanyGroupsService = CompanyGroupsService;
                this.CompanyEmployeesService = CompanyEmployeesService;
                this.DialogService = DialogService;
                this.redirectIfNotLoggedIn = redirectIfNotLoggedIn;
                this.groups = [];
                this.companyEmployees = [];
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.fetchGroups({})];
                            case 1:
                                _a.sent();
                                this.fetchEmployees();
                                this.$scope.$on('groups-searchChanged', function (event, name) { return _this.fetchGroups({ name: name }); });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.fetchGroups = function (_a) {
                    var _b = _a.name, name = _b === void 0 ? null : _b;
                    return __awaiter(_this, void 0, void 0, function () {
                        var _c, _d, promiseArray, error_57;
                        return __generator(this, function (_e) {
                            switch (_e.label) {
                                case 0:
                                    _e.trys.push([0, 5, , 6]);
                                    _c = this;
                                    if (!(name != null)) return [3 /*break*/, 2];
                                    return [4 /*yield*/, this.CompanyGroupsService.searchGroups(name)];
                                case 1:
                                    _d = _e.sent();
                                    return [3 /*break*/, 4];
                                case 2: return [4 /*yield*/, this.CompanyGroupsService.getGroups()];
                                case 3:
                                    _d = _e.sent();
                                    _e.label = 4;
                                case 4:
                                    _c.groups = _d;
                                    promiseArray = [];
                                    // for (const group of this.groups) group.endUserDTOList = await this.CompanyGroupsService.getGroupUsers(group.id);
                                    this.updateDom();
                                    return [3 /*break*/, 6];
                                case 5:
                                    error_57 = _e.sent();
                                    this.showToastMessage('There was an issue retrieving the list of groups');
                                    Rollbar.error(error_57);
                                    return [3 /*break*/, 6];
                                case 6: return [2 /*return*/];
                            }
                        });
                    });
                };
                this.fetchEmployees = function () {
                    _this.CompanyEmployeesService.getEmployees()
                        .then(function (result) {
                        _this.companyEmployees = result.data;
                        _this.companyEmployees.sort(function (a, b) { return a.employeeid - b.employeeid; });
                    })
                        .catch(function (error) { return _this.showToastMessage('There was an issue retrieving the employees'); });
                };
                this.showConfirmDeletionDialog = function (group) {
                    var deleteGroup = function () {
                        _this.CompanyGroupsService.deleteGroup(group.id)
                            .then(function (result) {
                            if (result.status === 200) {
                                _this.showToastMessage("Successfully delete group " + group.name);
                                _this.groups = _this.groups.filter(function (currentGroup) { return currentGroup.id !== group.id; });
                                _this.updateDom();
                                return;
                            }
                            _this.showToastMessage('There was an issue deleting the group');
                        })
                            .catch(function (error) { return _this.showToastMessage('There was an issue deleting the group'); });
                    };
                    var dialog = _this.DialogService.buildDialog({
                        title: "Are you sure you want to delete " + group.name + " group?",
                        okText: 'Yes',
                        cancelText: 'No'
                    });
                    _this.DialogService.showDialog({ dialog: dialog, onOk: deleteGroup });
                };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.navigateToGroupDetails = function (group) { return _this.$state.go('root.company.group_details', { group: group, employees: _this.companyEmployees }); };
            }
            GroupsController.prototype.updateDom = function () { if (!this.$scope.$$phase)
                this.$scope.$apply(); };
            GroupsController.$inject = ["$scope", "$mdToast", "$state", "company.groupsService", "company.employeesService", "DialogService", "redirectIfNotLoggedIn"];
            return GroupsController;
        }());
        app.controller("company.GroupsController", GroupsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        'use strict';
        var app = Qna.getModule();
        var CustomCompetencyController = /** @class */ (function () {
            function CustomCompetencyController($scope, $state, $stateParams, $mdToast, $window, CompanyCompetenciesService, redirectIfNotLoggedIn) {
                var _this = this;
                this.$scope = $scope;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.$mdToast = $mdToast;
                this.$window = $window;
                this.CompanyCompetenciesService = CompanyCompetenciesService;
                this.redirectIfNotLoggedIn = redirectIfNotLoggedIn;
                this.ratingDefinitions = {
                    0: { stars: 'one', label: 'Very Poor', field: 'oneStarRatingDefinition' },
                    1: { stars: 'two', label: 'Poor', field: 'twoStarRatingDefinition' },
                    2: { stars: 'three', label: 'Fair', field: 'threeStarRatingDefinition' },
                    3: { stars: 'four', label: 'Good', field: 'fourStarRatingDefinition' },
                    4: { stars: 'five', label: 'Excellent', field: 'fiveStarRatingDefinition' }
                };
                this.submitForm = function () { return __awaiter(_this, void 0, void 0, function () {
                    var request, competency, error_58;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.competency.interviewId = this.interviewId;
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                if (this.competency.description == null || this.competency.description == "") {
                                    this.competency.description = "N/A";
                                }
                                this.ratings.forEach(function (rating, index) {
                                    if (_this.competency[rating.modelField] == null) {
                                        _this.competency[rating.modelField] = " ";
                                    }
                                });
                                console.log(this.competency);
                                request = this.isNewMode ?
                                    this.CompanyCompetenciesService.createCustomCompetency :
                                    this.CompanyCompetenciesService.updateCustomCompetency;
                                return [4 /*yield*/, request(this.competency)];
                            case 2:
                                competency = _a.sent();
                                this.showToastMessage("Successfully " + (this.isNewMode ? 'created' : 'modified') + " " + competency.name + " competency");
                                setTimeout(function () { return _this.$state.go('root.company.questions', { interviewId: _this.interviewId }); }, 500);
                                return [3 /*break*/, 4];
                            case 3:
                                error_58 = _a.sent();
                                this.showToastMessage("There was an issue " + (this.isNewMode ? 'creating' : 'modifiying') + " the competency");
                                Rollbar.error(error_58);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); };
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var interviewCompetencies;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (this.isNewMode)
                                    return [2 /*return*/];
                                return [4 /*yield*/, this.CompanyCompetenciesService.getInterviewCustomCompetencies(this.interviewId)];
                            case 1:
                                interviewCompetencies = _a.sent();
                                this.competency = interviewCompetencies.find(function (competency) { return competency.id === _this.competencyId; });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position("top left")
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.updateDom = function () { if (!_this.$scope.$$phase)
                    _this.$scope.$apply(); };
                this.isNewMode = !this.$stateParams.competencyId;
                this.interviewId = this.$stateParams.interviewId;
                if (!this.isNewMode)
                    this.competencyId = this.$stateParams.competencyId;
                this.ratings = Array.from({ length: 5 }).map(function (element, index) { return ({
                    modelField: _this.ratingDefinitions[index].field,
                    label: index + 1 + " - " + _this.ratingDefinitions[index].label,
                    placeholder: "What are you looking for in a " + _this.ratingDefinitions[index].stars + " star answer?"
                }); }).reverse();
            }
            CustomCompetencyController.$inject = [
                "$scope",
                "$state",
                "$stateParams",
                "$mdToast",
                "$window",
                "company.competenciesService",
                "redirectIfNotLoggedIn"
            ];
            return CustomCompetencyController;
        }());
        app.controller("company.CustomCompetencyController", CustomCompetencyController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        'use stric';
        var app = Qna.getModule();
        var EmailTemplateController = /** @class */ (function () {
            function EmailTemplateController($scope, $state, $sce, $templateRequest, $compile, $stateParams, $mdMedia, $mdToast, $http, CompanyInterviewsService, redirectIfNotLoggedIn) {
                var _this = this;
                this.$scope = $scope;
                this.$state = $state;
                this.$sce = $sce;
                this.$templateRequest = $templateRequest;
                this.$compile = $compile;
                this.$stateParams = $stateParams;
                this.$mdMedia = $mdMedia;
                this.$mdToast = $mdToast;
                this.$http = $http;
                this.CompanyInterviewsService = CompanyInterviewsService;
                this.redirectIfNotLoggedIn = redirectIfNotLoggedIn;
                this.originalTemplates = {};
                this.templateVariables = { greeting: [], info: [], footer: [] };
                this.compiledFragments = { greeting: '', info: '', footer: '', };
                this.templateFragments = { greeting: '', info: '', footer: '' };
                this.showPreview = false;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, _b, _i, _c, fragment, _d, _e;
                    var _this = this;
                    return __generator(this, function (_f) {
                        switch (_f.label) {
                            case 0:
                                _a = this;
                                return [4 /*yield*/, this.getInterview()];
                            case 1:
                                _a.interview = _f.sent();
                                return [4 /*yield*/, this.$http.get("/system/settings/show/email")
                                        .then(function (result) {
                                        console.info(result.data);
                                        _this.emailSettings = result.data;
                                    })];
                            case 2:
                                _f.sent();
                                /* this.$http.get("/system/whitelabel/active")
                                    .then((result: ng.IHttpResponse<IWhiteLabel>) => {
                                        this.whiteLabel = <IWhiteLabel>result.data;
                                        sessionStorage.setItem("whitelabel", JSON.stringify(this.whiteLabel));
                                    }, (error) => {
                                        console.log("Error Loading Active White Labelling");
                                }); */
                                this.whiteLabel = JSON.parse(sessionStorage.getItem("whitelabel"));
                                _b = this;
                                return [4 /*yield*/, this.getCurrentEmailTemplate()];
                            case 3:
                                _b.currentEmailTemplate = _f.sent();
                                this.templateFragments = {
                                    greeting: '/templates/greeting-fragment.html',
                                    info: '/templates/info-fragment.html',
                                    footer: '/templates/footer-fragment.html'
                                };
                                this.templateVariables = {
                                    greeting: [
                                        { key: 'email-greeting', preview: this.emailSettings.email_greeting, placeholder: '[Greetings]' },
                                        { key: 'course-name', preview: this.interview.role, placeholder: '[Course Name]' },
                                        { key: 'title', preview: this.emailSettings.title, placeholder: '[Client Title]' }
                                    ],
                                    info: [
                                        { key: 'deadline', preview: new Date(this.interview.deadline).toLocaleDateString(), placeholder: '[dd/mm/yyyy]' },
                                        { key: 'system-url', preview: this.emailSettings.system_url, placeholder: '[System Url]' },
                                        { key: 'button-color', preview: this.whiteLabel.actionButtonColor, placeholder: '[System Url]' },
                                        { key: 'button-bg', preview: this.whiteLabel.actionButtonBg, placeholder: '[System Url]' },
                                    ],
                                    footer: [
                                        { key: 'address', preview: this.emailSettings.footer_address, placeholder: '[Address]' },
                                        { key: 'link', preview: this.emailSettings.footer_link, placeholder: '[Website Link]' },
                                        { key: 'link-text', preview: this.emailSettings.footer_link, placeholder: '[Website Link]' },
                                        { key: 'logo', preview: this.emailSettings.footer_logo, placeholder: '[Logo]' },
                                        //{ key: 'interview-creator', preview: this.interview.creator.fullName, placeholder: '[Interview Creator]' },
                                    ]
                                };
                                this.fullTemplate = this.getFullTemplate();
                                _i = 0, _c = Object.keys(this.templateFragments);
                                _f.label = 4;
                            case 4:
                                if (!(_i < _c.length)) return [3 /*break*/, 7];
                                fragment = _c[_i];
                                _d = this.compiledFragments;
                                _e = fragment;
                                return [4 /*yield*/, this.getFragment(this.templateFragments[fragment])];
                            case 5:
                                _d[_e] = _f.sent();
                                _f.label = 6;
                            case 6:
                                _i++;
                                return [3 /*break*/, 4];
                            case 7:
                                this.originalTemplates = JSON.parse(JSON.stringify(this.compiledFragments));
                                this.$scope.$watch('emailTemplates.customTextEmailTemplate', function (newValue) { return __awaiter(_this, void 0, void 0, function () {
                                    return __generator(this, function (_a) {
                                        this.fullTemplate = this.getFullTemplate();
                                        this.updateDom();
                                        return [2 /*return*/];
                                    });
                                }); });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.saveTemplate = function () { return __awaiter(_this, void 0, void 0, function () {
                    var saveMethod, _a, error_59;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 3, , 4]);
                                saveMethod = this.currentEmailTemplate.length > 0 ?
                                    this.CompanyInterviewsService.modifyInterviewEmailTemplate :
                                    this.CompanyInterviewsService.createInterviewEmailTemplate;
                                return [4 /*yield*/, saveMethod(this.interviewId, { template: this.customTextEmailTemplate })];
                            case 1:
                                _b.sent();
                                this.showToastMessage("Successfully saved email template for " + this.interview.role);
                                _a = this;
                                return [4 /*yield*/, this.getCurrentEmailTemplate()];
                            case 2:
                                _a.currentEmailTemplate = _b.sent();
                                return [3 /*break*/, 4];
                            case 3:
                                error_59 = _b.sent();
                                Rollbar.error(error_59);
                                this.showToastMessage("There was an issue saving the email template");
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); };
                this.getInterview = function () { return __awaiter(_this, void 0, void 0, function () {
                    var error_60;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                if (this.$stateParams.interview != null)
                                    return [2 /*return*/, this.$stateParams.interview];
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.CompanyInterviewsService.getInterviews()];
                            case 2: return [2 /*return*/, (_a.sent())
                                    .find(function (interview) { return interview.guid === _this.interviewId; })];
                            case 3:
                                error_60 = _a.sent();
                                Rollbar.error(error_60);
                                this.showToastMessage("There was an issue retrieving the interview");
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); };
                this.getCurrentEmailTemplate = function () { return __awaiter(_this, void 0, void 0, function () {
                    var template, error_61;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                template = '';
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.CompanyInterviewsService.getInterviewEmailTemplate(this.interviewId)];
                            case 2:
                                template = (_a.sent()).template || '';
                                this.customTextEmailTemplate = template;
                                return [3 /*break*/, 4];
                            case 3:
                                error_61 = _a.sent();
                                Rollbar.error(error_61);
                                this.showToastMessage("There was an issue retrieving the email template");
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/, template];
                        }
                    });
                }); };
                this.getFullTemplate = function () {
                    var compiledTemplates = [
                        _this.getParametrizedTemplate('greeting', true),
                        _this.getParametrizedTemplate('info', true),
                        _this.getParametrizedTemplate('footer', true)
                    ];
                    if (!_this.isCustomTextEmpty())
                        compiledTemplates.splice(1, 0, _this.customTextEmailTemplate);
                    return compiledTemplates.join('');
                };
                this.getPreviewTemplate = function () { return [
                    _this.getParametrizedTemplate('greeting', true),
                    _this.currentEmailTemplate,
                    _this.getParametrizedTemplate('info', true),
                    _this.getParametrizedTemplate('footer', true)
                ].join(''); };
                this.getParametrizedTemplate = function (template, preview) {
                    if (preview === void 0) { preview = false; }
                    if (_this.originalTemplates[template] == null)
                        return '';
                    var compiledTemplate = JSON.parse(JSON.stringify(_this.originalTemplates[template]));
                    var templateVariables = _this.templateVariables[template];
                    templateVariables.forEach(function (variable) {
                        return compiledTemplate = compiledTemplate.replace("%%%" + variable.key + "%%%", preview ? variable.preview : variable.placeholder);
                    });
                    return compiledTemplate;
                };
                this.getFragment = function (templatePath) { return __awaiter(_this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                if (templatePath == null)
                                    return [2 /*return*/, ''];
                                _a = this.$compile;
                                return [4 /*yield*/, this.$templateRequest(this.$sce.getTrustedResourceUrl(templatePath))];
                            case 1: return [2 /*return*/, _a.apply(this, [(_b.sent())])(this.$scope).html()];
                        }
                    });
                }); };
                this.isCustomTextEmpty = function () { return _this.customTextEmailTemplate === '<p><br></p>'; };
                this.showToastMessage = function (message) { return _this.$mdToast.show(_this.$mdToast
                    .simple()
                    .position("top left")
                    .textContent(message)
                    .theme("toasttheme")); };
                this.updateDom = function () { if (!_this.$scope.$$phase)
                    _this.$scope.$apply(); };
                this.interviewId = this.$stateParams.interviewId;
            }
            EmailTemplateController.$inject = [
                "$scope",
                "$state",
                "$sce",
                "$templateRequest",
                "$compile",
                "$stateParams",
                "$mdMedia",
                "$mdToast",
                "$http",
                "company.interviewsService",
                "redirectIfNotLoggedIn"
            ];
            return EmailTemplateController;
        }());
        app.controller("company.EmailTemplateController", EmailTemplateController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var FlaggedInterviewsController = /** @class */ (function () {
            function FlaggedInterviewsController($scope, $state, $mdToast, $mdDialog, CompanyInterviewsService, CompanyRecordingsService, CompanyInvitationsService, redirectIfNotLoggedIn) {
                var _this = this;
                this.$scope = $scope;
                this.$state = $state;
                this.$mdToast = $mdToast;
                this.$mdDialog = $mdDialog;
                this.CompanyInterviewsService = CompanyInterviewsService;
                this.CompanyRecordingsService = CompanyRecordingsService;
                this.CompanyInvitationsService = CompanyInvitationsService;
                this.redirectIfNotLoggedIn = redirectIfNotLoggedIn;
                this.SURVEY_QUESTIONS = Qna.SURVEY_QUESTIONS;
                this.commentLengthLimit = 100;
                this.searchableFields = ['candidateName', 'applicantId', 'candidateEmail', 'flaggedBy'];
                this.sortableFields = [
                    {
                        label: 'Date Submitted',
                        directions: [
                            { label: 'Submitted Last', value: { direction: 'desc', field: 'dateSumitted' } },
                            { label: 'Submitted First', value: { direction: 'asc', field: 'dateSumitted' } }
                        ]
                    },
                    {
                        label: 'Date Flagged',
                        directions: [
                            { label: 'Flagged Last', value: { direction: 'desc', field: 'flaggedOn' } },
                            { label: 'Flagged First', value: { direction: 'asc', field: 'flaggedOn' } }
                        ]
                    }
                ];
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var interviews, recordings, _loop_9, this_6, _i, interviews_2, interview;
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                this.interviewButtons = [
                                    { label: 'Applicant Feedback', icon: 'chat_buble', onclick: this.showCandidateFeedback, enabled: this.feedbackEnabled },
                                    { label: 'Watch Interview', icon: 'play_arrow', onclick: this.watchInterview, enabled: this.watchInterviewEnabled },
                                    { label: 'Written Answers', icon: 'edit', onclick: this.watchWrittenAnswers, enabled: this.writtenAnswerEnabled },
                                    { label: 'Documents', icon: 'insert_drive_file', onclick: this.showDocuments, enabled: this.documentsEnabled },
                                ];
                                return [4 /*yield*/, this.CompanyInterviewsService.getInterviews()];
                            case 1:
                                interviews = _a.sent();
                                recordings = [];
                                _loop_9 = function (interview) {
                                    var interviewRecordings;
                                    return __generator(this, function (_b) {
                                        switch (_b.label) {
                                            case 0: return [4 /*yield*/, this_6.CompanyRecordingsService.getFlaggedInterviewRecordings(interview.guid)];
                                            case 1:
                                                interviewRecordings = _b.sent();
                                                interviewRecordings.forEach(function (recording) { return recording.interviewId = interview.guid; });
                                                recordings = __spreadArray(__spreadArray([], recordings), interviewRecordings);
                                                return [2 /*return*/];
                                        }
                                    });
                                };
                                this_6 = this;
                                _i = 0, interviews_2 = interviews;
                                _a.label = 2;
                            case 2:
                                if (!(_i < interviews_2.length)) return [3 /*break*/, 5];
                                interview = interviews_2[_i];
                                return [5 /*yield**/, _loop_9(interview)];
                            case 3:
                                _a.sent();
                                _a.label = 4;
                            case 4:
                                _i++;
                                return [3 /*break*/, 2];
                            case 5:
                                try {
                                    this.flaggedInterviews = recordings;
                                    this.flaggedInterviews.forEach(function (interview) { return interview.showFullComment = false; });
                                    this.displayInterviews = JSON.parse(JSON.stringify(this.flaggedInterviews));
                                }
                                catch (error) {
                                    this.showToastMessage('There was an issue retrieving the flagged interviews');
                                }
                                this.$scope.$on('flagged-interviews-searchChanged', function (event, searchTerm) { return _this.searchInterviews(searchTerm); });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.feedbackEnabled = function (recording) {
                    return recording.candidateFeedback != null ||
                        recording.candidateFeedBackQ1 !== null || recording.candidateFeedBackQ1 !== undefined ||
                        recording.candidateFeedBackQ2 !== null || recording.candidateFeedBackQ2 !== undefined ||
                        recording.candidateFeedBackQ3 !== null || recording.candidateFeedBackQ3 !== undefined;
                };
                this.watchInterviewEnabled = function (recording) { return recording.videoResponses.length > 0; };
                this.ratingEnabled = function (recording) { return recording.reviewed; };
                this.documentsEnabled = function (recording) { return recording.hasDocuments; };
                this.writtenAnswerEnabled = function (recording) { return recording.textResponses && recording.textResponses.length > 0; };
                this.showMore = function (interview) { return interview.showFullComment = true; };
                this.showLess = function (interview) { return interview.showFullComment = false; };
                this.getLimit = function (interview) { return interview.showFullComment ? interview.flaggedComment.length : _this.commentLengthLimit; };
                this.needShowMoreButton = function (interview) { return interview.flaggedComment.length > _this.commentLengthLimit; };
                this.getUserFriendlyDate = function (date) { return new Date(date).toLocaleDateString(); };
                this.searchInterviews = function (searchTerm) {
                    _this.displayInterviews = _this.flaggedInterviews.filter(function (interview) { return _this.searchableFields
                        .map(function (field) { return interview[field].toString().toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1; })
                        .some(function (fieldMatch) { return fieldMatch; }); });
                    _this.updateDom();
                };
                this.reviewFlag = function (interview) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        try {
                            this.$state.go('root.company.flag-review', { recording: interview, interviewId: interview.interviewId, invitationId: interview.invitationId });
                        }
                        catch (error) {
                            this.showToastMessage('There was an issue going to flag review');
                        }
                        return [2 /*return*/];
                    });
                }); };
                this.showCandidateFeedback = function (recording) {
                    _this.linkDialog = _this.$mdDialog
                        .show({
                        controller: FlaggedInterviewsController,
                        controllerAs: "recordings",
                        bindToController: true,
                        templateUrl: "views/company/dialogs/candidate-feedback.html",
                        locals: { currentRecording: recording },
                        parent: angular.element(document.body),
                        clickOutsideToClose: true,
                        escapeToClose: true
                    })
                        .then(function () {
                        console.debug("You clicked the button to close the bottom sheet");
                    })
                        .catch(function () {
                        console.debug("You clicked cancel button");
                    });
                };
                this.getStarsClass = function (currentRecording, questionIndex, stars) {
                    var result = 'material-icons star no-highlight';
                    var attName = "candidateFeedBackQ" + (questionIndex + 1);
                    result += currentRecording[attName] < stars ? ' disabled' : ' enabled';
                    return result;
                };
                this.sortInterviews = function () {
                    var sort = function (a, b) { return _this.sort.direction === 'asc' ?
                        a[_this.sort.field] - b[_this.sort.field] :
                        b[_this.sort.field] - a[_this.sort.field]; };
                    _this.flaggedInterviews.sort(function (a, b) { return sort(a, b); });
                    _this.displayInterviews.sort(function (a, b) { return sort(a, b); });
                    _this.updateDom();
                };
                this.watchInterview = function (recording) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this.$state.go('root.company.player', { recording: recording, interviewId: recording.interviewId, recordings: [recording], invitationid: recording.invitationId });
                        return [2 /*return*/];
                    });
                }); };
                this.watchWrittenAnswers = function (recording) { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this.$state.go('root.company.essayanswerrs', {
                            interviewId: recording.interviewId, invitationid: recording.invitationId
                        });
                        return [2 /*return*/];
                    });
                }); };
                this.showDocuments = function (recording) {
                    _this.$state.go('root.company.documents', {
                        type: 'one', interviewid: recording.interviewId, enduserid: recording.candidateId
                    });
                };
                this.showToastMessage = function (message) { return _this.$mdToast.show(_this.$mdToast
                    .simple()
                    .position("top left")
                    .textContent(message)
                    .theme("toasttheme")); };
            }
            FlaggedInterviewsController.prototype.updateDom = function () { if (!this.$scope.$$phase)
                this.$scope.$apply(); };
            FlaggedInterviewsController.$inject = [
                "$scope", "$state", "$mdToast", "$mdDialog", "company.interviewsService",
                "company.recordingsService", "company.invitationsService"
            ];
            return FlaggedInterviewsController;
        }());
        app.controller("company.FlaggedInterviewsController", FlaggedInterviewsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var FlowInterviewsController = /** @class */ (function () {
            function FlowInterviewsController($http, $scope, $mdMedia, SessionService, CSVDownloadService, $mdToast) {
                var _this = this;
                this.$http = $http;
                this.$scope = $scope;
                this.$mdMedia = $mdMedia;
                this.SessionService = SessionService;
                this.CSVDownloadService = CSVDownloadService;
                this.$mdToast = $mdToast;
                this.$onInit = function () { };
                this.fileElement = document.getElementById("file");
                this.fileReader = new FileReader();
                this.uploadReady = false;
                this.wrongFileType = false;
                this.updateDom();
                this.fileElement.onchange = function (ev) {
                    console.info("File Changed");
                    _this.file = _this.fileElement.files[0];
                    _this.fileReader.readAsText(_this.file);
                };
                this.fileReader.onloadend = function (ev) {
                    console.info("File Reader On load " + _this.file.name);
                    if (/\.csv$/i.test(_this.file.name)) {
                        console.info("File Reader On load");
                        _this.wrongFileType = false;
                        _this.uploadReady = true;
                        _this.updateDom();
                    }
                    else {
                        console.info("File Reader On load Else");
                        _this.wrongFileType = true;
                        _this.uploadReady = false;
                        _this.updateDom();
                    }
                };
            }
            FlowInterviewsController.prototype.updateDom = function () {
                if (!this.$scope.$$phase) {
                    this.$scope.$apply();
                }
            };
            FlowInterviewsController.prototype.downloadResponse = function () {
                var headersArrayList = ['applicantId', 'fromInterviewName', 'toInterviewName', 'resultText', 'resultMessage'];
                if (this.SessionService.isRoleAdmin()) {
                    headersArrayList = ['applicantId', 'toInterviewName', 'resultText', 'resultMessage'];
                }
                if (this.uploadResponse) {
                    this.CSVDownloadService.downloadFile(this.uploadResponse.uploadResults, 'BulkFlowResult', headersArrayList);
                    //this.downloadFile(this.uploadResponse.uploadResults, 'BulkFlowResult');
                }
            };
            FlowInterviewsController.prototype.upload = function () {
                var _this = this;
                this.formData = new FormData();
                this.formData.append('file', this.file);
                this.$http.post("/company/interviews/bulk-flow", this.formData, {
                    transformRequest: angular.identity,
                    headers: {
                        'Content-Type': undefined
                    }
                }).then(function (result) {
                    _this.uploadResponse = result.data;
                    _this.fileElement.value = null;
                    _this.updateDom();
                    _this.uploadReady = false;
                    _this.wrongFileType = false;
                }, function (error) {
                    _this.$mdToast.show(_this.$mdToast.simple()
                        .textContent(error.data.message)
                        .position('top left')
                        .hideDelay(10000)
                        .theme("toasttheme"));
                });
            };
            FlowInterviewsController.$inject = ["$http", "$scope", "$mdMedia", "SessionService", "company.CSVService", "$mdToast"];
            return FlowInterviewsController;
        }());
        app.controller("company.FlowInterviewsController", FlowInterviewsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var ReattemptsController = /** @class */ (function () {
            function ReattemptsController($scope, $state, $mdToast, $mdDialog, CompanyInterviewsService, CompanyInvitationsService, redirectIfNotLoggedIn) {
                var _this = this;
                this.$scope = $scope;
                this.$state = $state;
                this.$mdToast = $mdToast;
                this.$mdDialog = $mdDialog;
                this.CompanyInterviewsService = CompanyInterviewsService;
                this.CompanyInvitationsService = CompanyInvitationsService;
                this.redirectIfNotLoggedIn = redirectIfNotLoggedIn;
                this.SURVEY_QUESTIONS = Qna.SURVEY_QUESTIONS;
                this.commentLengthLimit = 100;
                this.searchableFields = ['applicantName', 'applicantId', 'interviewName', 'applicantEmail'];
                this.sortableFields = [
                    {
                        label: 'Incomplete attempt date',
                        directions: [
                            { label: 'Incompleted last', value: { direction: 'desc', field: 'incompleteAttemptDate' } },
                            { label: 'Incompleted first', value: { direction: 'asc', field: 'incompleteAttemptDate' } }
                        ]
                    },
                    {
                        label: 'Additional attempts given',
                        directions: [
                            { label: 'More attempts given', value: { direction: 'desc', field: 'attemptsAlreadyGranted' } },
                            { label: 'Less attempts given', value: { direction: 'asc', field: 'attemptsAlreadyGranted' } }
                        ]
                    }
                ];
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _this = this;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.list()];
                            case 1:
                                _a.sent();
                                this.$scope.$on('reattempt-searchChanged', function (event, searchTerm) { return _this.searchRequests(searchTerm); });
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.list = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a, error_62;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                _b.trys.push([0, 2, , 3]);
                                _a = this;
                                return [4 /*yield*/, this.CompanyInvitationsService.getReattempts()];
                            case 1:
                                _a.requests = _b.sent();
                                this.requests.forEach(function (interview) { return interview.showFullComment = false; });
                                this.displayRequests = JSON.parse(JSON.stringify(this.requests));
                                return [3 /*break*/, 3];
                            case 2:
                                error_62 = _b.sent();
                                Rollbar.error(error_62);
                                this.showToastMessage('There was an issue retrieving the reattempt requests');
                                return [3 /*break*/, 3];
                            case 3: return [2 /*return*/];
                        }
                    });
                }); };
                this.showMore = function (interview) { return interview.showFullComment = true; };
                this.showLess = function (interview) { return interview.showFullComment = false; };
                this.getLimit = function (interview) { return interview.showFullComment ? interview.comment.length : _this.commentLengthLimit; };
                this.needShowMoreButton = function (interview) { return interview.comment.length > _this.commentLengthLimit; };
                this.getUserFriendlyDate = function (date) { return new Date(date).toLocaleDateString(); };
                this.searchRequests = function (searchTerm) {
                    _this.displayRequests = _this.requests.filter(function (interview) { return _this.searchableFields
                        .map(function (field) { return interview[field].toString().toLowerCase().indexOf(searchTerm.toLowerCase()) !== -1; })
                        .some(function (fieldMatch) { return fieldMatch; }); });
                    _this.updateDom();
                };
                this.allowRetake = function (requestReattemptId) { return __awaiter(_this, void 0, void 0, function () {
                    var error_63;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 3, , 4]);
                                return [4 /*yield*/, this.CompanyInvitationsService.changeReattemptStatus(requestReattemptId, true)];
                            case 1:
                                _a.sent();
                                this.showToastMessage('Successfully allowed reattempt');
                                return [4 /*yield*/, this.list()];
                            case 2:
                                _a.sent();
                                this.updateDom();
                                return [3 /*break*/, 4];
                            case 3:
                                error_63 = _a.sent();
                                this.showToastMessage('There was an issue allowing the reattempt');
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); };
                this.rejectRetake = function (requestReattemptId) { return __awaiter(_this, void 0, void 0, function () {
                    var error_64;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                _a.trys.push([0, 3, , 4]);
                                return [4 /*yield*/, this.CompanyInvitationsService.changeReattemptStatus(requestReattemptId, false)];
                            case 1:
                                _a.sent();
                                this.showToastMessage('Successfully rejected reattempt');
                                return [4 /*yield*/, this.list()];
                            case 2:
                                _a.sent();
                                this.updateDom();
                                return [3 /*break*/, 4];
                            case 3:
                                error_64 = _a.sent();
                                this.showToastMessage('There was an issue rejecting the reattempt');
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                }); };
                this.sortRequests = function () {
                    var sort = function (a, b) { return _this.sort.direction === 'asc' ?
                        a[_this.sort.field] - b[_this.sort.field] :
                        b[_this.sort.field] - a[_this.sort.field]; };
                    _this.requests.sort(function (a, b) { return sort(a, b); });
                    _this.displayRequests.sort(function (a, b) { return sort(a, b); });
                    _this.updateDom();
                };
                this.showToastMessage = function (message) { return _this.$mdToast.show(_this.$mdToast
                    .simple()
                    .position("top left")
                    .textContent(message)
                    .theme("toasttheme")); };
            }
            ReattemptsController.prototype.updateDom = function () { if (!this.$scope.$$phase)
                this.$scope.$apply(); };
            ReattemptsController.$inject = ["$scope", "$state", "$mdToast", "$mdDialog", "company.interviewsService", "company.invitationsService"];
            return ReattemptsController;
        }());
        app.controller("company.ReattemptsController", ReattemptsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var moment;
        var ReviewerDashboardController = /** @class */ (function () {
            function ReviewerDashboardController($http, $mdToast, $scope, SessionService, $state, invitationsService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$state = $state;
                this.invitationsService = invitationsService;
                this.TYPES = {};
                this.search = "";
                this.showNonReviewed = false;
                this.sortableFields = [
                    {
                        label: 'Creation Date',
                        directions: [
                            { label: 'Last Posted', value: '-creationDate' },
                            { label: 'First Posted', value: 'creationDate' }
                        ]
                    },
                    {
                        label: 'Deadline',
                        directions: [
                            { label: 'End First', value: '-deadline' },
                            { label: 'End Last', value: 'deadline' }
                        ]
                    },
                ];
                this.selectedPageNumber = 1;
                this.pageOptions = [10, 20, 50, 100];
                this.selectedSearchCriteria = "ALL";
                this.searchText = "";
                this.disableSearch = false;
                this.totalResults = 0;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        this.list();
                        return [2 /*return*/];
                    });
                }); };
                this.checkShowNonReviewedRecordings = function (interview) {
                    if (_this.showNonReviewed) {
                        return interview.pending > 0;
                    }
                    else {
                        return true;
                    }
                };
                this.sortInterviews = function () {
                    if (_this.sort.type === 'filter') {
                        return _this.filterList();
                    }
                    else {
                        _this.interviews = _this.allInterviews;
                    }
                    var sort = function (a, b) {
                        var min = _this.sort.direction === 'asc' ? a : b;
                        var max = _this.sort.direction === 'asc' ? b : a;
                        var minField = _this.sort.subfield ? min[_this.sort.field][_this.sort.subfield] : min[_this.sort.field];
                        var maxField = _this.sort.subfield ? max[_this.sort.field][_this.sort.subfield] : max[_this.sort.field];
                        if (minField > maxField) {
                            return 1;
                        }
                        if (maxField > minField) {
                            return -1;
                        }
                        return 0;
                    };
                    _this.interviews.sort(function (a, b) { return sort(a, b); });
                    _this.updateDom();
                };
                this.showApplicationDetails = function (interview, recording) {
                    _this.$state.go("root.company.candidatedetails", {
                        interviewId: interview.guid,
                        applicationId: recording.invitationId
                    }, { reload: true });
                };
                this.showToastMessage = function (message) {
                    _this.$mdToast.show(_this.$mdToast
                        .simple()
                        .position("top left")
                        .textContent(message)
                        .theme("toasttheme"));
                };
                this.getReadableDate = function (date) { return new Date(date).toLocaleDateString('en-GB', {
                    day: 'numeric', month: 'short', year: 'numeric'
                }).replace(/ /g, '-'); };
                this.sort = this.sortableFields[0].directions[0];
                this.currentPage = 0;
                this.pageSize = 10;
            }
            ReviewerDashboardController.prototype.list = function () {
                var _this = this;
                this.$http.get("/company/interviews/owned", { params: { page: this.currentPage, pagesize: this.pageSize } }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.lastCalledSearch = 'list';
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReviewerDashboardController.prototype.previousPage = function () {
                var _this = this;
                this.currentPage = this.currentPage - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/owned", { params: params }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReviewerDashboardController.prototype.nextPage = function () {
                var _this = this;
                this.currentPage = this.currentPage + 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/owned", { params: params }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReviewerDashboardController.prototype.reloadPage = function () {
                var _this = this;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/owned", { params: params }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReviewerDashboardController.prototype.getPagesArray = function (num) {
                var array = [];
                for (var i = 1; i <= num; i++) {
                    array.push(i);
                }
                return array;
            };
            ReviewerDashboardController.prototype.selectedPage = function () {
                var _this = this;
                this.currentPage = this.selectedPageNumber - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.selectedPageNumber - 1, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("/company/interviews/owned", { params: params }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalPages = result.data.totalPages;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReviewerDashboardController.prototype.resultsPerPageChanged = function () {
                this.list();
            };
            ReviewerDashboardController.prototype.clearSearch = function () {
                this.disableSearch = false;
                this.searchText = "";
                this.selectedSearchCriteria = "ALL";
                this.currentPage = 0;
                this.list();
            };
            ReviewerDashboardController.prototype.searchInterviews = function () {
                var _this = this;
                this.currentPage = 0;
                this.disableSearch = true;
                this.$http.get("/company/interviews/owned", { params: { page: this.currentPage, pagesize: this.pageSize, search: this.selectedSearchCriteria, searchtext: this.searchText } }).then(function (result) {
                    _this.interviews = result.data.interviewDTOS;
                    _this.allInterviews = __spreadArray([], result.data.interviewDTOS);
                    _this.totalElements = result.data.totalElements;
                    _this.lastCalledSearch = 'search';
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReviewerDashboardController.prototype.filterList = function () {
                var _this = this;
                this.interviews = this.allInterviews
                    .filter(function (i) { return i.role.toLowerCase().includes(_this.search.toLowerCase()); })
                    .filter(function (i) { return _this.checkShowNonReviewedRecordings(i); });
                if (this.sort) {
                    this.interviews = this.interviews.filter(function (i) { return !_this.sort || _this.sort.type != 'filter' || !_this.sort.direction ||
                        i.interviewType.name === _this.sort.direction; });
                }
            };
            ReviewerDashboardController.prototype.updateDom = function () { if (!this.$scope.$$phase)
                this.$scope.$apply(); };
            ReviewerDashboardController.$inject = ["$http", "$mdToast", "$scope", "SessionService", "$state", "candidate.invitationsService"];
            return ReviewerDashboardController;
        }());
        app.controller("company.ReviewerDashboardController", ReviewerDashboardController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var Company;
    (function (Company) {
        "use strict";
        var app = Qna.getModule();
        var moment;
        var ReviewerRecordingsController = /** @class */ (function () {
            function ReviewerRecordingsController($http, $mdToast, $scope, SessionService, $state, $stateParams, invitationsService, interviewsService) {
                var _this = this;
                this.$http = $http;
                this.$mdToast = $mdToast;
                this.$scope = $scope;
                this.SessionService = SessionService;
                this.$state = $state;
                this.$stateParams = $stateParams;
                this.invitationsService = invitationsService;
                this.interviewsService = interviewsService;
                this.search = "";
                this.filterStatus = null;
                this.showNonReviewed = false;
                this.selectedPageNumber = 1;
                this.pageOptions = [10, 20, 50, 100];
                this.selectedSearchCriteria = "ALL";
                this.searchText = "";
                this.disableSearch = false;
                this.totalResults = 0;
                this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                    var _a;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                this.interviewId = this.$stateParams.interviewid;
                                _a = this;
                                return [4 /*yield*/, this.interviewsService.getInterview(this.interviewId)];
                            case 1:
                                _a.interview = (_b.sent());
                                this.list();
                                return [2 /*return*/];
                        }
                    });
                }); };
                this.checkShowNonReviewedRecordings = function (interview) {
                    if (_this.showNonReviewed) {
                        return interview.pending > 0;
                    }
                    else {
                        return true;
                    }
                };
                this.filterRecordingsByStatus = function () {
                    _this.currentPage = _this.selectedPageNumber - 1;
                    var params = {};
                    if (_this.searchText.length > 1 && _this.selectedSearchCriteria.length > 1) {
                        params = { search: _this.selectedSearchCriteria, searchtext: _this.searchText, page: _this.selectedPageNumber - 1,
                            pagesize: _this.pageSize, status: _this.filterStatus };
                    }
                    else {
                        params = { page: _this.currentPage, pagesize: _this.pageSize, status: _this.filterStatus };
                    }
                    _this.$http.get("company/recordings/assigned?interviewid=" + _this.interviewId, { params: params }).then(function (result) {
                        _this.recordings = result.data.recordingDTOS;
                        _this.allRecordings = __spreadArray([], result.data.recordingDTOS);
                        _this.totalPages = result.data.totalPages;
                        _this.totalResults = result.data.totalElements;
                    }, function (error) {
                        _this.$mdToast.showSimple("Some error has happened. See console for details");
                        Rollbar.error(error);
                    });
                };
                this.showApplicationDetails = function (recording) {
                    _this.$state.go("root.company.candidatedetails", {
                        interviewId: _this.interviewId,
                        applicationId: recording.invitationId
                    }, { reload: true });
                };
                this.getReadableDate = function (date) { return new Date(date).toLocaleDateString('en-GB', {
                    day: 'numeric', month: 'short', year: 'numeric'
                }).replace(/ /g, '-'); };
                this.currentPage = 0;
                this.pageSize = 10;
            }
            ReviewerRecordingsController.prototype.list = function () {
                var _this = this;
                ///company/recordings/?interviewid=interviewId  
                this.$http.get("company/recordings/assigned?interviewid=" + this.interviewId, { params: { page: this.currentPage, pagesize: this.pageSize } }).then(function (result) {
                    _this.recordings = result.data.recordingDTOS;
                    _this.allRecordings = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    _this.lastCalledSearch = 'list';
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReviewerRecordingsController.prototype.previousPage = function () {
                var _this = this;
                this.currentPage = this.currentPage - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage,
                        pagesize: this.pageSize, status: this.filterStatus };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize, status: this.filterStatus };
                }
                this.$http.get("company/recordings/assigned?interviewid=" + this.interviewId, { params: params }).then(function (result) {
                    _this.recordings = result.data.recordingDTOS;
                    _this.allRecordings = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReviewerRecordingsController.prototype.nextPage = function () {
                var _this = this;
                this.currentPage = this.currentPage + 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage,
                        pagesize: this.pageSize, status: this.filterStatus };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize, status: this.filterStatus };
                }
                this.$http.get("company/recordings/assigned?interviewid=" + this.interviewId, { params: params }).then(function (result) {
                    _this.recordings = result.data.recordingDTOS;
                    _this.allRecordings = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReviewerRecordingsController.prototype.reloadPage = function () {
                var _this = this;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.currentPage, pagesize: this.pageSize };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize };
                }
                this.$http.get("company/recordings/assigned?interviewid=" + this.interviewId, { params: params }).then(function (result) {
                    _this.recordings = result.data.recordingDTOS;
                    _this.allRecordings = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                    //this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReviewerRecordingsController.prototype.getPagesArray = function (num) {
                var array = [];
                for (var i = 1; i <= num; i++) {
                    array.push(i);
                }
                return array;
            };
            ReviewerRecordingsController.prototype.selectedPage = function () {
                var _this = this;
                this.currentPage = this.selectedPageNumber - 1;
                var params = {};
                if (this.searchText.length > 1 && this.selectedSearchCriteria.length > 1) {
                    params = { search: this.selectedSearchCriteria, searchtext: this.searchText, page: this.selectedPageNumber - 1,
                        pagesize: this.pageSize, status: this.filterStatus };
                }
                else {
                    params = { page: this.currentPage, pagesize: this.pageSize, status: this.filterStatus };
                }
                this.$http.get("company/recordings/assigned?interviewid=" + this.interviewId, { params: params }).then(function (result) {
                    _this.recordings = result.data.recordingDTOS;
                    _this.allRecordings = __spreadArray([], result.data.recordingDTOS);
                    _this.totalPages = result.data.totalPages;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReviewerRecordingsController.prototype.resultsPerPageChanged = function () {
                this.list();
            };
            ReviewerRecordingsController.prototype.clearSearch = function () {
                this.disableSearch = false;
                this.searchText = "";
                this.selectedSearchCriteria = "ALL";
                this.currentPage = 0;
                this.list();
            };
            ReviewerRecordingsController.prototype.searchInterviews = function () {
                var _this = this;
                this.currentPage = 0;
                this.disableSearch = true;
                this.$http.get("company/recordings/assigned?interviewid=" + this.interviewId, { params: { page: this.currentPage, pagesize: this.pageSize, search: this.selectedSearchCriteria, searchtext: this.searchText } }).then(function (result) {
                    _this.recordings = result.data.recordingDTOS;
                    _this.allRecordings = __spreadArray([], result.data.recordingDTOS);
                    _this.totalElements = result.data.totalElements;
                    _this.lastCalledSearch = 'search';
                    _this.totalResults = result.data.totalElements;
                }, function (error) {
                    _this.$mdToast.showSimple("Some error has happened. See console for details");
                    Rollbar.error(error);
                });
            };
            ReviewerRecordingsController.prototype.updateDom = function () { if (!this.$scope.$$phase)
                this.$scope.$apply(); };
            ReviewerRecordingsController.$inject = ["$http", "$mdToast", "$scope", "SessionService", "$state", "$stateParams", "candidate.invitationsService", "company.interviewsService"];
            return ReviewerRecordingsController;
        }());
        app.controller("company.ReviewerRecordingsController", ReviewerRecordingsController);
    })(Company = Qna.Company || (Qna.Company = {}));
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    var InterviewCard = /** @class */ (function () {
        function InterviewCard() {
            this.restrict = 'E';
            this.templateUrl = 'components/interview-card.html';
            this.controllerAs = 'card';
            this.scope = {
                editMode: '=',
                interview: '@',
                interviewTypes: '=',
                systemModules: '=',
            };
            this.controller = InterviewCardController;
        }
        return InterviewCard;
    }());
    var InterviewCardController = /** @class */ (function () {
        function InterviewCardController($scope) {
            var _this = this;
            this.$scope = $scope;
            this.competencyTypes = Qna.COMPETENCY_TYPES;
            this.systemModules = new Map();
            this.allowDocumentUpload = false;
            this.hasCandidates = false;
            this.minDeadline = new Date();
            this.competencyType = 'Custom';
            this.create = function () {
                var interview = {
                    name: _this.name,
                    deadline: _this.deadline,
                    interviewTypeId: _this.type.id,
                    competencyType: _this.competencyType,
                    allowDocumentUpload: _this.allowDocumentUpload
                };
                _this.$scope.$emit('create', interview);
            };
            this.cancel = function () { return _this.$scope.$emit('cancel', _this.interview); };
            this.cancelAdd = function () { return _this.$scope.$emit('cancelAdd'); };
            this.update = function () {
                var interview = {
                    name: _this.name,
                    guid: _this.interview.guid,
                    deadline: _this.deadline,
                    interviewTypeId: _this.type.id,
                    competencyType: _this.competencyType,
                    allowDocumentUpload: _this.allowDocumentUpload
                };
                _this.$scope.$emit('update', interview);
            };
            this.$onInit = function () { };
            this.editMode = this.$scope.editMode;
            this.interviewTypes = this.$scope.interviewTypes;
            this.systemModules = this.$scope.systemModules;
            if (this.systemModules != undefined && !this.systemModules.hasOwnProperty("Interview Types")) {
                this.type = this.interviewTypes[0];
            }
            if (this.$scope.interview) {
                this.interview = JSON.parse(this.$scope.interview);
                this.name = this.interview.role;
                this.deadline = new Date(this.interview.deadline);
                this.type = this.interviewTypes.find(function (type) { return type.id === _this.interview.interviewType.id; });
                this.competencyType = this.interview.competencyType;
                //this.competencyTypes.find(type => type.value === this.interview.competencyType).value;
                //
                this.allowDocumentUpload = this.interview.allowDocumentUpload;
                this.hasCandidates = this.interview.hasCandidates;
            }
            else {
                var now = new Date();
                this.deadline = new Date(new Date().setDate(now.getDate() + 15));
            }
        }
        InterviewCardController.prototype.isFormValid = function () {
            return this.name && this.name.length > 0 &&
                this.deadline != null && this.type != null;
        };
        InterviewCardController.$inject = ["$scope"];
        return InterviewCardController;
    }());
    ;
    app.directive('ngInterviewCard', function () { return new InterviewCard(); });
})(Qna || (Qna = {}));
;
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    var InterviewMenu = /** @class */ (function () {
        function InterviewMenu() {
            this.restrict = 'E';
            this.templateUrl = 'components/interview-menu.html';
            this.controllerAs = 'imenu';
            this.scope = {
                isOpen: '=',
                isFull: '=',
                interviewId: '@'
            };
            this.controller = InterviewMenuController;
        }
        return InterviewMenu;
    }());
    var InterviewMenuController = /** @class */ (function () {
        function InterviewMenuController($scope, interviewsService, $state) {
            var _this = this;
            this.$scope = $scope;
            this.interviewsService = interviewsService;
            this.$state = $state;
            this.$onInit = function () { return __awaiter(_this, void 0, void 0, function () {
                var _a;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            _a = this;
                            return [4 /*yield*/, this.interviewsService.getInterview(this.interviewId)];
                        case 1:
                            _a.interview = _b.sent();
                            return [2 /*return*/];
                    }
                });
            }); };
            this.isOpen = this.$scope.isOpen;
            this.isFull = this.$scope.isFull;
            this.interviewId = this.$scope.interviewId;
        }
        InterviewMenuController.prototype.goToState = function (state, params) {
            this.$state.go(state, params);
        };
        InterviewMenuController.$inject = ["$scope", "company.interviewsService", "$state"];
        return InterviewMenuController;
    }());
    ;
    app.directive('ngInterviewMenu', function () { return new InterviewMenu(); });
})(Qna || (Qna = {}));
;
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    var QNAListCheckbox = /** @class */ (function () {
        function QNAListCheckbox() {
            this.restrict = 'E';
            this.templateUrl = 'components/qna-list-checkbox.html';
            this.controllerAs = 'list';
            this.scope = {
                elements: '=',
                selectedElementIndexes: "=",
                columns: '=',
                editable: '=',
                showSelectedCount: '=',
                disableOnCheck: '=',
                identifier: '@',
                subtitleIcon: '@',
                subtitle: '@'
            };
            this.link = function (scope, element, attrs) {
                scope.$watch('selectedElementIndexes', function (selectedElementIndexes, oldValue) {
                    if (selectedElementIndexes)
                        scope.$emit('selected-elements-change', { selectedElementIndexes: selectedElementIndexes });
                }, true);
                scope.$watch('elements', function (elements) {
                    scope.$emit('elements-change', { elements: elements });
                });
            };
            this.controller = QNAListCheckboxController;
        }
        return QNAListCheckbox;
    }());
    var QNAListCheckboxController = /** @class */ (function () {
        function QNAListCheckboxController($scope) {
            var _this = this;
            this.$scope = $scope;
            this.$onInit = function () {
                _this.$scope.$on('selected-elements-change', function (ev, _a) {
                    var selectedElementIndexes = _a.selectedElementIndexes;
                    _this.selectedElementIndexes = selectedElementIndexes;
                    _this.updateSelectedElements();
                    _this.updateSelectedCountText();
                });
                _this.$scope.$on('elements-change', function (ev, elements) {
                    _this.updateSelectedElements();
                    _this.updateSelectedCountText();
                });
            };
            this.updateSelectedElements = function () {
                _this.elements = _this.$scope.elements.map(function (element, index) {
                    if (element.checked)
                        return element;
                    if (_this.selectedElementIndexes.length === 0) {
                        element.checked = false;
                    }
                    else {
                        element.checked = _this.$scope.selectedElementIndexes.indexOf(index) !== -1;
                    }
                    return element;
                });
            };
            this.change = function (element) {
                _this.updateSelectedCountText();
                var checked = _this.elements.filter(function (element) { return element.checked; });
                var unchecked = _this.elements.filter(function (element) { return !element.checked; });
                _this.$scope.$emit(_this.identifier + "-listChanged", { checked: checked, unchecked: unchecked });
            };
            this.toggleElementState = function (element) {
                if (!_this.editable || (element.checked && _this.disableOnCheck))
                    return;
                element.checked = !element.checked;
                _this.change(element);
            };
            this.getColumnClass = function (element) { return ({
                'cursor-pointer highlight': (!_this.disableOnCheck && _this.editable ||
                    (_this.disableOnCheck && _this.editable && !element.checked))
            }); };
            this.updateSelectedCountText = function () {
                if (_this.$scope.showSelectedCount) {
                    _this.selectedCountText = _this.elements.filter(function (element) { return element.checked; }).length + "/" + _this.elements.length;
                }
            };
            this.columns = this.$scope.columns;
            this.identifier = this.$scope.identifier;
            this.editable = this.$scope.editable;
            this.subtitleIcon = this.$scope.subtitleIcon;
            this.subtitle = this.$scope.subtitle;
            this.disableOnCheck = this.$scope.disableOnCheck || false;
            this.selectedElementIndexes = this.$scope.selectedElementIndexes || [];
            this.updateSelectedElements();
            this.updateSelectedCountText();
        }
        QNAListCheckboxController.$inject = ["$scope"];
        return QNAListCheckboxController;
    }());
    ;
    app.directive('ngQnaListCheckbox', function () { return new QNAListCheckbox(); });
})(Qna || (Qna = {}));
;
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    var QNASearchInput = /** @class */ (function () {
        function QNASearchInput() {
            this.restrict = 'E';
            this.templateUrl = 'components/qna-search-input.html';
            this.controllerAs = 'search';
            this.scope = { searchPlaceholder: '@', identifier: '@', autocomplete: '=' };
            this.controller = QNASearchInputController;
        }
        return QNASearchInput;
    }());
    var QNASearchInputController = /** @class */ (function () {
        function QNASearchInputController($scope) {
            var _this = this;
            this.$scope = $scope;
            this.defaultSearchPlaceholder = 'Search';
            this.$onInit = function () { };
            this.changed = function () { return _this.$scope.$emit(_this.identifier + "-searchChanged", _this.searchTerm); };
            this.identifier = this.$scope.identifier;
            this.autocomplete = this.$scope.autocomplete;
            this.searchPlaceholder = this.$scope.searchPlaceholder || this.defaultSearchPlaceholder;
            ;
        }
        QNASearchInputController.$inject = ["$scope"];
        return QNASearchInputController;
    }());
    ;
    app.directive('ngQnaSearchInput', function () { return new QNASearchInput(); });
})(Qna || (Qna = {}));
;
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    var QuestionFormCard = /** @class */ (function () {
        function QuestionFormCard() {
            this.restrict = 'E';
            this.templateUrl = 'components/question-form-card.html';
            this.controllerAs = 'card';
            this.scope = {
                index: '@',
                question: '@',
                editMode: '=',
            };
            this.controller = QuestionFormCardController;
        }
        return QuestionFormCard;
    }());
    var QuestionFormCardController = /** @class */ (function () {
        function QuestionFormCardController($scope, SessionService, $mdDialog) {
            var _this = this;
            this.$scope = $scope;
            this.SessionService = SessionService;
            this.$mdDialog = $mdDialog;
            this.maxChoices = 10;
            this.otherChoiceText = 'Other';
            this.choicesNumbers = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'];
            this.questionTypes = [
                { id: 'TEXT', name: 'Written Answer' },
                { id: 'VIDEO', name: 'Video Response' },
                { id: 'MCQS', name: 'Multiple Choice' }
            ];
            this.choicesToDelete = [];
            this.isOk = true;
            this.canAddChoice = true;
            this.otherChoiceAdded = false;
            this.isFormValid = function () { return true; };
            this.create = function (questionForm) {
                if (!questionForm.$valid) {
                    document.getElementById('qAnswerime').focus();
                    for (var _i = 0, _a = questionForm.$$controls; _i < _a.length; _i++) {
                        var control = _a[_i];
                        control['$touched'] = true;
                    }
                    return;
                }
                var question = {
                    questionText: _this.questionText,
                    questionType: _this.questionType.id,
                    readingTime: _this.readingTime,
                    timeallowed: _this.timeallowed,
                    questionVideoURL: _this.questionVideoURL,
                    canChooseMultiple: _this.canChooseMultiple,
                    canAnswerShort: _this.canAnswerShort,
                    choices: _this.choices
                };
                _this.$scope.$emit('create', { question: question, file: _this.file });
            };
            this.cancel = function () { return _this.$scope.$emit('cancel', _this.question); };
            this.update = function () {
                var question = {
                    id: _this.question.id,
                    questionText: _this.questionText,
                    questionType: _this.questionType.id,
                    readingTime: _this.readingTime,
                    timeallowed: _this.timeallowed,
                    questionVideoURL: _this.questionVideoURL,
                    canChooseMultiple: _this.canChooseMultiple,
                    canAnswerShort: _this.canAnswerShort,
                    choices: _this.choices
                };
                _this.$scope.$emit('update', { question: question, file: _this.file });
                for (var _i = 0, _a = _this.choicesToDelete; _i < _a.length; _i++) {
                    var c = _a[_i];
                    _this.$scope.$emit('deleteChoice', { choiceId: c.id });
                }
                _this.choicesToDelete = [];
                if (_this.otherChoice) {
                    _this.deleteChoice(_this.otherChoice);
                    _this.otherChoice = null;
                }
            };
            this.openVideoModal = function () {
                function DialogController($scope, $mdDialog, question, fileReader, fileElement) {
                    var url = null;
                    var file = null;
                    if (question.questionVideoURL && question.questionVideoURL.includes('youtube')) {
                        $scope.youtubeUrl = question.questionVideoURL;
                    }
                    $scope.videoUrl = question.questionVideoURL;
                    $scope.urlChanged = function () {
                        $scope.videoUrl = null;
                        if ($scope.youtubeUrl == null)
                            return;
                        if (!$scope.youtubeUrl.toLowerCase().includes("embed") ||
                            !$scope.youtubeUrl.toLowerCase().includes("v=")) {
                            var video_id = $scope.youtubeUrl.split("v=")[1];
                            var ampersandPosition = video_id.indexOf("&");
                            if (ampersandPosition != -1)
                                video_id = video_id.substring(0, ampersandPosition);
                            $scope.youtubeUrl = "https://www.youtube.com/embed/" + video_id;
                            $scope.videoUrl = $scope.youtubeUrl;
                        }
                    };
                    $scope.updateDom = function () { if (!$scope.$$phase)
                        $scope.$apply(); };
                    setTimeout(function () {
                        fileElement = document.getElementById("file");
                        fileElement.onchange = function (ev) {
                            file = fileElement.files[0];
                            file.size > 104857600
                                ? console.log('Error: File Size greater than 100MB. Please try again')
                                : fileReader.readAsDataURL(file);
                        };
                        fileReader.onloadend = function (ev) {
                            $scope.videoUrl = URL.createObjectURL(file);
                            $scope.updateDom();
                        };
                    }, 0);
                    $scope.hide = function () {
                        $mdDialog.hide();
                    };
                    $scope.cancel = function () {
                        $mdDialog.cancel();
                    };
                    $scope.save = function () {
                        $mdDialog.hide({ file: file, url: $scope.youtubeUrl });
                    };
                }
                _this.$mdDialog.show({
                    controller: DialogController,
                    clickOutsideToClose: true,
                    templateUrl: 'views/company/dialogs/question-video.html',
                    locals: { question: _this.question, fileReader: _this.fileReader, fileElement: _this.fileElement }
                })
                    .then(function (answer) {
                    _this.questionVideoURL = answer.url;
                    _this.file = answer.file;
                });
            };
            this.addChoice = function () {
                if (_this.choices.length >= _this.maxChoices) {
                    _this.canAddChoice = false;
                    return;
                }
                var choice = {
                    choiceLabel: _this.choicesNumbers[_this.choices.length],
                    choiceText: ''
                };
                var index = _this.choices.findIndex(function (c) { return c.choiceText === _this.otherChoiceText; });
                if (index > -1) {
                    var otherChoice = _this.choices[index];
                    _this.choices.splice(index);
                    choice.choiceLabel = otherChoice.choiceLabel;
                    _this.choices.push(choice);
                    otherChoice.choiceLabel = _this.choicesNumbers[_this.choices.length];
                    _this.choices.push(otherChoice);
                }
                else {
                    _this.choices.push(choice);
                }
                if (_this.choices.length === _this.maxChoices) {
                    _this.canAddChoice = false;
                }
            };
            this.reorderChoices = function () {
                for (var i = 1; i < _this.choices.length; i++) {
                    _this.choices[i].choiceLabel = "" + (parseInt(_this.choices[i - 1].choiceLabel) + 1);
                }
            };
            this.onChangeCanAnswerShort = function () {
                var choice;
                if (_this.canAnswerShort) {
                    choice = {
                        choiceLabel: _this.choicesNumbers[_this.choices.length],
                        choiceText: _this.otherChoiceText,
                        reserved: true
                    };
                    _this.choices.push(choice);
                    _this.otherChoiceAdded = true;
                }
                else {
                    if (_this.choices.length === 2)
                        return;
                    var index = _this.choices.findIndex(function (c) { return c.choiceText === _this.otherChoiceText; });
                    choice = _this.choices[index];
                    _this.otherChoice = choice;
                    _this.choices.splice(index, 1);
                    _this.otherChoiceAdded = false;
                }
                _this.isChoiceDuplicated(choice);
                _this.reorderChoices();
                if (_this.choices.length < _this.maxChoices) {
                    _this.canAddChoice = true;
                }
                else if (_this.choices.length >= _this.maxChoices) {
                    _this.canAddChoice = false;
                }
            };
            this.onChangeChoiceText = function (choice) {
                _this.isChoiceDuplicated(choice);
            };
            this.deleteChoice = function (choice) {
                if (_this.choices.length === 2)
                    return;
                var index = -1;
                if (choice.id) {
                    _this.choicesToDelete.push(choice);
                    //this.$scope.$emit('deleteChoice', { choiceId: choice.id });
                    index = _this.choices.findIndex(function (c) { return c.id === choice.id; });
                }
                else {
                    index = _this.choices.findIndex(function (c) { return c.choiceLabel === choice.choiceLabel; });
                }
                if (_this.choices[index].choiceText === _this.otherChoiceText) {
                    _this.otherChoiceAdded = false;
                    _this.canAnswerShort = false;
                }
                _this.choices.splice(index, 1);
                _this.reorderChoices();
                if (_this.choices.length < _this.maxChoices) {
                    _this.canAddChoice = true;
                }
            };
            this.canDelete = function (choice) {
                return !(choice.choiceLabel === '1' || choice.choiceLabel === '2');
            };
            this.isChoiceDuplicated = function (choice) {
                var choices = _this.choices.filter(function (c) { return c.choiceText === choice.choiceText; });
                if (choices && choices.length > 1) {
                    _this.isOk = false;
                    for (var _i = 0, choices_1 = choices; _i < choices_1.length; _i++) {
                        var c = choices_1[_i];
                        if (!c.reserved) {
                            c.error = 'Duplicate choice';
                        }
                    }
                }
                else {
                    _this.isOk = true;
                }
            };
            this.onQuestionTypeSelected = function () {
                if (_this.questionType.id === 'MCQS') {
                    _this.choices = [{
                            choiceLabel: '1',
                            choiceText: ''
                        },
                        {
                            choiceLabel: '2',
                            choiceText: ''
                        }];
                }
                else {
                    _this.choices = [];
                }
            };
            this.$onInit = function () {
                document.getElementById('qReadTime').focus();
            };
            this.choicesToDelete = [];
            this.fileReader = new FileReader();
            this.editMode = this.$scope.editMode;
            this.index = parseInt(this.$scope.index);
            this.question = this.$scope.question ? JSON.parse(this.$scope.question) : {};
            this.questionIndex = this.index;
            if (this.$scope.question) {
                this.questionText = this.question.questionText;
                this.questionType = this.questionTypes.find(function (type) { return type.id === _this.question.questionType; });
                this.readingTime = this.question.readingTime;
                this.timeallowed = this.question.timeallowed;
                this.questionVideoURL = this.question.questionVideoURL;
                this.canChooseMultiple = this.question.canChooseMultiple;
                this.canAnswerShort = this.question.canAnswerShort;
                this.choices = this.question.choices;
            }
            if (this.editMode) {
                this.questionIndex = this.index + 1;
            }
        }
        QuestionFormCardController.$inject = ["$scope", "SessionService", "$mdDialog"];
        return QuestionFormCardController;
    }());
    ;
    app.directive('ngQuestionFormCard', function () { return new QuestionFormCard(); });
})(Qna || (Qna = {}));
;
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    app.config([
        "$locationProvider",
        function ($locationProvider) {
            $locationProvider.hashPrefix("");
        }
    ]);
    app.config([
        "$stateProvider",
        function ($stateProvider) {
            $stateProvider.state({
                name: "root",
                templateUrl: "views/root.html",
                controller: "RootController",
                controllerAs: "root"
            });
            $stateProvider.state({
                name: "root.candidate",
                abstract: true,
                template: "<ui-view/>"
            });
            $stateProvider.state({
                name: "root.company",
                abstract: true,
                template: "<ui-view/>"
            });
            $stateProvider.state({
                name: "root.admin",
                abstract: true,
                template: "<ui-view/>"
            });
            $stateProvider.state({
                name: "root.tips",
                templateUrl: "views/tips-test.html",
                controller: "TipsTestController",
                controllerAs: "tipsTest",
                url: "/tips-test"
            });
        }
    ]);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    app.config([
        "$locationProvider",
        function ($locationProvider) {
            $locationProvider.hashPrefix("");
        }
    ]);
    app.config([
        "$stateProvider",
        function ($stateProvider) {
            $stateProvider.state({
                name: "root.home",
                template: "",
                controller: "HomeController",
                controllerAs: "home",
                url: "/",
                data: {
                    info: "views/candidate/info/home.html"
                }
            });
            $stateProvider.state({
                name: "root.admin.login",
                templateUrl: "views/admin/login.html",
                controller: "admin.LoginController",
                controllerAs: "login",
                url: "/admin/login",
                data: {
                    info: "views/company/info/home.html"
                }
            });
            $stateProvider.state({
                name: "root.admin.dashboard",
                templateUrl: "views/admin/dashboard.html",
                controller: "admin.DashboardController",
                controllerAs: "dashboard",
                url: "/admin/dashboard",
                data: {
                    info: "views/company/info/home.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.interviews",
                templateUrl: "views/admin/interviews.html",
                controller: "admin.InterviewsController",
                controllerAs: "interviews",
                url: "/admin/interviews/{companyId}",
                data: {
                    info: "views/company/info/dashboard.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        "$http",
                        function ($state, SessionService, $q, $timeout, $http) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.reports",
                templateUrl: "views/admin/reports.html",
                controller: "admin.ReportsController",
                controllerAs: "reports",
                url: "/admin/reports",
                data: {
                    info: "views/company/info/dashboard.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        "$http",
                        function ($state, SessionService, $q, $timeout, $http) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.candidates",
                templateUrl: "views/admin/candidates.html",
                controller: "admin.CandidatesController",
                controllerAs: "candidates",
                url: "/admin/candidates/{interviewId}",
                data: {
                    info: "views/company/info/candidates.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.employees",
                templateUrl: "views/admin/employees.html",
                controller: "admin.EmployeesController",
                controllerAs: "employees",
                url: "/admin/employees/{companyId}",
                data: {
                    info: "views/company/info/employees.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.questions",
                templateUrl: "views/admin/questions.html",
                controller: "admin.QuestionsController",
                controllerAs: "questions",
                url: "/admin/questions/{interviewId}",
                data: {
                    info: "views/company/info/questions.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.login");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.recordings",
                templateUrl: "views/admin/recordings.html",
                controller: "admin.RecordingsController",
                controllerAs: "recordings",
                url: "/admin/recordings/{interviewId}",
                data: {
                    info: "views/company/info/recordings.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.home");
                                }, 0);
                                return $q.reject();
                            }
                            return $q.resolve();
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.essayanswerrs",
                templateUrl: "views/admin/essay-answers.html",
                controller: "admin.EssayAnswersController",
                controllerAs: "eanswers",
                url: "/admin/essay-answers/{invitationid}",
                data: {
                    info: "views/company/info/recordings.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.login");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.companydetails",
                templateUrl: "views/admin/company-details.html",
                controller: "admin.CompanyDetailsController",
                controllerAs: "cdetails",
                url: "/admin/company-details/{companyid}",
                data: {
                    info: "views/company/info/recordings.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.login");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.player",
                templateUrl: "views/admin/player.html",
                controller: "admin.PlayerController",
                controllerAs: "player",
                url: "/admin/player",
                data: {
                    info: "views/company/info/player.html"
                },
                params: {
                    recording: {},
                    interviewId: "",
                    recordings: {}
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.essayquestions",
                templateUrl: "views/admin/essay-questions.html",
                controller: "admin.EssayQuestionsController",
                controllerAs: "essayquestions",
                url: "/admin/essay-questions/{interviewId}",
                data: {
                    info: "views/company/info/questions.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.login");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.whitelabel",
                templateUrl: "views/admin/whitelabel.html",
                controller: "admin.WhiteLabelController",
                controllerAs: "whitelabel",
                url: "/admin/whitelabel",
                data: {
                    info: "views/company/info/candidates.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.modules",
                templateUrl: "views/admin/modules.html",
                controller: "admin.SystemModuleController",
                controllerAs: "sysmodules",
                url: "/admin/modules",
                data: {
                    info: "views/company/info/candidates.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.settings",
                templateUrl: "views/admin/settings.html",
                controller: "admin.SystemSettingsController",
                controllerAs: "settings",
                url: "/admin/settings",
                params: {
                    group: null
                },
                data: {
                    info: "views/company/info/candidates.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.cycle-details",
                templateUrl: "views/admin/cycle-details.html",
                controller: "admin.CycleDetailsController",
                controllerAs: "cycledetails",
                url: "/admin/cycle-details/{cycleid}",
                data: {
                    info: "views/company/info/recordings.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.login");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.admin.billing",
                templateUrl: "views/admin/billing.html",
                controller: "admin.BillingController",
                controllerAs: "billing",
                url: "/admin/billing",
                data: {
                    info: "views/company/info/candidates.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAdmin()) {
                                $timeout(function () {
                                    $state.go("root.admin.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
        }
    ]);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    app.config([
        "$locationProvider",
        function ($locationProvider) {
            $locationProvider.hashPrefix("");
        }
    ]);
    app.config([
        "$stateProvider",
        function ($stateProvider) {
            $stateProvider.state({
                name: "root.candidate.home",
                templateUrl: "views/candidate/home.html",
                controller: "candidate.HomeController",
                controllerAs: "home",
                url: "/applicant/home",
                data: {
                    info: "views/candidate/info/home.html"
                }
            });
            $stateProvider.state({
                name: "root.candidate.expertlogin",
                templateUrl: "views/industry-experts/login.html",
                controller: "candidate.ExpertLoginController",
                controllerAs: "expertlogin",
                url: "/industryexpert/login",
                data: {
                    info: "views/candidate/info/home.html"
                }
            });
            $stateProvider.state({
                name: "root.candidate.signup",
                templateUrl: "views/candidate/signup.html",
                controller: "candidate.SignupController",
                controllerAs: "signup",
                url: "/applicant/signup",
                data: {
                    info: "views/candidate/info/signup.html"
                }
            });
            $stateProvider.state({
                name: "root.candidate.multipartyinterview",
                templateUrl: "views/candidate/multiparty-interview.html",
                controller: "candidate.MultipartyInterviewController",
                controllerAs: "multipartyinterview",
                url: "/applicant/multiparty-interview/{eventid}",
                data: {
                    info: "views/candidate/info/signup.html"
                }
            });
            $stateProvider.state({
                name: "root.candidate.open",
                templateUrl: "views/candidate/open-invite.html",
                controller: "candidate.OpenInviteController",
                controllerAs: "open",
                url: "/applicant/open/{interviewid}",
                data: {
                    info: "views/candidate/info/open-invite.html"
                }
            });
            $stateProvider.state({
                name: "root.candidate.company-intro",
                templateUrl: "views/candidate/company-intro.html",
                controller: "candidate.CompanyIntroController",
                controllerAs: "companyintrovideo",
                url: "/applicant/company-intro/{video}/{interviewId}",
                params: {
                    interview: null,
                    video: "intro",
                },
                data: {
                    info: "views/candidate/info/open-invite.html"
                }
            });
            $stateProvider.state({
                name: "root.system-requirements",
                templateUrl: "views/system-requirements.html",
                url: "/applicant/system-requirements",
                data: {
                    info: "views/candidate/info/system-requirements.html"
                }
            });
            $stateProvider.state({
                name: "root.candidate.industryexpertregister",
                templateUrl: "views/industry-experts/register.html",
                controller: "candidate.IndustryExpertRegistrationController",
                controllerAs: "industryexpertregister",
                url: "/industryexpert/register",
                params: { interview: {} },
                data: {
                    info: "views/candidate/info/open-invite.html"
                }
            });
            $stateProvider.state({
                name: "root.candidate.industryexpertdashboard",
                templateUrl: "views/industry-experts/dashboard.html",
                controller: "candidate.IndustryExpertDashboardController",
                controllerAs: "industryexpertdashboard",
                url: "/industryexpert/dashboard",
                params: { interview: {} },
                data: {
                    info: "views/candidate/info/open-invite.html"
                }
            });
            $stateProvider.state({
                name: "root.candidate.dashboard",
                templateUrl: "views/candidate/dashboard.html",
                controller: "candidate.DashboardController",
                controllerAs: "dashboard",
                url: "/applicant/dashboard",
                data: {
                    info: "views/candidate/info/dashboard.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.setup",
                templateUrl: "views/candidate/setup.html",
                controller: "candidate.SetupController",
                controllerAs: "setup",
                url: "/applicant/setup/{interviewid}",
                data: {
                    info: "views/candidate/info/setup.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.bandwidth",
                templateUrl: "views/candidate/bandwidth.html",
                controller: "candidate.BandwidthController",
                controllerAs: "bandwidth",
                url: "/applicant/bandwidth/{interviewid}",
                data: {
                    info: "views/candidate/info/setup.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.practise",
                templateUrl: "views/candidate/practise.html",
                controller: "candidate.PractiseController",
                controllerAs: "c",
                url: "/applicant/practise/{interviewId}",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.interview",
                templateUrl: "views/candidate/practise.html",
                controller: "candidate.PractiseController",
                controllerAs: "c",
                url: "/applicant/interview/{interviewId}",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.expertpractice",
                templateUrl: "views/industry-experts/practice.html",
                controller: "candidate.ExpertPracticeController",
                controllerAs: "iepractice",
                url: "/industryexpert/practice/{interviewId}",
                data: {
                    info: "views/candidate/info/practice.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.expertquestions",
                templateUrl: "views/industry-experts/questions.html",
                controller: "candidate.ExpertQuestionsController",
                controllerAs: "iequestions",
                url: "/industryexpert/questions",
                data: {
                    info: "views/candidate/info/practice.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.multuparty-setup",
                templateUrl: "/views/candidate/multiparty-setup.html",
                controller: "candidate.MultipartySetupController",
                controllerAs: "setup",
                url: "/applicant/setup",
                data: {
                    info: "views/candidate/info/practice.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.interviewrecording",
                templateUrl: "views/candidate/interview-recording.html",
                controller: "candidate.InterviewRecordingController",
                controllerAs: "interviewrecording",
                url: "/applicant/interview-recording",
                data: {
                    info: "views/candidate/info/interview.html"
                },
                params: { invitationGuid: "" },
                resolve: {
                    isAttemptAllowed: [
                        "$state",
                        "$stateParams",
                        "$http",
                        function ($state, $stateParams, $http) {
                            var invitationGuid = $stateParams.invitationGuid;
                            return $http.get("/candidates/recording/attempt-allowed/" + invitationGuid);
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.interviewessay",
                templateUrl: "views/candidate/interview-essay.html",
                controller: "candidate.InterviewEssayController",
                controllerAs: "interviewessay",
                url: "/applicant/interview-essay",
                data: {
                    info: "views/candidate/info/interview.html"
                },
                params: { invitationGuid: "" },
                resolve: {
                    isAttemptAllowed: [
                        "$state",
                        "$stateParams",
                        "$http",
                        function ($state, $stateParams, $http) {
                            var invitationGuid = $stateParams.invitationGuid;
                            return $http.get("/candidates/recording/essay-attempt-allowed/" + invitationGuid);
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.expertrecording",
                templateUrl: "views/industry-experts/expert-recording.html",
                controller: "candidate.ExpertRecordingController",
                controllerAs: "expertrecording",
                url: "/industryexpert/expert-recording",
                data: {
                    info: "views/candidate/info/interview.html",
                }, params: { invitationGuid: "" },
                resolve: {
                    "isAttemptAllowed": ["$state", "$stateParams", "$http", function ($state, $stateParams, $http) {
                            var invitationGuid = $stateParams.invitationGuid;
                            return $http.get("/candidates/recording/attempt-allowed/" + invitationGuid);
                        }]
                }
            });
            $stateProvider.state({
                name: "root.candidate.expertvideoreview",
                templateUrl: "views/industry-experts/review-video.html",
                controller: "candidate.ExpertVideoReviewController",
                controllerAs: "expertvideoreview",
                url: "/industryexpert/expert-video-review",
                data: {
                    info: "views/candidate/info/interview.html",
                },
                params: {
                    answers: {},
                    recordingGuid: ""
                }
            });
            $stateProvider.state({
                name: "root.candidate.expertvideoupload",
                templateUrl: "views/industry-experts/uploading.html",
                controller: "candidate.ExpertUploadController",
                controllerAs: "expertvideoupload",
                url: "/industryexpert/expert-video-upload",
                data: {
                    info: "views/candidate/info/interview.html",
                },
                params: {
                    answers: {},
                    recordingGuid: ""
                },
            });
            $stateProvider.state({
                name: "root.candidate.recordvideocv",
                templateUrl: "views/candidate/recordcv-interview.html",
                controller: "candidate.RecordCVController",
                controllerAs: "recordvideocv",
                url: "/applicant/record-cv",
                data: {
                    info: "views/candidate/info/interview.html"
                },
                params: { invitationGuid: "" },
                resolve: {
                    isAttemptAllowed: [
                        "$state",
                        "$stateParams",
                        "$http",
                        function ($state, $stateParams, $http) {
                            var invitationGuid = $stateParams.invitationGuid;
                            return $http.get("/candidates/recording/attempt-allowed/" + invitationGuid);
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.uploading",
                templateUrl: "views/candidate/uploading.html",
                controller: "candidate.UploadController",
                controllerAs: "upload",
                url: "/applicant/upload",
                data: {
                    info: "views/candidate/info/upload.html"
                },
                params: {
                    answers: {},
                    recordingGuid: ""
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        function ($state, SessionService, $q) {
                            if (!SessionService.isCandidate()) {
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.complete-profile",
                templateUrl: "views/candidate/complete-candidate-profile.html",
                controller: "candidate.CompleteCandidateProfileController",
                controllerAs: "candidateProfile",
                url: "/applicant/complete-profile",
                data: {
                    info: "views/candidate/info/upload.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        function ($state, SessionService, $q) {
                            if (!SessionService.isCandidate()) {
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.goodbye",
                templateUrl: "views/candidate/goodbye.html",
                controller: "candidate.GoodbyeController",
                controllerAs: "goodbye",
                url: "/applicant/goodbye/{invitationId}",
                data: {
                    info: "views/candidate/info/goodbye.html"
                },
                params: { recordingGuid: "" },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        function ($state, SessionService, $q) {
                            if (!SessionService.isCandidate()) {
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.essaygoodbye",
                templateUrl: "views/candidate/goodbye-essay.html",
                controller: "candidate.EssayGoodbyeController",
                controllerAs: "essaygoodbye",
                url: "/applicant/essaygoodbye",
                data: {
                    info: "views/candidate/info/goodbye.html"
                },
                params: { interviewid: "" },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        function ($state, SessionService, $q) {
                            if (!SessionService.isCandidate()) {
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.candidate.expertgoodbye",
                templateUrl: "views/industry-experts/goodbye.html",
                controller: "candidate.ExpertGoodbyeController",
                controllerAs: "expertgoodbye",
                url: "/industryexpert/goodbye",
                data: {
                    info: "views/candidate/info/goodbye.html",
                },
                params: { recordingGuid: "" },
                resolve: {
                    "redirectIfNotLoggedIn": ["$state", "SessionService", "$q", function ($state, SessionService, $q) {
                            if (!SessionService.isCandidate()) {
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }]
                }
            });
            $stateProvider.state({
                name: "root.candidate.documents",
                templateUrl: "views/candidate/candidate-documents.html",
                controller: "candidate.CandidateDocumentsController",
                controllerAs: "document",
                url: "/applicant/documents/{interviewid}",
                data: {
                    info: "views/company/info/reports.html"
                }
            });
            $stateProvider.state({
                name: "root.candidate.profile",
                templateUrl: "views/candidate/user-account.html",
                controller: "candidate.UserAccountController",
                controllerAs: "account",
                url: "/applicant/user-account",
                data: {
                    info: "views/company/info/change-password.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCandidate()) {
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
        }
    ]);
    var redirectIfNotLoggedIn = function (SessionService, $timeout, $state, $q) {
        var newRoute = null;
        if (!SessionService.isAuthenticated())
            newRoute = 'root.candidate.home';
        else if (SessionService.hasAdminPermissions())
            newRoute = 'root.company.dashboard';
        if (newRoute !== null) {
            $timeout(function () { return $state.go(newRoute); }, 0);
            return $q.reject();
        }
        return $q.resolve();
    };
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    app.config([
        "$locationProvider",
        function ($locationProvider) {
            $locationProvider.hashPrefix("");
        }
    ]);
    app.config([
        "$stateProvider",
        function ($stateProvider) {
            $stateProvider.state({
                name: "root.company.home",
                templateUrl: "views/company/home.html",
                controller: "company.HomeController",
                controllerAs: "home",
                url: "/staff/home?recordingid",
                data: {
                    info: "views/company/info/home.html"
                }
            });
            $stateProvider.state({
                name: "root.company.login",
                templateUrl: "views/company/login.html",
                controller: "company.LoginController",
                controllerAs: "login",
                url: "/staff/login?promocode&planid",
                data: {
                    info: "views/company/info/home.html"
                }
            });
            $stateProvider.state({
                name: "root.company.industryexpertlibrary",
                templateUrl: "views/company/industry-expert-library.html",
                controller: "company.IndustryExpertsLibraryController",
                controllerAs: "ielibrary",
                url: "/industryexperts",
                data: {
                    info: "views/company/info/home.html"
                }
            });
            $stateProvider.state({
                name: "root.company.upload-video",
                templateUrl: "views/company/company-video-upload.html",
                controller: "company.VideoUploadController",
                controllerAs: "uploadvideo",
                url: "/staff/upload-video",
                params: {
                    interview: {},
                    video: "intro"
                },
                data: {
                    info: "views/company/info/home.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.employee-interview",
                templateUrl: "views/company/employee-interview.html",
                controller: "company.EmployeeInterviewController",
                controllerAs: "employeeinterview",
                url: "/staff/employee-interview/{eventid}",
                data: {
                    info: "views/company/info/home.html"
                }
            });
            $stateProvider.state({
                name: "root.company.reset",
                templateUrl: "views/company/reset-password.html",
                controller: "company.ResetPasswordController",
                controllerAs: "reset",
                url: "/staff/reset-password/{token}",
                data: {
                    info: "views/company/info/change-password.html"
                }
            });
            $stateProvider.state({
                name: "root.company.change-password",
                templateUrl: "views/company/change-password.html",
                controller: "company.ChangePasswordController",
                controllerAs: "password",
                url: "/staff/change-password",
                data: {
                    info: "views/company/info/change-password.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                return $q.reject();
                            }
                            else {
                                if (angular.isUndefined(SessionService.getName()) ||
                                    SessionService.getName() === "Anonymous") {
                                    $timeout(function () {
                                        $state.go("root.company.complete-profile");
                                    }, 0);
                                }
                                else {
                                    return $q.resolve();
                                }
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.profile",
                templateUrl: "views/company/user-account.html",
                controller: "company.UserAccountController",
                controllerAs: "account",
                url: "/staff/user-account",
                data: {
                    info: "views/company/info/change-password.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                return $q.reject();
                            }
                            else {
                                if (angular.isUndefined(SessionService.getName()) ||
                                    SessionService.getName() === "Anonymous") {
                                    $timeout(function () {
                                        $state.go("root.company.complete-profile");
                                    }, 0);
                                }
                                else {
                                    return $q.resolve();
                                }
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.dashboard",
                templateUrl: "views/company/dashboard.html",
                controller: "company.DashboardController",
                controllerAs: "dashboard",
                url: "/staff/dashboard",
                data: {
                    info: "views/company/info/dashboard.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        "$http",
                        function ($state, SessionService, $q, $timeout, $http) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else if (SessionService.isRoleReviewer() && !SessionService.hasAdminPermissions()) {
                                $timeout(function () {
                                    $state.go("root.company.reviewerdashboard");
                                }, 0);
                                return $q.reject();
                            }
                            else if (SessionService.isRoleAdmin() && !SessionService.isRoleSuperAdmin()) {
                                $timeout(function () {
                                    $state.go("root.company.admindashboard");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.admindashboard",
                templateUrl: "views/company/admin/dashboard.html",
                controller: "company.AdminDashboardController",
                controllerAs: "dashboard",
                url: "/staff/admin/dashboard",
                data: {
                    info: "views/company/info/dashboard.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService",
                        "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany() || !SessionService.isRoleAdmin()) {
                                $timeout(function () { $state.go("root.company.home"); }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.reviewerdashboard",
                templateUrl: "views/reviewer/dashboard.html",
                controller: "company.ReviewerDashboardController",
                controllerAs: "dashboard",
                url: "/staff/reviewer/dashboard",
                data: {
                    info: "views/company/info/dashboard.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService",
                        "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany() || !SessionService.isRoleReviewer()) {
                                $timeout(function () { $state.go("root.company.home"); }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.reviewer-recordings",
                templateUrl: "views/reviewer/recordings.html",
                controller: "company.ReviewerRecordingsController",
                controllerAs: "recordings",
                url: "/staff/reviewer/recordings/{interviewid}",
                data: {
                    info: "views/company/info/dashboard.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService",
                        "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany() || !SessionService.isRoleReviewer()) {
                                $timeout(function () { $state.go("root.company.home"); }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.documents",
                templateUrl: "views/company/candidate-documents.html",
                controller: "company.CandidateDocumentsController",
                controllerAs: "document",
                url: "/staff/documents/{type}/{interviewid}/{enduserid}",
                data: {
                    info: "views/company/info/reports.html"
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.blocked",
                templateUrl: "views/company/blocked.html",
                controller: "company.BlockedController",
                controllerAs: "blocked",
                url: "/staff/blocked",
                data: {
                    info: "views/company/info/reports.html"
                }
            });
            $stateProvider.state({
                name: "root.company.reports",
                templateUrl: "views/company/reports.html",
                controller: "company.ReportController",
                controllerAs: "report",
                url: "/staff/report/{interviewId}",
                data: {
                    info: "views/company/info/reports.html"
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.multipartyreports",
                templateUrl: "views/company/multiparty-reports.html",
                controller: "company.MultipartyReportController",
                controllerAs: "multipartyreport",
                url: "/staff/multiparty-report/{interviewId}",
                data: {
                    info: "views/company/info/reports.html"
                }
            });
            $stateProvider.state({
                name: "root.company.leaderboard",
                templateUrl: "views/company/oneway-reports.html",
                controller: "company.OnewayReportController",
                controllerAs: "onewayreport",
                url: "/staff/leaderboard/{interviewId}"
            });
            $stateProvider.state({
                name: "root.company.multipartyleaderboard",
                templateUrl: "views/company/leaderboard-multiparty.html",
                controller: "company.LeaderboardMultipartyController",
                controllerAs: "leaderboard",
                url: "/staff/multipartyleaderboard/{interviewId}",
                data: {
                    info: "views/company/info/reports.html"
                }
            });
            $stateProvider.state({
                name: "root.company.leaderboarddetails",
                templateUrl: "views/company/leaderboard-oneway.html",
                controller: "company.LeaderboardOnewayController",
                controllerAs: "leaderboardoneway",
                url: "/staff/leaderboard/{interviewId}/applicants/{invitationId}"
            });
            $stateProvider.state({
                name: "root.company.reports-detail",
                templateUrl: "views/company/reports-detail.html",
                controller: "company.ReportDetailController",
                controllerAs: "report",
                url: "/staff/report-detail/{interviewId}/{candidateId}/{total}/{recordingId}",
                data: {
                    info: "views/company/info/reports.html"
                }
            });
            $stateProvider.state({
                name: "root.company.interview_reports",
                templateUrl: "views/company/interview-reports.html",
                controller: "company.InterviewReportsController",
                controllerAs: "reports",
                url: "/staff/interview_reports/{type}?reportOrigin",
                data: {
                    info: "views/company/info/reports.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService",
                        "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany() || !SessionService.isRoleSuperAdmin()) {
                                $timeout(function () { $state.go("root.company.home"); }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.general-reports",
                templateUrl: "views/company/general-reports.html",
                controller: "company.GeneralReportsController",
                controllerAs: "generalReports",
                url: "/staff/general_reports",
                data: {
                    info: "views/company/info/reports.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService",
                        "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany() || !SessionService.hasAdminPermissions()) {
                                $timeout(function () { $state.go("root.company.home"); }, 0);
                                return $q.reject();
                            }
                            else if (SessionService.isRoleAdmin() && !SessionService.isRoleSuperAdmin()) {
                                $timeout(function () { $state.go("root.company.admin-reports"); }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.admin-reports",
                templateUrl: "views/company/admin/report_overview.html",
                controller: "company.AdminReportsController",
                controllerAs: "generalReports",
                url: "/staff/admin/general_reports",
                data: {
                    info: "views/company/info/reports.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService",
                        "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany() || !SessionService.isRoleAdmin()) {
                                $timeout(function () { $state.go("root.company.home"); }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.yearly-reports",
                templateUrl: "views/company/yearly-reports.html",
                controller: "company.YearlyReportsController",
                controllerAs: "yearlyReports",
                url: "/staff/yearly_reports?year",
                data: {
                    info: "views/company/info/reports.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService",
                        "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany() || !SessionService.isRoleSuperAdmin()) {
                                $timeout(function () { $state.go("root.company.home"); }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.single_interview_reports",
                templateUrl: "views/company/single-interview-reports.html",
                controller: "company.SingleInterviewReportsController",
                controllerAs: "singlereport",
                url: "/staff/report/single/{interviewId}?reportOrigin",
                data: {
                    info: "views/company/info/reports.html"
                }
            });
            $stateProvider.state({
                name: "root.company.dynamic-report",
                templateUrl: "views/company/dynamic-reports.html",
                controller: "company.DynamicReportsController",
                controllerAs: "dynamicReports",
                url: "/staff/dynamic-reports?reportOrigin&reportType&startDate&endDate",
                data: {
                    info: "views/company/info/reports.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService",
                        "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.hasAdminPermissions()) {
                                $timeout(function () { $state.go("root.company.home"); }, 0);
                                return $q.reject();
                            }
                            else if (!SessionService.isRoleSuperAdmin() && SessionService.isRoleAdmin() && SessionService.isCompany()) {
                                $timeout(function () { $state.go("root.company.admin-reports"); }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.billing",
                templateUrl: "views/company/billing.html",
                controller: "company.BillingController",
                controllerAs: "billing",
                url: "/staff/billing",
                data: {
                    info: "views/company/info/reports.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService",
                        "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.hasAdminPermissions()) {
                                $timeout(function () { $state.go("root.company.home"); }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.cycle-details",
                templateUrl: "views/admin/cycle-details.html",
                controller: "admin.CycleDetailsController",
                controllerAs: "cycledetails",
                url: "/staff/cycle-details/{cycleid}",
                data: {
                    info: "views/company/info/recordings.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService",
                        "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.hasAdminPermissions()) {
                                $timeout(function () { $state.go("root.company.home"); }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.user-reports",
                templateUrl: "views/company/user-reports.html",
                controller: "company.UserReportsController",
                controllerAs: "userReports",
                url: "/staff/user_reports/{type}?reportOrigin",
                data: {
                    info: "views/company/info/reports.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService",
                        "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany() || !SessionService.hasAdminPermissions()) {
                                $timeout(function () { $state.go("root.company.home"); }, 0);
                                return $q.reject();
                            }
                            else if (SessionService.isRoleAdmin() && !SessionService.isRoleSuperAdmin()) {
                                $timeout(function () { $state.go("root.company.admin-reports"); }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.feedback_overview",
                templateUrl: "views/company/feedback-overview.html",
                controller: "company.FeedbackReportsController",
                controllerAs: "feedback",
                url: "/staff/report/general/feedback-overview",
                data: {
                    info: "views/company/info/reports.html"
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.candidatesmultiparty",
                templateUrl: "views/company/candidates-multiparty.html",
                controller: "company.MultipartyCandidatesController",
                controllerAs: "candidatesmultiparty",
                url: "/staff/candidates-multiparty/{interviewId}",
                data: {
                    info: "views/company/info/candidates.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.upcominginterviews",
                templateUrl: "views/company/upcoming-interviews.html",
                controller: "company.UpcomingInterviewsController",
                controllerAs: "upcominginterviews",
                url: "/staff/upcoming-interviews",
                data: {
                    info: "views/company/info/candidates.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.candidatedetails",
                templateUrl: "views/company/candidate-details.html",
                controller: "company.CandidateDetailsController",
                controllerAs: "candidate",
                url: "/staff/interviews/{interviewId}/application/{applicationId}",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService", "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.candidates",
                templateUrl: "views/company/candidates.html",
                controller: "company.CandidatesController",
                controllerAs: "candidates",
                url: "/staff/applicants/{interviewId}",
                data: {
                    info: "views/company/info/candidates.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.rejected",
                templateUrl: "views/company/rejected.html",
                controller: "company.RejectedController",
                controllerAs: "rejected",
                url: "/staff/rejected/{interviewId}",
                data: {
                    info: "views/company/info/candidates.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.reviewers",
                templateUrl: "views/company/reviewers.html",
                controller: "company.ReviewersController",
                controllerAs: "reviewers",
                url: "/staff/reviewers",
                data: {
                    info: "views/company/info/employees.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAuthenticated())
                                $timeout(function () { return $state.go("root.company.home"); }, 0);
                            if (!SessionService.hasAdminPermissions())
                                $timeout(function () { return $state.go("root.company.dashboard"); }, 0);
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                if (SessionService.forceUpgrade()) {
                                    $timeout(function () {
                                        $state.go("root.company.upgrade");
                                    }, 0);
                                }
                                if (angular.isUndefined(SessionService.getName()) ||
                                    SessionService.getName() === "Anonymous") {
                                    $timeout(function () {
                                        $state.go("root.company.complete-profile");
                                    }, 0);
                                }
                                else {
                                    return $q.resolve();
                                }
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.reviewer-comments",
                templateUrl: "views/company/reviewer-comments.html",
                controller: "company.ReviewerCommentsController",
                controllerAs: "reviewerComments",
                url: "/staff/reviewer/{reviewerId}/{interviewId}",
                data: {
                    info: "views/company/info/dashboard.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAuthenticated())
                                $timeout(function () { return $state.go("root.company.home"); }, 0);
                            if (!SessionService.hasAdminPermissions())
                                $timeout(function () { return $state.go("root.company.dashboard"); }, 0);
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                if (SessionService.forceUpgrade()) {
                                    $timeout(function () {
                                        $state.go("root.company.upgrade");
                                    }, 0);
                                }
                                if (angular.isUndefined(SessionService.getName()) ||
                                    SessionService.getName() === "Anonymous") {
                                    $timeout(function () {
                                        $state.go("root.company.complete-profile");
                                    }, 0);
                                }
                                else {
                                    return $q.resolve();
                                }
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.employees",
                templateUrl: "views/company/employees.html",
                controller: "company.EmployeesController",
                controllerAs: "employees",
                url: "/staff/employees",
                data: {
                    info: "views/company/info/employees.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isAuthenticated())
                                $timeout(function () { return $state.go("root.company.home"); }, 0);
                            if (!SessionService.hasAdminPermissions())
                                $timeout(function () { return $state.go("root.company.dashboard"); }, 0);
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                if (SessionService.forceUpgrade()) {
                                    $timeout(function () {
                                        $state.go("root.company.upgrade");
                                    }, 0);
                                }
                                if (angular.isUndefined(SessionService.getName()) ||
                                    SessionService.getName() === "Anonymous") {
                                    $timeout(function () {
                                        $state.go("root.company.complete-profile");
                                    }, 0);
                                }
                                else {
                                    return $q.resolve();
                                }
                            }
                        }
                    ]
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.multipartysettings",
                templateUrl: "views/company/multiparty-interview-settings.html",
                controller: "company.MultipartySettingsController",
                controllerAs: "multipartysettings",
                url: "/staff/multiparty-interview-settings/{eventId}",
                data: {
                    info: "views/company/info/rating-dimensions.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                if (angular.isUndefined(SessionService.getName()) ||
                                    SessionService.getName() === "Anonymous") {
                                    $timeout(function () {
                                        $state.go("root.company.complete-profile");
                                    }, 0);
                                }
                                else {
                                    return $q.resolve();
                                }
                            }
                        }
                    ]
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.multipartyeventteam",
                templateUrl: "views/company/multipartyevent-team.html",
                controller: "company.MultipartyEventTeamController",
                controllerAs: "multipartyeventteam",
                url: "/staff/multiparty-event-team/{eventId}",
                data: {
                    info: "views/company/info/rating-dimensions.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                if (angular.isUndefined(SessionService.getName()) ||
                                    SessionService.getName() === "Anonymous") {
                                    $timeout(function () {
                                        $state.go("root.company.complete-profile");
                                    }, 0);
                                }
                                else {
                                    return $q.resolve();
                                }
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.ratingdimensions",
                templateUrl: "views/company/rating-dimensions.html",
                controller: "company.RatingDimensionsController",
                controllerAs: "ratingdimensions",
                url: "/staff/rating-dimensions",
                data: {
                    info: "views/company/info/rating-dimensions.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                if (SessionService.forceUpgrade()) {
                                    $timeout(function () {
                                        $state.go("root.company.upgrade");
                                    }, 0);
                                }
                                if (angular.isUndefined(SessionService.getName()) ||
                                    SessionService.getName() === "Anonymous") {
                                    $timeout(function () {
                                        $state.go("root.company.complete-profile");
                                    }, 0);
                                }
                                else {
                                    return $q.resolve();
                                }
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.questions",
                templateUrl: "views/company/questions.html",
                controller: "company.QuestionsController",
                controllerAs: "questions",
                url: "/staff/questions/{interviewId}",
                data: {
                    info: "views/company/info/questions.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.corecompetencies",
                templateUrl: "views/company/core-competencies.html",
                controller: "company.CoreCompetenciesController",
                controllerAs: "corecompetencies",
                url: "/staff/corecompetencies/",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.essayquestions",
                templateUrl: "views/company/essay-questions.html",
                controller: "company.EssayQuestionsController",
                controllerAs: "essayquestions",
                url: "/staff/essay-questions/{interviewId}",
                data: {
                    info: "views/company/info/questions.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.interviewteam",
                templateUrl: "views/company/interview-team.html",
                controller: "company.InterviewEmployeesController",
                controllerAs: "interviewteam",
                url: "/staff/interview-team/{interviewId}",
                data: {
                    info: "views/company/info/questions.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.interviewsettings",
                templateUrl: "views/company/oneway-interview-settings.html",
                controller: "company.InterviewSettingsController",
                controllerAs: "interviewsettings",
                url: "/staff/interview-settings/{interviewId}",
                data: {
                    info: "views/company/info/questions.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.multipartyinterviewteam",
                templateUrl: "views/company/multiparty-interview-team.html",
                controller: "company.MultipartyInterviewEmployeesController",
                controllerAs: "multipartyinterviewteam",
                url: "/staff/multiparty-interview-team/{eventid}",
                data: {
                    info: "views/company/info/questions.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.recordings",
                templateUrl: "views/company/candidate-details.html",
                controller: "company.CandidateDetailsController",
                controllerAs: "candidate",
                url: "/staff/recordings/{interviewId}",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else if (!SessionService.hasActivePlan()) {
                                $timeout(function () {
                                    $state.go("root.company.dashboard");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.essayanswerrs",
                templateUrl: "views/company/essay-answers.html",
                controller: "company.EssayAnswersController",
                controllerAs: "eanswers",
                url: "/staff/interviews/{interviewId}/application/{invitationid}/essay-answers",
                data: {
                    info: "views/company/info/recordings.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else if (!SessionService.hasActivePlan()) {
                                $timeout(function () {
                                    $state.go("root.company.dashboard");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.multipartyrecordings",
                templateUrl: "views/company/multiparty-recordings.html",
                controller: "company.MultipartyRecordingsController",
                controllerAs: "multipartyrecordings",
                url: "/staff/multiparty-recordings/{interviewId}",
                data: {
                    info: "views/company/info/recordings.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.archives",
                templateUrl: "views/company/archives.html",
                controller: "company.ArchivesController",
                controllerAs: "archives",
                url: "/staff/archives",
                data: {
                    info: "views/company/info/recordings.html"
                },
                resolve: {
                    "redirectIfNotLoggedIn": ["$state", "SessionService", "$q", "$timeout", function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }]
                }
            });
            $stateProvider.state({
                name: "root.company.candidate-profiles",
                templateUrl: "views/company/candidate-profiles-library.html",
                controller: "company.CandidateProfilesController",
                controllerAs: "candidateProfilesCtrl",
                url: "/staff/candidate-profiles",
                data: {
                    info: "views/company/info/recordings.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        "$http",
                        function ($state, SessionService, $q, $timeout, $http) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                $http
                                    .get("/company/subscriptions/check-status")
                                    .then(function (result) {
                                    if (result.data.planName === "Unlimited") {
                                        return $q.resolve();
                                    }
                                    else {
                                        $timeout(function () {
                                            $state.go("root.company.dashboard");
                                        }, 0);
                                        return $q.reject();
                                    }
                                });
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.candidate-profile-player",
                templateUrl: "views/company/candidate-profile-player.html",
                controller: "company.CandidateProfilePlayerController",
                controllerAs: "candidateProfilePlayer",
                url: "/staff/candidate-profile-player",
                data: {
                    info: "views/company/info/player.html"
                },
                params: {
                    recording: {},
                    recordings: {},
                    duration: 0
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        "$http",
                        function ($state, SessionService, $q, $timeout, $http) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                $http
                                    .get("/company/subscriptions/check-status")
                                    .then(function (result) {
                                    if (result.data.planName === "Unlimited") {
                                        return $q.resolve();
                                    }
                                    else {
                                        $q.reject();
                                    }
                                });
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.player",
                templateUrl: "views/company/player.html",
                controller: "company.PlayerController",
                controllerAs: "player",
                url: "/staff/interviews/{interviewId}/application/{invitationid}/player",
                data: {
                    info: "views/company/info/player.html"
                },
                params: {
                    recording: {},
                    interviewId: "",
                    recordings: {}
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService", "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (SessionService.forceUpgrade()) {
                                $timeout(function () {
                                    $state.go("root.company.upgrade");
                                }, 0);
                            }
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else if (!SessionService.hasActivePlan()) {
                                $timeout(function () {
                                    $state.go("root.company.dashboard");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.multipartyplayer",
                templateUrl: "views/company/multiparty-player.html",
                controller: "company.MultipartyPlayerController",
                controllerAs: "multipartyplayer",
                url: "/staff/multiparty-player",
                data: {
                    info: "views/company/info/player.html"
                },
                params: {
                    interview: {}
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.upload",
                templateUrl: "views/company/upload.html",
                controller: "company.UploadController",
                controllerAs: "upload",
                url: "/staff/upload/{interviewId}",
                data: {
                    info: "views/company/info/upload.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.applicantsreport",
                templateUrl: "views/company/applicants-report.html",
                controller: "company.ApplicantsReportController",
                controllerAs: "report",
                url: "/staff/interviews/{interviewId}/report",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService", "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany() ||
                                (!SessionService.isRoleSuperAdmin() && !SessionService.isRoleAdmin())) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.plans",
                templateUrl: "views/company/plans.html",
                controller: "company.PlansController",
                controllerAs: "plans",
                url: "/staff/plans",
                data: {
                    info: "views/company/info/plans.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        "$http",
                        function ($state, SessionService, $q, $timeout, $http) {
                            if (SessionService.isCompany()) {
                                if (angular.isUndefined(SessionService.getName()) ||
                                    SessionService.getName() === "Anonymous") {
                                    $timeout(function () {
                                        $state.go("root.company.complete-profile");
                                    }, 0);
                                }
                                else {
                                    $timeout(function () {
                                        $state.go("root.company.dashboard");
                                    }, 0);
                                    return $q.resolve();
                                }
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.approvals",
                templateUrl: "views/company/approvals.html",
                controller: "company.ApprovalsController",
                controllerAs: "approvals",
                url: "/staff/approvals/{requestId}",
                data: {
                    info: "views/company/info/approvals.html"
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.signup",
                templateUrl: "views/company/signup.html",
                controller: "company.SignupController",
                controllerAs: "signup",
                url: "/staff/signup",
                data: {
                    info: "views/company/info/signup.html"
                },
                params: {
                    plan: {}
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        "$http",
                        function ($state, SessionService, $q, $timeout, $http) {
                            if (SessionService.isCompany()) {
                                if (angular.isUndefined(SessionService.getName()) ||
                                    SessionService.getName() === "Anonymous") {
                                    $timeout(function () {
                                        $state.go("root.company.complete-profile");
                                    }, 0);
                                }
                                else {
                                    $timeout(function () {
                                        $state.go("root.company.plan-manager");
                                    }, 0);
                                    return $q.resolve();
                                }
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.braintree",
                templateUrl: "views/company/braintree.html",
                controller: "company.BraintreeController",
                controllerAs: "btree",
                url: "/staff/braintree",
                data: {
                    info: "views/company/info/braintree.html"
                },
                params: {
                    plan: {},
                    promocode: ""
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        function ($state, SessionService, $q) {
                            if (!SessionService.isCompany()) {
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.plan-manager",
                templateUrl: "views/company/plan-manager.html",
                controller: "company.PlanManagerController",
                controllerAs: "manager",
                url: "/staff/plan-manager",
                data: {
                    info: "views/company/info/plan-manager.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                if (SessionService.forceUpgrade()) {
                                    $timeout(function () {
                                        $state.go("root.company.upgrade");
                                    }, 0);
                                }
                                if (angular.isUndefined(SessionService.getName()) ||
                                    SessionService.getName() === "Anonymous") {
                                    $timeout(function () {
                                        $state.go("root.company.complete-profile");
                                    }, 0);
                                }
                                else {
                                    return $q.resolve();
                                }
                            }
                        }
                    ]
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.upgrade",
                templateUrl: "views/company/upgrade.html",
                controller: "company.UpgradeController",
                controllerAs: "upgrade",
                url: "/staff/upgrade",
                data: {
                    info: "views/company/info/plan-manager.html"
                }
            });
            /* Mark To Remove */
            $stateProvider.state({
                name: "root.company.complete-profile",
                templateUrl: "views/company/complete-profile.html",
                controller: "company.CompleteProfileController",
                controllerAs: "completeProfile",
                url: "/staff/complete-profile",
                data: {
                    info: "views/company/info/complete-profile.html"
                }
            });
            // Groups page
            $stateProvider.state({
                name: "root.company.groups",
                templateUrl: "views/company/groups/groups.html",
                controller: "company.GroupsController",
                controllerAs: "groupListController",
                url: "/staff/groups",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            // Group details page
            $stateProvider.state({
                name: "root.company.group_details",
                templateUrl: "views/company/groups/group_details.html",
                controller: "company.GroupsDetailsController",
                controllerAs: "groupDetailsController",
                params: { group: null, employees: null },
                url: "/staff/groups/details",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            // New group page
            $stateProvider.state({
                name: "root.company.new_group",
                templateUrl: "views/company/groups/group_details.html",
                controller: "company.GroupsDetailsController",
                controllerAs: "groupDetailsController",
                params: { employees: null },
                url: "/staff/groups/new",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.flagged-interviews",
                templateUrl: "views/company/interviews/flagged_interviews.html",
                controller: "company.FlaggedInterviewsController",
                controllerAs: "flaggedInterviewsController",
                url: "/staff/flagged-interviews",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.flag-review",
                templateUrl: "views/company/flag_review.html",
                controller: "company.FlagReviewController",
                controllerAs: "flagReview",
                url: "/staff/flagged-interviews/{interviewId}/review/{invitationId}",
                data: {
                    info: "views/company/info/player.html"
                },
                params: {
                    recording: {},
                    interviewId: "",
                    invitationId: ""
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state", "SessionService", "$q", "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (SessionService.forceUpgrade()) {
                                $timeout(function () {
                                    $state.go("root.company.upgrade");
                                }, 0);
                            }
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else if (!SessionService.hasActivePlan()) {
                                $timeout(function () {
                                    $state.go("root.company.dashboard");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.flagged-interviews-report",
                templateUrl: "views/company/flagged_interviews_report.html",
                controller: "company.FlaggedReportController",
                controllerAs: "flaggedReports",
                url: "/staff/flagged-interviews-reports?reportOrigin",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.reattempt-requests",
                templateUrl: "views/company/interviews/reattempt-requests.html",
                controller: "company.ReattemptsController",
                controllerAs: "reattempts",
                url: "/staff/reattempt-requests",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.reattempt-requests-report",
                templateUrl: "views/company/reattempt-requests-report.html",
                controller: "company.ReattemptsReportController",
                controllerAs: "reattemptsReport",
                url: "/staff/reattempt-reports?reportOrigin",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.flow-bulk",
                templateUrl: "views/company/interviews/flow-interviews.html",
                controller: "company.FlowInterviewsController",
                controllerAs: "flow",
                url: "/staff/flow-interviews",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.flow-reports",
                templateUrl: "views/company/flow-reports.html",
                controller: "company.FlowReportController",
                controllerAs: "flowreports",
                url: "/staff/flow-reports?reportOrigin",
                data: {
                //info: "views/company/info/slatelogs.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.new-custom-competency",
                templateUrl: "views/company/interviews/custom_competency.html",
                controller: "company.CustomCompetencyController",
                controllerAs: "customCompetency",
                url: "/staff/interview/{interviewId}/custom-competencies/new",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.edit-custom-competency",
                templateUrl: "views/company/interviews/custom_competency.html",
                controller: "company.CustomCompetencyController",
                controllerAs: "customCompetency",
                url: "/staff/interview/{interviewId}/custom-competencies/{competencyId}/edit",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.interview_types",
                templateUrl: "views/company/manage-interview-types.html",
                controller: "company.InterviewTypesController",
                controllerAs: "interviewtypes",
                url: "/staff/interview-types",
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.email-template",
                templateUrl: "views/company/interviews/email_template.html",
                controller: "company.EmailTemplateController",
                controllerAs: "emailTemplates",
                url: "/staff/interview/{interviewId}/email-template",
                params: { interview: null },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) { return redirectIfNotLoggedIn(SessionService, $timeout, $state, $q); }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.search",
                templateUrl: "views/company/search.html",
                controller: "company.SearchController",
                controllerAs: "search",
                url: "/staff/search",
                data: {
                //info: "views/company/info/search.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
            $stateProvider.state({
                name: "root.company.slatelogs",
                templateUrl: "views/company/slate-logs.html",
                controller: "company.SlateLogsController",
                controllerAs: "slatelogs",
                url: "/staff/slatelogs",
                data: {
                //info: "views/company/info/slatelogs.html"
                },
                resolve: {
                    redirectIfNotLoggedIn: [
                        "$state",
                        "SessionService",
                        "$q",
                        "$timeout",
                        function ($state, SessionService, $q, $timeout) {
                            if (!SessionService.isCompany()) {
                                $timeout(function () {
                                    $state.go("root.company.home");
                                }, 0);
                                return $q.reject();
                            }
                            else {
                                return $q.resolve();
                            }
                        }
                    ]
                }
            });
        }
    ]);
    var redirectIfNotLoggedIn = function (SessionService, $timeout, $state, $q) {
        var newRoute = null;
        if (!SessionService.isAuthenticated() || !SessionService.isCompany())
            newRoute = 'root.company.home';
        else if (!SessionService.hasAdminPermissions())
            newRoute = 'root.company.dashboard';
        if (newRoute !== null) {
            $timeout(function () { return $state.go(newRoute); }, 0);
            return $q.reject();
        }
        return $q.resolve();
    };
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var DialogService = /** @class */ (function () {
        function DialogService($mdDialog) {
            var _this = this;
            this.$mdDialog = $mdDialog;
            this.buildDialog = function (_a) {
                var title = _a.title, text = _a.text, okText = _a.okText, _b = _a.cancelText, cancelText = _b === void 0 ? null : _b, _c = _a.theme, theme = _c === void 0 ? null : _c;
                var dialog = theme === 'alert' ? _this.$mdDialog.alert() : _this.$mdDialog.confirm();
                dialog
                    .title(title)
                    .textContent(text)
                    .ok(okText);
                if (theme !== 'alert' && cancelText != null)
                    dialog.cancel(cancelText).theme("confirmdialog");
                if (theme === 'alert')
                    dialog.parent(angular.element(document.body));
                return dialog;
            };
            this.buildPromptDialog = function (_a) {
                var title = _a.title, text = _a.text, placeholder = _a.placeholder, okText = _a.okText, event = _a.event, _b = _a.cancelText, cancelText = _b === void 0 ? null : _b, _c = _a.required, required = _c === void 0 ? false : _c, _d = _a.ariaLabel, ariaLabel = _d === void 0 ? null : _d;
                var dialog = _this.$mdDialog.prompt()
                    .title(title)
                    .textContent(text)
                    .placeholder(placeholder)
                    .required(required)
                    .targetEvent(event)
                    .ok(okText)
                    .cancel(cancelText || 'Cancel');
                if (ariaLabel)
                    dialog.ariaLabel(ariaLabel);
                return dialog;
            };
            this.showDialog = function (_a) {
                var dialog = _a.dialog, _b = _a.onOk, onOk = _b === void 0 ? function () { } : _b, _c = _a.onCancel, onCancel = _c === void 0 ? function () { } : _c;
                return _this.$mdDialog.show(dialog).then(function () { onOk(); _this.hideDialog(); }, function () { onCancel(); _this.hideDialog(); });
            };
            this.showPromptDialog = function (_a) {
                var dialog = _a.dialog, _b = _a.onOk, onOk = _b === void 0 ? function (result) {
                    if (result === void 0) { result = null; }
                } : _b, _c = _a.onCancel, onCancel = _c === void 0 ? function () { } : _c;
                return _this.$mdDialog.show(dialog).then(function (result) { onOk(result); _this.hideDialog(); }, function () { onCancel(); _this.hideDialog(); });
            };
            this.hideDialog = function () { return _this.$mdDialog.hide(); };
        }
        DialogService.$inject = ["$mdDialog"];
        return DialogService;
    }());
    app.service("DialogService", DialogService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var MediaRecordingService = /** @class */ (function () {
        function MediaRecordingService(recordingsService, $rootScope) {
            var _this = this;
            this.recordingsService = recordingsService;
            this.$rootScope = $rootScope;
            this.isRecording = false;
            this.getStream = function () { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, new Promise(function (resolve, reject) { return __awaiter(_this, void 0, void 0, function () {
                                var _a, error_65;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            _b.trys.push([0, 2, , 3]);
                                            _a = this;
                                            return [4 /*yield*/, navigator.mediaDevices.getUserMedia({ video: true, audio: true })];
                                        case 1:
                                            _a.stream = _b.sent();
                                            resolve(this.stream);
                                            return [3 /*break*/, 3];
                                        case 2:
                                            error_65 = _b.sent();
                                            reject();
                                            return [3 /*break*/, 3];
                                        case 3: return [2 /*return*/];
                                    }
                                });
                            }); })];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            }); };
            this.ensureMediaAccess = function () { return __awaiter(_this, void 0, void 0, function () {
                var stream_1, error_66;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, navigator.mediaDevices.getUserMedia({ video: true, audio: true })];
                        case 1:
                            stream_1 = _a.sent();
                            stream_1.getAudioTracks().forEach(function (track) { return track.stop(); });
                            stream_1.getVideoTracks().forEach(function (track) { return track.stop(); });
                            return [2 /*return*/, true];
                        case 2:
                            error_66 = _a.sent();
                            return [2 /*return*/, false];
                        case 3: return [2 /*return*/];
                    }
                });
            }); };
            this.startRecord = function () {
                if (!_this.isRecording) {
                    _this.record = RecordRTC(_this.stream, { mimeType: "video/webm; codecs=\"vp8, vorbis\"", bitsPerSecond: 256000 });
                    _this.record.startRecording();
                }
                _this.isRecording = true;
            };
            this.stopRecord = function (answerId, presignedURL) { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.stopAudioVideoTracks();
                            if (!this.isRecording) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.record.stopRecording(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.saveCurrentRecording(answerId, presignedURL)];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                }); }); })];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            this.isRecording = false;
                            return [2 /*return*/];
                    }
                });
            }); };
            this.stopPractiseRecord = function () { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            this.stopAudioVideoTracks();
                            if (!this.isRecording) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.record.stopRecording(function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.saveCurrentRecordingPractise()];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                }); }); })];
                        case 1:
                            _a.sent();
                            _a.label = 2;
                        case 2:
                            this.isRecording = false;
                            return [2 /*return*/];
                    }
                });
            }); };
            this.stopAudioVideoTracks = function () {
                if (_this.stream) {
                    _this.stream.getAudioTracks().forEach(function (track) { return track.stop(); });
                    _this.stream.getVideoTracks().forEach(function (track) { return track.stop(); });
                }
            };
            this.saveCurrentRecording = function (id, presignedURL) { return __awaiter(_this, void 0, void 0, function () {
                var blob, recording;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            blob = this.record.getBlob();
                            recording = new File([blob], id + ".webm", { type: 'video/webm' });
                            return [4 /*yield*/, this.recordingsService.saveVideoResponse(id, recording, presignedURL)];
                        case 1:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); };
            this.saveCurrentRecordingPractise = function () { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    console.log("Practise Pssed");
                    return [2 /*return*/];
                });
            }); };
            this.getCurrentRecording = function () { return __awaiter(_this, void 0, void 0, function () {
                var id, blob, recording, recordingUrl;
                return __generator(this, function (_a) {
                    id = "practiseplayback";
                    blob = this.record.getBlob();
                    recording = new File([blob], id + ".webm", { type: 'video/webm' });
                    recordingUrl = window.URL.createObjectURL(recording);
                    return [2 /*return*/, recordingUrl];
                });
            }); };
        }
        MediaRecordingService.$inject = ['candidate.recordingsService', "$rootScope"];
        return MediaRecordingService;
    }());
    app.service('MediaRecordingService', MediaRecordingService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var OpentokService = /** @class */ (function () {
        function OpentokService($rootScope, recordingsService) {
            var _this = this;
            this.$rootScope = $rootScope;
            this.recordingsService = recordingsService;
            this.isRecording = false;
            this.startSession = function (interviewId, publisherElementId, sessionData) { return __awaiter(_this, void 0, void 0, function () {
                var _a, session, token;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.getSessionAndToken(interviewId, sessionData)];
                        case 1:
                            _a = _b.sent(), session = _a.session, token = _a.token;
                            this.session = session;
                            session.connect(token, function (error) {
                                var publisherOptions = {
                                    width: "100%",
                                    height: 0,
                                    insertMode: "append",
                                };
                                var publisher = OT.initPublisher(publisherElementId, publisherOptions, function (error) {
                                    if (_this.session.capabilities.publish === 1)
                                        _this.session.publish(publisher, function () { });
                                });
                                publisher.on({
                                    accessDenied: function (event) { return _this.mediaAccessGranted = false; },
                                    accessAllowed: function (event) { return _this.mediaAccessGranted = true; },
                                    streamCreated: function (event) { return _this.mediaAccessGranted = true; }
                                });
                            });
                            return [2 /*return*/];
                    }
                });
            }); };
            this.ensureMediaAccess = function () { return __awaiter(_this, void 0, void 0, function () {
                var stream_2, error_67;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            return [4 /*yield*/, navigator.mediaDevices.getUserMedia({ video: true, audio: true })];
                        case 1:
                            stream_2 = _a.sent();
                            stream_2.getAudioTracks().forEach(function (track) { return track.stop(); });
                            stream_2.getVideoTracks().forEach(function (track) { return track.stop(); });
                            return [2 /*return*/, true];
                        case 2:
                            error_67 = _a.sent();
                            return [2 /*return*/, false];
                        case 3: return [2 /*return*/];
                    }
                });
            }); };
            this.closeSession = function () { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {
                                if (_this.session && _this.publisher)
                                    _this.session.unpublish(_this.publisher);
                                if (_this.session)
                                    _this.session.disconnect();
                                if (_this.publisher)
                                    _this.publisher.destroy();
                                delete _this.session;
                                delete _this.publisher;
                                OT.sessions.destroy();
                                OT.publishers.destroy();
                                resolve();
                            })];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            }); };
            this.hasFinished = function () { return !_this.isRecording; };
            this.getSessionAndToken = function (interviewId, sessionData) { return __awaiter(_this, void 0, void 0, function () {
                var _a, apiKey, sessionId, token, _b, session;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            _b = sessionData;
                            if (_b) return [3 /*break*/, 2];
                            return [4 /*yield*/, this.recordingsService.getInterviewApiKeyAndSession(interviewId)];
                        case 1:
                            _b = (_c.sent());
                            _c.label = 2;
                        case 2:
                            _a = _b, apiKey = _a.apiKey, sessionId = _a.sessionId, token = _a.token;
                            session = OT.initSession(apiKey, sessionId);
                            return [2 /*return*/, { session: session, token: token }];
                    }
                });
            }); };
        }
        OpentokService.$inject = [
            "$rootScope",
            "candidate.recordingsService",
        ];
        return OpentokService;
    }());
    app.service('OpentokService', OpentokService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    var CandidateInvitationsService = /** @class */ (function () {
        function CandidateInvitationsService($http, practiceConstants) {
            var _this = this;
            this.$http = $http;
            this.practiceConstants = practiceConstants;
            this.baseURL = '/candidates/invitation';
            this.getInvitations = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/")];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getInvitation = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.requestAttempt = function (interviewId, reason, type) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/request-attempt/" + interviewId, { reason: reason, type: type })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getInterviewDocuments = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/get-documents/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.setFinishedWatchingInvitationVideos = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/watched-video/" + interviewId, {})];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getPractiseQuestions = function () { return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve, reject) { return resolve(_this.practiceConstants.questions); })];
                });
            }); };
            this.setFinishedPractise = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/completed-practice/" + interviewId, {})];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.rejectInterview = function (invitationId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/reject-invitation/" + invitationId, {})];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
        }
        CandidateInvitationsService.$inject = ["$http", "practiseQuestions"];
        return CandidateInvitationsService;
    }());
    app.service("candidate.invitationsService", CandidateInvitationsService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var CandidateRecordingsService = /** @class */ (function () {
        function CandidateRecordingsService($http) {
            var _this = this;
            this.$http = $http;
            this.baseURL = '/candidates/recording';
            this.setupBaseURL = '/candidates/setup';
            this.getInterviewQuestionsOpenTok = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/all-questions-opentok/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getInterviewQuestions = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/all-questions/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.isAttemptAllowed = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/attempt-allowed/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.registerAttempt = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/register-attempt/" + interviewId, {})];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getInterviewApiKeyAndSession = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.setupBaseURL + "/session-and-token/" + interviewId, {})];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.markQuestionAsDone = function (answerId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.baseURL + "/answer/" + answerId, {})];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.saveVideoResponse = function (answerId, videoFile, amazonS3PresignedURL) { return __awaiter(_this, void 0, void 0, function () {
                var error_68, newPresignedURL, error_69, form, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 9]);
                            return [4 /*yield*/, this.uploadToAmazon(answerId, amazonS3PresignedURL, videoFile)];
                        case 1:
                            _a.sent();
                            return [3 /*break*/, 9];
                        case 2:
                            error_68 = _a.sent();
                            console.log(error_68);
                            return [4 /*yield*/, this.requestNewPresignedURL(answerId)];
                        case 3:
                            newPresignedURL = _a.sent();
                            _a.label = 4;
                        case 4:
                            _a.trys.push([4, 6, , 8]);
                            return [4 /*yield*/, this.uploadToAmazon(answerId, newPresignedURL.url, videoFile)];
                        case 5:
                            _a.sent();
                            return [3 /*break*/, 8];
                        case 6:
                            error_69 = _a.sent();
                            form = new FormData();
                            form.append('file', videoFile);
                            return [4 /*yield*/, this.$http.post(this.baseURL + "/answers-video/" + answerId, form, {
                                    transformRequest: angular.identity,
                                    headers: { 'Content-Type': undefined }
                                })];
                        case 7:
                            result = (_a.sent()).data;
                            return [3 /*break*/, 8];
                        case 8: return [3 /*break*/, 9];
                        case 9: return [2 /*return*/];
                    }
                });
            }); };
            this.uploadToAmazon = function (answerId, amazonURL, videoFile) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.$http.put(amazonURL, videoFile, {
                                headers: {
                                    'Content-Type': 'video/webm',
                                    transformRequest: angular.identity
                                }
                            })];
                        case 1:
                            _a.sent();
                            return [4 /*yield*/, this.$http.post(this.baseURL + "/success-bucket-upload/" + answerId, {})];
                        case 2:
                            _a.sent();
                            return [2 /*return*/];
                    }
                });
            }); };
            this.requestNewPresignedURL = function (answerId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/regenerate-upload-url/" + answerId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.saveTextResponse = function (answerId, answerData) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.baseURL + "/submit-written-answer/" + answerId, answerData)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.markInterviewAsDone = function (interviewId) {
                var completedInterviewsVariable = localStorage.getItem('completedInteviews');
                var completedInterviews = completedInterviewsVariable ? completedInterviewsVariable.split(',') : [];
                completedInterviews = __spreadArray(__spreadArray([], completedInterviews), [interviewId]);
                localStorage.setItem('completedInteviews', completedInterviews.toString());
            };
            this.isInterviewCompleted = function (interviewId) {
                var completedInterviewsVariable = localStorage.getItem('completedInteviews');
                if (!completedInterviewsVariable)
                    return false;
                var completedInterviews = completedInterviewsVariable ? completedInterviewsVariable.split(',') : [];
                return completedInterviews.find(function (completedInterviewId) { return interviewId === completedInterviewId; }) != null;
            };
        }
        CandidateRecordingsService.$inject = ["$http"];
        return CandidateRecordingsService;
    }());
    app.service("candidate.recordingsService", CandidateRecordingsService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var CompanyCompetenciesService = /** @class */ (function () {
        function CompanyCompetenciesService($http) {
            var _this = this;
            this.$http = $http;
            this.coreCompetencyBaseURL = '/company/core-competencies';
            this.coreCompetencyQuestionBaseURL = '/company/core-competencies/question';
            this.customCompetencyBaseURL = '/company/custom-competency';
            this.customCompetencyQuestionBaseURL = '/company/custom-competency/question';
            this.customCompetencyQuestionsBaseURL = '/company/custom-competency/questions';
            this.customCompetencyQuestionChoiceBaseURL = '/company/custom-competency/choice';
            this.getCoreCompetencies = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.coreCompetencyBaseURL + "/")];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.createCoreCompetency = function (competencyData) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.coreCompetencyBaseURL + "/", competencyData)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.createCoreCompetencyQuestion = function (competencyId, questionData) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.coreCompetencyQuestionBaseURL + "/" + competencyId, questionData)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.updateCoreCompetencyQuestion = function (questionData) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.coreCompetencyQuestionBaseURL, questionData)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.deleteQuestionFromCoreCompetency = function (questionId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.delete(this.coreCompetencyQuestionBaseURL + "/" + questionId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.createCustomCompetency = function (competencyData) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post("" + this.customCompetencyBaseURL, competencyData)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.updateCustomCompetency = function (competencyData) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put("" + this.customCompetencyBaseURL, competencyData)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.deleteCustomCompetency = function (competencyId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.delete(this.customCompetencyBaseURL + "/" + competencyId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getInterviewCustomCompetencies = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.customCompetencyBaseURL + "/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.createCompetencyQuestion = function (competencyId, questionData) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.customCompetencyQuestionBaseURL + "/" + competencyId, questionData)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.createCompetencyQuestions = function (competencyId, questionData) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.customCompetencyQuestionsBaseURL + "/" + competencyId, questionData)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.updateCompetencyQuestion = function (questionData) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.customCompetencyQuestionBaseURL, questionData)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.deleteQuestionFromCompetency = function (questionId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.delete(this.customCompetencyQuestionBaseURL + "/" + questionId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getCompetencyQuestions = function (competencyId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.customCompetencyQuestionBaseURL + "/" + competencyId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.deleteChoice = function (choiceId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.delete(this.customCompetencyQuestionChoiceBaseURL + "/" + choiceId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
        }
        ;
        ;
        CompanyCompetenciesService.$inject = ["$http"];
        return CompanyCompetenciesService;
    }());
    app.service("company.competenciesService", CompanyCompetenciesService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var CSVDownloadService = /** @class */ (function () {
        function CSVDownloadService($http) {
            this.$http = $http;
        }
        CSVDownloadService.prototype.ConvertToCSV = function (objArray, headerList) {
            var array = typeof objArray != 'object' ? JSON.parse(objArray) : objArray;
            var str = '';
            var row = 'S.No, ';
            for (var index in headerList) {
                var headerName = headerList[index];
                row += this.getReadableName(headerName) + ',';
            }
            row = row.slice(0, -1);
            str += row + '\r\n';
            for (var i = 0; i < array.length; i++) {
                var line = (i + 1) + '';
                for (var index in headerList) {
                    var head = headerList[index];
                    if (typeof array[i][head] == 'string') {
                        line += ',"' + array[i][head] + '"';
                    }
                    else if (typeof array[i][head] == 'undefined') {
                        line += ',';
                    }
                    else {
                        line += ',' + array[i][head];
                    }
                    //line += ',' + array[i][head]; 
                }
                str += line + '\r\n';
            }
            return str;
        };
        CSVDownloadService.prototype.downloadFile = function (data, filename, headersArray) {
            if (filename === void 0) { filename = 'data'; }
            var csvData = this.ConvertToCSV(data, headersArray);
            var blob = new Blob(['\ufeff' + csvData], {
                type: 'text/csv;charset=utf-8;'
            });
            var dwldLink = document.createElement("a");
            var url = URL.createObjectURL(blob);
            var isSafariBrowser = is.safari();
            navigator.userAgent.indexOf('Chrome') == -1;
            //if Safari open in new window to save file with random filename. 
            if (isSafariBrowser) {
                dwldLink.setAttribute("target", "_blank");
            }
            dwldLink.setAttribute("href", url);
            dwldLink.setAttribute("download", filename + ".csv");
            dwldLink.style.visibility = "hidden";
            document.body.appendChild(dwldLink);
            dwldLink.click();
            document.body.removeChild(dwldLink);
        };
        CSVDownloadService.prototype.getReadableName = function (header) {
            var result = header.replace(/([A-Z])/g, " $1");
            var finalResult = result.charAt(0).toUpperCase() + result.slice(1);
            return finalResult;
            // return lodash.startCase(header);
        };
        CSVDownloadService.$inject = ["$http"];
        return CSVDownloadService;
    }());
    app.service("company.CSVService", CSVDownloadService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var CompanyEmployeesService = /** @class */ (function () {
        function CompanyEmployeesService($http) {
            var _this = this;
            this.$http = $http;
            this.baseURL = '/company/employees';
            this.getEmployees = function (queryParams) {
                if (queryParams === void 0) { queryParams = null; }
                var params = queryParams || {};
                return _this.$http.get(_this.baseURL, { params: params });
            };
            this.inviteEmployee = function (employeeData) { return _this.$http.post(_this.baseURL + "/invite/", employeeData); };
            this.updateEmployee = function (employee) { return _this.$http.put(_this.baseURL + "/", employee); };
        }
        CompanyEmployeesService.$inject = ["$http"];
        return CompanyEmployeesService;
    }());
    app.service("company.employeesService", CompanyEmployeesService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var CompanyGroupsService = /** @class */ (function () {
        function CompanyGroupsService($http) {
            var _this = this;
            this.$http = $http;
            this.baseURL = '/company/group';
            this.getGroups = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.searchGroups = function (name) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/search", { params: { name: name } })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.createGroup = function (groupData) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.baseURL, groupData)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.deleteGroup = function (groupId) { return _this.$http.delete(_this.baseURL + "/" + groupId); };
            this.addUsersToGroup = function (groupId, userIds) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/" + groupId + "/users", { userIds: userIds })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getGroupUsers = function (groupId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/" + groupId + "/users")];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.removeUserFromGroup = function (groupId, userId) { return _this.$http.delete(_this.baseURL + "/" + groupId + "/" + userId); };
        }
        CompanyGroupsService.$inject = ["$http"];
        return CompanyGroupsService;
    }());
    app.service("company.groupsService", CompanyGroupsService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var CompanyInterviewsService = /** @class */ (function () {
        function CompanyInterviewsService($http) {
            var _this = this;
            this.$http = $http;
            this.baseURL = '/company/interviews';
            this.getInterview = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/single/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getInterviews = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/")];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getInterviewTypes = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/interview-types")];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.createInterview = function (interviewData) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.baseURL + "/", interviewData)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getTeamMembers = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/get-all-team-members/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.setTeamMembers = function (interviewId, members) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/give-access-multiple/" + interviewId, members)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getTeamGroups = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/get-all-team-groups/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.removeTeamMembers = function (interviewId, memberId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/remove-access-for-one/" + interviewId + "/" + memberId, {})];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.removeTeamGroup = function (interviewId, groupId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/remove-access-for-group/" + interviewId + "/" + groupId, {})];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getInterviewEmailTemplate = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/email-template/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.createInterviewEmailTemplate = function (interviewId, template) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.baseURL + "/email-template/" + interviewId, template)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.modifyInterviewEmailTemplate = function (interviewId, template) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/email-template/" + interviewId, template)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.assignReviewersToCandidate = function (invitationId, reviewers) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/invitations/reviewers/" + invitationId, reviewers)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.copyInterviews = function (interviewId, invitationIds) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/invitations/" + interviewId, { invitationIds: invitationIds })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getUGADMInvitations = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/ugadm/invitations")];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
        }
        CompanyInterviewsService.$inject = ["$http"];
        return CompanyInterviewsService;
    }());
    app.service("company.interviewsService", CompanyInterviewsService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var CompanyInvitationsService = /** @class */ (function () {
        function CompanyInvitationsService($http) {
            var _this = this;
            this.$http = $http;
            this.baseURL = '/company/invitations';
            this.getInterviewInvitations = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getOne = function (invitationId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/get-one/" + invitationId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.createInterviewInvitation = function (interviewId, invitationData) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.baseURL + "/" + interviewId, invitationData)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.commentInvitation = function (invitationId, comment) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.baseURL + "/comment/" + invitationId, { comment: comment })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.tagInvitation = function (invitationId, tag) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.baseURL + "/tag/" + invitationId, { tag: tag })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.updateInterviewInvitation = function (invitationData) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/", invitationData)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.deleteInterviewInvitation = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.delete(this.baseURL + "/" + interviewId, {})];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.assignReviewersToCandidate = function (invitationId, reviewers) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/reviewers/" + invitationId, reviewers)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.extendDeadlineToCandidate = function (invitationId, deadline) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/deadline/" + invitationId, deadline)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.extendBatchCandidate = function (deadlineDTO) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/deadline/batch", deadlineDTO)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getInvitationReviewers = function (invitationId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/reviewers/" + invitationId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.changeReattemptStatus = function (invitationId, allow) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/request-attempt/" + invitationId + "?allow=" + allow, {})];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getInvitationReattemptRequest = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/request-reattempt/" + interviewId, {})];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.changeFlagStatus = function (interviewId, accept) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/flagged-interviews/" + interviewId + "?accept=" + accept, {})];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.acceptSelectedQuestionsFlag = function (invitationId, selectedQuestions) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/flagged-interviews/selected/" + invitationId, { selectedQuestions: selectedQuestions })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getReattempts = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/reattempt-requests", {})];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
        }
        CompanyInvitationsService.$inject = ["$http"];
        return CompanyInvitationsService;
    }());
    app.service("company.invitationsService", CompanyInvitationsService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var CompanyLeaderboardService = /** @class */ (function () {
        function CompanyLeaderboardService($http) {
            var _this = this;
            this.$http = $http;
            this.baseURL = '/company';
            this.getDetailsByInterview = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/details-by-interview/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getRatingDimensions = function (invitationId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/ratings/rating-dimensions-invitation/" + invitationId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getLeaderboard = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/ratings/get-report/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.setTag = function (interviewId, tag) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.put(this.baseURL + "/ratings/all-ratings/" + interviewId + "/tag", { tag: tag })];
                    case 1: return [2 /*return*/, (_a.sent())];
                }
            }); }); };
        }
        CompanyLeaderboardService.$inject = ["$http"];
        return CompanyLeaderboardService;
    }());
    app.service("company.leaderboardService", CompanyLeaderboardService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var CompanyRatingsService = /** @class */ (function () {
        function CompanyRatingsService($http) {
            var _this = this;
            this.$http = $http;
            this.baseURL = '/company/ratings';
            this.getRatingDimensions = function (invitationId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/rating-dimensions-invitation/" + invitationId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getLeaderBoardRatings = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/get-leaderboard/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getAllRatingsByInvitation = function (invitationId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/all-ratings/" + invitationId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getUserAverageRating = function (invitationId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/average-rating/" + invitationId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.postRating = function (answerId, userRating) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.baseURL + "/rate/" + answerId, userRating)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
        }
        CompanyRatingsService.$inject = ["$http"];
        return CompanyRatingsService;
    }());
    app.service("company.ratingsService", CompanyRatingsService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var CompanyRecordingsService = /** @class */ (function () {
        function CompanyRecordingsService($http) {
            var _this = this;
            this.$http = $http;
            this.baseURL = '/company/recordings';
            this.getInterviewRecordings = function (interviewid) {
                if (interviewid === void 0) { interviewid = null; }
                return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/", { params: { interviewid: interviewid } })];
                        case 1: return [2 /*return*/, (_a.sent()).data];
                    }
                }); });
            };
            this.flagRecording = function (invitationId, comment) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.post(this.baseURL + "/flag-invitation/" + invitationId, { comment: comment })];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getFlaggedInterviewRecordings = function (invitationId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/flag-invitations/" + invitationId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
        }
        CompanyRecordingsService.$inject = ["$http"];
        return CompanyRecordingsService;
    }());
    app.service("company.recordingsService", CompanyRecordingsService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var CompanyReportsService = /** @class */ (function () {
        function CompanyReportsService($http) {
            var _this = this;
            this.$http = $http;
            this.baseURL = '/company';
            this.getApplicantsReport = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/interviews/applicant-report/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getReviewersReport = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/interviews/reviewers-report/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getInterviewTypeReport = function (interviewType) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/interviews/report/" + interviewType)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getSingleInterviewReport = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/interviews/single-interview/report/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getDynamicCountReport = function (from, to) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/dashboard/dynamic-report?from=" + from + "&to=" + to)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getDynamicDetailedReport = function (type, from, to) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/interviews/dynamic-report?type=" + type + "&from=" + from + "&to=" + to)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getGraduateReport = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/interviews/graduate-report")];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getScholarshipReport = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/interviews/scholarship-report")];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getGraduateExcelReport = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/interviews/graduate-report/excel")];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getScholarshipExcelReport = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/interviews/scholarship-report/excel")];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getApplicantsExcelReport = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/interviews/applicant-report-excel/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getReviewersExcelReport = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/interviews/reviewers-report-excel/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getLeaderboardReport = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/ratings/get-leaderboard/excel/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
            this.getInvitationsExcelReport = function (interviewId) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/interviews/invitations/excel/" + interviewId)];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
        }
        CompanyReportsService.$inject = ["$http"];
        return CompanyReportsService;
    }());
    app.service("company.reportsService", CompanyReportsService);
})(Qna || (Qna = {}));
var Qna;
(function (Qna) {
    var app = Qna.getModule();
    ;
    var UserService = /** @class */ (function () {
        function UserService($http) {
            var _this = this;
            this.$http = $http;
            this.baseURL = '/user/detail';
            this.getGroups = function () { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.$http.get(this.baseURL + "/group")];
                    case 1: return [2 /*return*/, (_a.sent()).data];
                }
            }); }); };
        }
        UserService.$inject = ["$http"];
        return UserService;
    }());
    app.service("user.userService", UserService);
})(Qna || (Qna = {}));
